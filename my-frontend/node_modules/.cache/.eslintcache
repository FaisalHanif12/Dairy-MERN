[{"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\index.js":"1","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\GlobalStyle.js":"2","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\App.js":"4","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\LoginForm.jsx":"5","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\Navbar.jsx":"6","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\NavbarStyle.js":"7","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\NavbarData.js":"8","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\Home.jsx":"9","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\ConsumersDales.jsx":"10","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\ConsumerKhata.jsx":"11","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\RelativesKhata.jsx":"12","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\Expenditure.jsx":"13","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\Sales.jsx":"14","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\Employee.jsx":"15"},{"size":339,"mtime":1706554680056,"results":"16","hashOfConfig":"17"},{"size":250,"mtime":1706554680049,"results":"18","hashOfConfig":"17"},{"size":375,"mtime":1706554680057,"results":"19","hashOfConfig":"17"},{"size":2556,"mtime":1721004503359,"results":"20","hashOfConfig":"17"},{"size":1707,"mtime":1721004647195,"results":"21","hashOfConfig":"17"},{"size":1921,"mtime":1720900310125,"results":"22","hashOfConfig":"17"},{"size":3134,"mtime":1706559359436,"results":"23","hashOfConfig":"17"},{"size":416,"mtime":1720900242579,"results":"24","hashOfConfig":"17"},{"size":1916,"mtime":1708806747390,"results":"25","hashOfConfig":"17"},{"size":20140,"mtime":1720817805820,"results":"26","hashOfConfig":"17"},{"size":28219,"mtime":1720992827653,"results":"27","hashOfConfig":"17"},{"size":18093,"mtime":1720819666918,"results":"28","hashOfConfig":"17"},{"size":16214,"mtime":1720909517190,"results":"29","hashOfConfig":"17"},{"size":2221,"mtime":1720994045930,"results":"30","hashOfConfig":"17"},{"size":28554,"mtime":1720988983939,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o1bq91",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\index.js",[],[],"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\GlobalStyle.js",[],[],"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\App.js",[],[],"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\LoginForm.jsx",[],[],"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\Navbar.jsx",[],[],"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\NavbarStyle.js",[],[],"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\NavbarData.js",[],[],"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\Home.jsx",[],[],"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\ConsumersDales.jsx",["82","83","84"],[],"import React, { useState, useEffect } from 'react';\r\nimport './ConsumersDales.css';\r\n\r\nconst ConsumersDales = () => {\r\n\r\n  const [source, setSource] = useState('');\r\n  const [quantity, setQuantity] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [editIndex, setEditIndex] = useState(-1);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [deleteIndex, setDeleteIndex] = useState(null);\r\n  const [groupVisibility, setGroupVisibility] = useState({});\r\n  const [globalVisibility, setGlobalVisibility] = useState(false);\r\n  const [showMonthlySales, setShowMonthlySales] = useState(false);\r\n  const [language, setLanguage] = useState('English'); // Default to English\r\n  // Define fetchData outside of useEffect\r\n  const [showModal, setShowModal] = useState(false); // You already have this for controlling the visibility of the modal\r\n  const [modalMessage, setModalMessage] = useState(''); // Add this line to manage the modal message\r\n\r\n  const translations = {\r\n    English: {\r\n      title: \"Consumer Sales\",\r\n      date: \"Date\",\r\n      name: \"Name\",\r\n      quantity: \"Quantity\",\r\n      pricePerKilo: \"Price per kilo\",\r\n      save: \"Save\",\r\n      monthlyConsumerSale: \"Monthly Consumer Sale\",\r\n      overallConsumerSale: \"Overall Consumers Sale\",\r\n      showAll: \"Show\",\r\n      hideAll: \"Hide \",\r\n      show: \"Show \",\r\n      hide: \"Hide \",\r\n      show1: \"Show All\",\r\n      hide1: \"Hide All\",\r\n      delete: \"Delete\",\r\n      update: \"Update\",\r\n      deletePrompt: \"Are you sure you want to delete this?\",\r\n      yes: \"Yes\",\r\n      no: \"No\",\r\n      consumerName: \"Consumer Name\",\r\n      total: \"Total\",\r\n      ConsumerName: \"Enter Consumer name \",\r\n      Quantity: \"Enter Milk Quantity\",\r\n      price: \"Enter price per kilo \",\r\n      KiloMilk: \"Kilo Milk\",\r\n      kaa: \"of\",\r\n      added: \"has been added\",\r\n      In: \"In\",\r\n      record: \"Record has been updated\",\r\n    },\r\n    Urdu: {\r\n      title: \"صارفین کی فروخت\",\r\n      date: \"تاریخ\",\r\n      name: \"نام\",\r\n      quantity: \"مقدار\",\r\n      pricePerKilo: \"فی کلو قیمت\",\r\n      save: \"محفوظ کریں\",\r\n      monthlyConsumerSale: \"ماہانہ صارفین کی فروخت\",\r\n      overallConsumerSale: \"کل صارفین کی فروخت\",\r\n      showAll: \" دیکھیں\",\r\n      hideAll: \" چھپائیں\",\r\n      show: \" دیکھیں\",\r\n      hide: \" چھپائیں\",\r\n      show1: \"سب دیکھیں\",\r\n      hide1: \"سب چھپائیں\",\r\n      delete: \"حذف کریں\",\r\n      update: \"اپ ڈیٹ\",\r\n      deletePrompt: \"کیا آپ واقعی اس  کو حذف کرنا چاہتے ہیں؟\",\r\n      yes: \"ہاں\",\r\n      no: \"نہیں\",\r\n      consumerName: \"صارف کا نام\",\r\n      total: \"کل\",\r\n      ConsumerName: \"صارف کا نام درج کریں \",\r\n      Quantity: \"دودھ کی مقدار درج کریں \",\r\n      price: \"فی کلو قیمت درج کریں \",\r\n      KiloMilk: \"کلو دودھ\",\r\n      kaa: \"کا\",\r\n      added: \" شامل ہوگیا ہے\",\r\n      In: \"میں\",\r\n      record: \"ریکارڈ اپ ڈیٹ ہو گیا ہے\",\r\n    }\r\n  };\r\n\r\n  const monthTranslations = {\r\n    January: \"جنوری\",\r\n    February: \"فروری\",\r\n    March: \"مارچ\",\r\n    April: \"اپریل\",\r\n    May: \"مئی\",\r\n    June: \"جون\",\r\n    July: \"جولائی\",\r\n    August: \"اگست\",\r\n    September: \"ستمبر\",\r\n    October: \"اکتوبر\",\r\n    November: \"نومبر\",\r\n    December: \"دسمبر\",\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n        // Updated fetch request with explicit Accept header for JSON responses\r\n        const response = await fetch('http://localhost:3001/consumerssale', {\r\n            headers: {\r\n                'Accept': 'application/json', // Explicitly expect JSON responses\r\n            },\r\n        });\r\n\r\n        // Check if the response was successful\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        // Validate content type to be JSON\r\n        const contentType = response.headers.get('content-type');\r\n        if (!contentType || !contentType.includes('application/json')) {\r\n            throw new Error('Expected JSON response, but received unexpected content type');\r\n        }\r\n\r\n        // Parse the JSON response and process data\r\n        const data = await response.json();\r\n        const processedData = data.map(expense => ({\r\n            ...expense,\r\n            Quantity: parseFloat(expense.Quantity),\r\n            UnitPrice: parseFloat(expense.UnitPrice),\r\n            Total: expense.Total ? parseFloat(expense.Total).toFixed(2) : undefined,\r\n        }));\r\n\r\n        // Log processed data for debugging\r\n        console.log(\"Processed data:\", processedData);\r\n\r\n        // Assuming setExpenses is a state setter from useState hook\r\n        // Update your component's state with the processed data\r\n        setExpenses(processedData);\r\n    } catch (error) {\r\n        // Log the error and optionally handle it by setting some error state\r\n        console.error('There was an error fetching the sales data:', error);\r\n\r\n        // Assuming setError is a state setter for holding error information\r\n        // setError(error.message) or similar could be used here\r\n    }\r\n};\r\n\r\n\r\n  useEffect(() => {\r\n    // Now you can call fetchData inside useEffect\r\n    fetchData();\r\n  }, []); // The empty dependency array ensures this runs only on mount\r\n\r\n  // ... rest of your component\r\n\r\n\r\n  const [date, setDate] = useState(() => {\r\n    const today = new Date();\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    const year = today.getFullYear();\r\n\r\n    return `${year}-${month}-${day}`;\r\n  });\r\n  const toggleMonthlySalesVisibility = () => {\r\n    setShowMonthlySales(prevShow => !prevShow); // Toggle the visibility state\r\n  };\r\n\r\n  const toggleGroupVisibility = (monthYear) => {\r\n    setGlobalVisibility(prevGlobalState => {\r\n      if (!prevGlobalState) {\r\n        // If global visibility is off, ensure it stays off and don't toggle individual groups\r\n        console.warn(\"Global visibility is off. Can't toggle individual group visibility.\");\r\n        return prevGlobalState;\r\n      }\r\n\r\n      // If global visibility is on, toggle the specific month/year group\r\n      setGroupVisibility(prevGroupVisibility => ({\r\n        ...prevGroupVisibility,\r\n        [monthYear]: !prevGroupVisibility[monthYear]\r\n      }));\r\n\r\n      return prevGlobalState; // Return the unchanged global state\r\n    });\r\n  };\r\n  const CustomModal = ({ message, onClose }) => {\r\n    return (\r\n      <div className=\"custom-modal-overlay\">\r\n        <div className=\"custom-modal\">\r\n          <div className=\"custom-modal-content\">\r\n            <p>{message}</p>\r\n            <button onClick={onClose}>Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Group expenses by month and year\r\n  const groupedExpenses = expenses.reduce((acc, expense) => {\r\n    // Ensure the date string is in the correct format (YYYY-MM-DD)\r\n    const expenseDate = expense.Date; // Adjust if the API gives a different property name for the date\r\n    const date = new Date(expenseDate);\r\n\r\n    if (isNaN(date.getTime())) {\r\n      console.error('Invalid date for expense:', expense);\r\n      return acc; // Skip this expense if the date is invalid\r\n    }\r\n\r\n    const monthYear = `${date.toLocaleString('default', { month: 'long', year: 'numeric' })}`;\r\n    if (!acc[monthYear]) {\r\n      acc[monthYear] = [];\r\n    }\r\n    acc[monthYear].push(expense);\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const expensePayload = {\r\n      Date: date,\r\n      Name: source,\r\n      Quantity: parseFloat(quantity),\r\n      UnitPrice: parseFloat(amount),\r\n    };\r\n\r\n    try {\r\n      let response;\r\n      if (editIndex >= 0) {\r\n        // Assuming your expense objects use 'idConsumersSale' as the key for ID\r\n        const expenseId = expenses[editIndex].idConsumersSale; // Adjust this line accordingly\r\n        response = await fetch(`http://localhost:3001/consumerssale/${expenseId}`, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n        });\r\n\r\n        const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n        const alertMessage = `${translations[language].record} `;\r\n\r\n        // Replace alert(alertMessage); with:\r\n        setModalMessage(alertMessage);\r\n        setShowModal(true);\r\n\r\n      } else {\r\n        // Adding a new expense\r\n        response = await fetch('http://localhost:3001/consumerssale', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n        });\r\n\r\n        const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n        const alertMessage = `${quantity} ${translations[language].KiloMilk} ${translations[language].added}`;\r\n        // Replace alert(alertMessage); with:\r\n        setModalMessage(alertMessage);\r\n        setShowModal(true);\r\n      }\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      await fetchData(); // Refresh data\r\n\r\n      // Reset form fields and editIndex\r\n      //setDate('');\r\n      setSource('');\r\n      setQuantity('');\r\n      setAmount('');\r\n      setEditIndex(-1);\r\n\r\n\r\n    } catch (error) {\r\n      console.error('There was an error saving the sale:', error);\r\n    }\r\n  };\r\n\r\n  // This function is called when the delete button is clicked.\r\n  // It sets up the alert and marks which item should be deleted if confirmed.\r\n  const handleDelete = (index) => {\r\n    setShowAlert(true);\r\n    setDeleteIndex(index);\r\n  };\r\n\r\n  // This function is called when the user confirms the deletion.\r\n  const handleAlertConfirm = async (isConfirmed) => {\r\n    if (isConfirmed && deleteIndex != null) {\r\n      const expense = expenses[deleteIndex];\r\n      if (expense && expense.idConsumersSale) { // Make sure the ID field matches your data structure\r\n        try {\r\n          const response = await fetch(`http://localhost:3001/consumerssale/${expense.idConsumersSale}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n\r\n          const result = await response.json();\r\n          console.log(result.message); // Log the message from the backend\r\n\r\n          // Refresh the expenses list after deleting an expense\r\n          await fetchData();\r\n\r\n        } catch (error) {\r\n          console.error('There was an error deleting the sale:', error);\r\n        }\r\n      } else {\r\n        console.error('Attempted to delete an expense without a valid ID');\r\n      }\r\n    }\r\n\r\n    // Reset the state regardless of whether the delete was successful or not\r\n    setDeleteIndex(null);\r\n    setShowAlert(false);\r\n  };\r\n\r\n\r\n  const getMonthlyExpenses = () => {\r\n    const monthlyExpenses = expenses.reduce((acc, expense) => {\r\n      // Check if the date is valid\r\n      const date = new Date(expense.Date);\r\n      if (isNaN(date.getTime())) {\r\n        console.error('Invalid date for expense:', expense);\r\n        return acc; // Skip this expense if the date is invalid\r\n      }\r\n\r\n      const monthYear = `${date.toLocaleString('default', { month: 'long' })} ${date.getFullYear()}`;\r\n      const expenseQuantity = parseFloat(expense.Quantity);\r\n      const expenseUnitPrice = parseFloat(expense.UnitPrice);\r\n      const monthlyTotal = !isNaN(expenseQuantity) && !isNaN(expenseUnitPrice) ? expenseQuantity * expenseUnitPrice : 0;\r\n\r\n      if (!acc[monthYear]) {\r\n        acc[monthYear] = 0;\r\n      }\r\n\r\n      acc[monthYear] += monthlyTotal;\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return monthlyExpenses;\r\n  };\r\n\r\n\r\n  const getOverallExpenses = () => {\r\n    return expenses.reduce((acc, expense) => {\r\n      const expenseQuantity = parseFloat(expense.Quantity);\r\n      const expenseUnitPrice = parseFloat(expense.UnitPrice);\r\n      const total = expenseQuantity && expenseUnitPrice ? expenseQuantity * expenseUnitPrice : 0;\r\n      return acc + total;\r\n    }, 0);\r\n  };\r\n\r\n  const handleUpdate = (index) => {\r\n    const expense = expenses[index];\r\n    // Adjust these property names to match your actual expense object structure\r\n    setDate(expense.Date); // Assuming the date property is named \"Date\"\r\n    setSource(expense.Name); // Assuming the consumer name property is named \"Name\"\r\n    setQuantity(expense.Quantity.toString()); // Assuming the quantity property is named \"Quantity\"\r\n    setAmount(expense.UnitPrice.toString()); // Assuming the unit price property is named \"UnitPrice\"\r\n    setEditIndex(index);\r\n  };\r\n  const toggleGlobalVisibility = () => {\r\n    setGlobalVisibility(prevState => {\r\n      const newState = !prevState;\r\n      // Update all group visibilities based on the new global state\r\n      const newGroupVisibility = Object.keys(groupVisibility).reduce((acc, key) => {\r\n        acc[key] = newState; // Show or hide all based on the new global state\r\n        return acc;\r\n      }, {});\r\n\r\n      setGroupVisibility(newGroupVisibility);\r\n      return newState;\r\n    });\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"expenditure-container\">\r\n      <h1 className=\"expenditure-title\">{translations[language].title}</h1>\r\n      <button onClick={() => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English')} className=\"language-toggle\">\r\n        {language === 'English' ? 'اردو' : 'English'}\r\n      </button>\r\n      <form className=\"expenditure-form\" onSubmit={handleSave}>\r\n        <label htmlFor=\"date\" className=\"expenditure-label\">{translations[language].date}:</label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          className=\"expenditure-input date-input\"\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"source\" className=\"expenditure-label\">{translations[language].name}:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"source\"\r\n          value={source}\r\n          onChange={(e) => setSource(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].ConsumerName}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"quantity\" className=\"expenditure-label\">{translations[language].quantity}:</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"quantity\"\r\n          value={quantity}\r\n          onChange={(e) => setQuantity(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].Quantity}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"amount\" className=\"expenditure-label\">{translations[language].pricePerKilo}:</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"amount\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].price}\r\n          required\r\n        />\r\n\r\n        <button type=\"submit\" className=\"save-button\">{translations[language].save}</button>\r\n      </form>\r\n      {showModal && (\r\n        <CustomModal\r\n          message={modalMessage}\r\n          onClose={() => setShowModal(false)}\r\n        />\r\n      )}\r\n      <div className=\"expenses-report\">\r\n        <h4>{translations[language].monthlyConsumerSale}:</h4>\r\n\r\n        <button onClick={toggleMonthlySalesVisibility} className=\"toggle-all-button\">\r\n          {showMonthlySales ? translations[language].hideAll : translations[language].showAll}\r\n        </button>\r\n\r\n        {showMonthlySales && Object.entries(getMonthlyExpenses()).map(([monthYear, total]) => {\r\n          // Split month and year\r\n          const [month, year] = monthYear.split(' ');\r\n\r\n          // Translate the month name if available, otherwise, use the original name\r\n          const translatedMonth = language === 'Urdu' ? monthTranslations[month] || month : month;\r\n\r\n          // Combine translated month and year\r\n          const translatedMonthYear = `${translatedMonth} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear} style={{ color: 'green' }}>\r\n              {translations[language].monthlySales} {translatedMonthYear} : {total}\r\n            </div>\r\n          );\r\n        })}\r\n\r\n\r\n        <h4>{translations[language].overallConsumerSale}:<br /><span style={{ color: 'green' }}>{getOverallExpenses()}</span></h4>\r\n      </div>\r\n      <button onClick={toggleGlobalVisibility} className=\"global-toggle-button\">\r\n        {globalVisibility ? translations[language].hide1 : translations[language].show1}\r\n      </button>\r\n\r\n      {globalVisibility && Object.entries(groupedExpenses).map(([monthYear, expensesList]) => (\r\n        // Your existing map function\r\n        (() => {\r\n          // Move the statements outside of JSX\r\n          const monthYearArray = monthYear.split(' ');\r\n          const month = monthYearArray[0];\r\n          const year = monthYearArray[1];\r\n\r\n          // Translate the month name if the current language is Urdu\r\n          const translatedMonthName = language === 'Urdu' ? (monthTranslations[month] || month) : month;\r\n\r\n          // Reconstruct the monthYear string with the possibly translated month name\r\n          const displayMonthYear = `${translatedMonthName} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear}>\r\n              <h3 style={{ marginTop: 15 }}>\r\n                {displayMonthYear}\r\n                <button\r\n                  onClick={() => toggleGroupVisibility(monthYear)}\r\n                  className=\"toggle-button\"\r\n                >\r\n                  {groupVisibility[monthYear] ? translations[language].hide : translations[language].show}\r\n                </button>\r\n              </h3>\r\n              {groupVisibility[monthYear] && (\r\n                <div className=\"expenses-display\">\r\n                  {expensesList.map((expense, index) => {\r\n                    const actualIndex = expenses.findIndex(e => e === expense);\r\n                    const total = (!isNaN(expense.Quantity) && !isNaN(expense.UnitPrice))\r\n                      ? (expense.Quantity * expense.UnitPrice).toFixed(2)\r\n                      : 'N/A';\r\n                    return (\r\n                      <div key={index} className=\"expense-card\">\r\n                        <div>{translations[language].date}: {expense.Date}</div>\r\n                        <div>{translations[language].consumerName}: {expense.Name}</div>\r\n                        <div>{translations[language].quantity}: {Number.isFinite(expense.Quantity) ? expense.Quantity : 'N/A'}</div>\r\n                        <div>{translations[language].pricePerKilo}: {Number.isFinite(expense.UnitPrice) ? expense.UnitPrice : 'N/A'}</div>\r\n                        <div>{translations[language].total}: {expense.Total}</div>\r\n\r\n                        <button onClick={() => handleDelete(actualIndex)} className=\"delete-button1\">{translations[language].delete}</button>\r\n                        <button onClick={() => handleUpdate(actualIndex)} className=\"update-button\">{translations[language].update}</button>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })()\r\n      ))}\r\n\r\n      {showAlert && (\r\n        <div className=\"alert-dialog\">\r\n          <p>{translations[language].deletePrompt}</p>\r\n          <button onClick={() => handleAlertConfirm(true)} className=\"confirm-yes\">{translations[language].yes}</button>\r\n          <button onClick={() => handleAlertConfirm(false)} className=\"confirm-no\" >{translations[language].no}</button>\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default ConsumersDales;\r\n","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\ConsumerKhata.jsx",["85","86","87","88","89","90","91","92"],[],"import React, { useState, useEffect } from 'react';\r\nimport './ConsumerKhata.css';\r\n\r\nconst ConsumerKhata = () => {\r\n\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Pad single digit months with a leading 0\r\n    const day = String(today.getDate()).padStart(2, '0'); // Pad single digit days with a leading 0\r\n    return `${year}-${month}-${day}`; // Format must be YYYY-MM-DD\r\n  };\r\n\r\n  const [isFormVisible, setIsFormVisible] = useState(false);\r\n  const [consumerData, setConsumerData] = useState({\r\n    date: getTodayDate(),\r\n    consumerName: '',\r\n    baqaya: '', // Initialize as a number\r\n  });\r\n  const [wasooliData, setWasooliData] = useState({\r\n    date: getTodayDate(),\r\n    wasooli: '',\r\n  });\r\n\r\n  const [errorMessages, setErrorMessages] = useState({\r\n    date: '',\r\n    consumerName: '',\r\n    baqaya: '',\r\n  });\r\n  const [isDataSaved, setIsDataSaved] = useState(false);\r\n  const [isUpdateMode, setIsUpdateMode] = useState(false);\r\n  const [isAddBaqayaVisible, setIsAddBaqayaVisible] = useState(false);\r\n  const [baqayaToAdd, setBaqayaToAdd] = useState('');\r\n  const [baqayaError, setBaqayaError] = useState('');\r\n  const [consumers, setConsumers] = useState([]);\r\n  const [selectedConsumerId, setSelectedConsumerId] = useState(null);\r\n  const [isConfirmModalVisible, setIsConfirmModalVisible] = useState(false);\r\n  const [isAlertVisible, setIsAlertVisible] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n  const [isAddConsumerConfirmVisible, setIsAddConsumerConfirmVisible] = useState(false);\r\n  const [monthVisibility, setMonthVisibility] = useState({})\r\n  const [isWasooliVisible, setIsWasooliVisible] = useState(false);\r\n  const [currentManaging, setCurrentManaging] = useState(null);\r\n  // Update this state to also include the wasooliId\r\n  const [monthYearButtonsVisibility, setMonthYearButtonsVisibility] = useState({});\r\n  const [language, setLanguage] = useState('English');\r\n  const [deleteConfirmationData, setDeleteConfirmationData] = useState({\r\n    consumerId: null,\r\n    wasooliId: null, // Add this line\r\n    index: null,\r\n  });\r\n  const [editingTransaction, setEditingTransaction] = useState(null);\r\n\r\n  const [wasooliErrorMessages, setWasooliErrorMessages] = useState({\r\n    date: '',\r\n    wasooli: '',\r\n  });\r\n\r\n  const translations = {\r\n    English: {\r\n      consumerKhata: \"Consumer Khata\",\r\n      addConsumer: \"Add Consumer\",\r\n      date: \"Date\",\r\n      consumerName: \"Consumer Name\",\r\n      baqaya: \"Baqaya\",\r\n      save: \"Save\",\r\n      update: \"Update\",\r\n      manage: \"Manage\",\r\n      addBaqaya: \"Add Baqaya\",\r\n      showAll: \"Show All\",\r\n      hideAll: \"Hide All\",\r\n      wasooli: \"Wasooli\",\r\n      saveWasooli: \"Save Wasooli\",\r\n      delete: \"Delete\",\r\n      Khata: \"Khata\",\r\n      confirmAddConsumer: \"Are you sure you want to add a new consumer?\",\r\n      yes: \"Yes\",\r\n      no: \"No\",\r\n      deleteWasooliConfirm: \"Are you sure you want to delete this Wasooli?\",\r\n      close: \"Close\",\r\n      Show: \"Show\",\r\n      Hide: \"Hide\",\r\n      datee: \"Please enter a date\",\r\n      consumerNamee: \"Please enter consumer name\",\r\n      baqayaa: \"Please enter baqaya amount\",\r\n      baqayaNumberr: \"Baqaya must be a number\",\r\n      wasooliAmountt: \"Please fill up the Wasooli amount\",\r\n      baqayaerror: \"Please fill up the baqaya amount\",\r\n      wasooliDatee: \"Date is required\"\r\n    },\r\n    Urdu: {\r\n      consumerKhata: \"صارف خاتہ \",\r\n      addConsumer: \"صارف شامل کریں\",\r\n      date: \"تاریخ\",\r\n      consumerName: \"صارف کا نام\",\r\n      baqaya: \"باقیہ\",\r\n      save: \"محفوظ کریں\",\r\n      update: \"اپ ڈیٹ\",\r\n      manage: \"انتظام کریں\",\r\n      addBaqaya: \"باقیہ شامل کریں\",\r\n      showAll: \"سب دکھائیں\",\r\n      hideAll: \"پوشیدہ کریں\",\r\n      wasooli: \"وصولی\",\r\n      saveWasooli: \"وصولی محفوظ کریں\",\r\n      delete: \"حذف کریں\",\r\n      confirmAddConsumer: \"کیا آپ واقعی نیا صارف شامل کرنا چاہتے ہیں؟\",\r\n      yes: \"جی ہاں\",\r\n      no: \"نہیں\",\r\n      Khata: \"خاتہ\",\r\n      Show: \"دکھائیں\",\r\n      Hide: \"چھپائیں\",\r\n      deleteWasooliConfirm: \"کیا آپ واقعی اس وصولی کو حذف کرنا چاہتے ہیں؟\",\r\n      close: \"بند کریں\",\r\n      datee: \"براہ کرم تاریخ درج کریں\",\r\n      consumerNamee: \"براہ کرم صارف کا نام درج کریں\",\r\n      baqayaa: \"براہ کرم باقیہ مقدار درج کریں\",\r\n      baqayaNumberr: \"باقیہ کو نمبر ہونا چاہئے\",\r\n      wasooliAmountt: \"براہ کرم وصولی کی رقم بھریں\",\r\n      wasooliDatee: \"تاریخ ضروری ہے\",\r\n      baqayaerror: \"برائے مہربانی باقیہ رقم بھریں\",\r\n    }\r\n\r\n  };\r\n  const monthTranslations = {\r\n    January: \"جنوری\",\r\n    February: \"فروری\",\r\n    March: \"مارچ\",\r\n    April: \"اپریل\",\r\n    May: \"مئی\",\r\n    June: \"جون\",\r\n    July: \"جولائی\",\r\n    August: \"اگست\",\r\n    September: \"ستمبر\",\r\n    October: \"اکتوبر\",\r\n    November: \"نومبر\",\r\n    December: \"دسمبر\",\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/consumerkhata');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const consumersData = await response.json();\r\n\r\n      // Process the data if necessary and update the state\r\n      // For each consumer, fetch their Wasooli transactions and update the state accordingly\r\n      const updatedConsumersData = await Promise.all(consumersData.map(async (consumer) => {\r\n        const wasooliResponse = await fetch(`http://localhost:3001/wasooli/${consumer.idconsumerkhata}`);\r\n        if (!wasooliResponse.ok) {\r\n          console.log(`Failed to fetch wasooli data for consumer ID: ${consumer.idconsumerkhata}`);\r\n          return consumer; // Return the consumer without wasooli data if fetch fails\r\n        }\r\n        const wasooliData = await wasooliResponse.json();\r\n        return { ...consumer, wasooliTransactions: wasooliData };\r\n      }));\r\n\r\n      // Update state with the processed and fetched data\r\n      setConsumers(updatedConsumersData);\r\n    } catch (error) {\r\n      console.error('Fetch error:', error);\r\n    }\r\n  };\r\n\r\n \r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n  const CustomModal = ({ message, onClose }) => {\r\n    return (\r\n      <div className=\"custom-modal-overlay\">\r\n        <div className=\"custom-modal\">\r\n          <div className=\"custom-modal-content\">\r\n            <p>{message}</p>\r\n            <button onClick={onClose}>Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const toggleMonthYearButtonsVisibility = (consumerId) => {\r\n\r\n    setMonthYearButtonsVisibility(prevState => {\r\n      const newState = {\r\n        ...prevState,\r\n        [consumerId]: !prevState[consumerId],\r\n      };\r\n\r\n      return newState;\r\n    });\r\n  };\r\n\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    let newValue = value;\r\n\r\n    // If the input is for baqaya, ensure it's handled as a number\r\n    if (name === 'baqaya') {\r\n      newValue = value !== '' ? parseInt(value, 10) : 0;\r\n      if (isNaN(newValue)) {\r\n        setErrorMessages((prevErrors) => ({\r\n          ...prevErrors,\r\n          baqaya: 'Baqaya must be a number',\r\n        }));\r\n        return; // Don't set the consumer data if the input is not a number\r\n      }\r\n    }\r\n\r\n    setConsumerData((prevData) => ({\r\n      ...prevData,\r\n      [name]: newValue,\r\n    }));\r\n\r\n    // Clear any error messages for this input\r\n    setErrorMessages((prevErrors) => ({\r\n      ...prevErrors,\r\n      [name]: '',\r\n    }));\r\n  };\r\n\r\n  const handleSaveClick = async () => {\r\n    const { date, consumerName, baqaya, idconsumerkhata } = consumerData;\r\n    let errors = {};\r\n\r\n    if (!date || !consumerName || !baqaya) {\r\n      errors = {\r\n        ...!date && { date: \"Please enter a date\" },\r\n        ...!consumerName && { consumerName: \"Please enter consumer name\" },\r\n        ...!baqaya && { baqaya: \"Please enter baqaya amount\" },\r\n      };\r\n      setErrorMessages(errors);\r\n      return;\r\n    }\r\n\r\n    const endpoint = idconsumerkhata ? `http://localhost:3001/consumerkhata/${idconsumerkhata}` : 'http://localhost:3001/consumerkhata';\r\n    const method = idconsumerkhata ? 'PUT' : 'POST';\r\n\r\n    try {\r\n      const response = await fetch(endpoint, {\r\n        method,\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          Date: date,\r\n          name: consumerName,\r\n          baqaya: parseInt(baqaya),\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n\r\n      await fetchData();\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setConsumerData({\r\n      date: '',\r\n      consumerName: '',\r\n      baqaya: '',\r\n    });\r\n    setIsFormVisible(false);\r\n    setErrorMessages({});\r\n  };\r\n\r\n\r\n  const handleCancelClick = () => {\r\n    setIsFormVisible(false);\r\n    setIsUpdateMode(false);\r\n  };\r\n\r\n  const handleUpdateClick = (id) => {\r\n    const consumerToUpdate = consumers.find(consumer => consumer.idconsumerkhata === id);\r\n    if (consumerToUpdate) {\r\n      setConsumerData({\r\n        date: consumerToUpdate.Date || '',\r\n        consumerName: consumerToUpdate.name || '',\r\n        baqaya: consumerToUpdate.baqaya || '',\r\n        idconsumerkhata: consumerToUpdate.idconsumerkhata, // Store the id in the state\r\n      });\r\n      setIsUpdateMode(true);\r\n      setIsFormVisible(true);\r\n    } else {\r\n      console.error(\"No consumer found with ID:\", id);\r\n    }\r\n  };\r\n\r\n\r\n  const handleAddBaqayaClick = () => {\r\n    setIsAddBaqayaVisible(true);\r\n  };\r\n\r\n  const handleBaqayaInputChange = (e) => {\r\n    const { value } = e.target;\r\n    setBaqayaToAdd(value);\r\n    setBaqayaError('');\r\n  };\r\n\r\n  const handleSaveBaqayaClick = async () => {\r\n    if (!baqayaToAdd) {\r\n      setBaqayaError('Please fill the Baqaya field');\r\n      return;\r\n    }\r\n    const newBaqayaAmount = parseInt(baqayaToAdd);\r\n    if (isNaN(newBaqayaAmount)) {\r\n      setBaqayaError('Invalid Baqaya amount');\r\n      return;\r\n    }\r\n\r\n    // Find the consumer to update\r\n    const consumerToUpdate = consumers.find(consumer => consumer.idconsumerkhata === selectedConsumerId);\r\n    if (!consumerToUpdate) {\r\n      console.error(\"Consumer not found\");\r\n      return;\r\n    }\r\n\r\n    // Ensure consumerToUpdate.baqaya is a number\r\n    const currentBaqaya = parseInt(consumerToUpdate.baqaya) || 0;\r\n\r\n    // Calculate updated baqaya\r\n    const updatedBaqaya = currentBaqaya + newBaqayaAmount;\r\n\r\n    // Send the update request to the server\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/consumerkhata/${selectedConsumerId}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          ...consumerToUpdate,\r\n          baqaya: updatedBaqaya, // Update with the calculated baqaya\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Update the local state to reflect the change\r\n      const updatedConsumers = consumers.map(consumer =>\r\n        consumer.idconsumerkhata === selectedConsumerId ? {\r\n          ...consumer,\r\n          baqaya: updatedBaqaya.toString(),\r\n        } : consumer\r\n      );\r\n\r\n      setConsumers(updatedConsumers);\r\n\r\n      setIsDataSaved(true);\r\n      setBaqayaToAdd('');\r\n      setIsAddBaqayaVisible(false);\r\n      setBaqayaError('');\r\n\r\n      // Optionally, refresh the data from the server to ensure UI consistency\r\n      fetchData();\r\n    } catch (error) {\r\n      console.error('Error updating baqaya:', error);\r\n      setBaqayaError('Failed to update baqaya');\r\n    }\r\n  };\r\n\r\n  const toggleMonthVisibility = (consumerId, monthYear) => {\r\n    setMonthVisibility(prevVisibility => ({\r\n      ...prevVisibility,\r\n      [consumerId]: {\r\n        ...prevVisibility[consumerId],\r\n        [monthYear]: !(prevVisibility[consumerId]?.[monthYear] ?? false),\r\n      },\r\n    }));\r\n  };\r\n  // Adjust handleSaveClick or create a new function to send the updated consumer data to the server\r\n  // This involves crafting a PUT request with the consumer's updated data\r\n\r\n\r\n  const ConfirmAddModal = ({ isOpen, onConfirm, onCancel }) => {\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n      <div className=\"confirm-modal-overlay\">\r\n        <div className=\"confirm-modal\">\r\n          <p> {translations[language].confirmAddConsumer}</p>\r\n          {/* Check these class names match your CSS */}\r\n          <button className=\"confirm-modal-button confirm-modal-button-yes\" onClick={onConfirm}> {translations[language].yes}</button>\r\n          <button className=\"confirm-modal-button confirm-modal-button-no\" onClick={onCancel}> {translations[language].no}</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  const handleAddConsumerClick = () => {\r\n    setIsAddConsumerConfirmVisible(true);\r\n  };\r\n\r\n  const handleUpdateWasooliClick = (consumerId, transactionId) => {\r\n    if (!consumerId || !transactionId) {\r\n      console.error('Missing consumer ID or transaction ID');\r\n      return;\r\n    }\r\n\r\n    const consumer = consumers.find(consumer => consumer.idconsumerkhata === consumerId);\r\n    if (!consumer) {\r\n      console.error('Consumer not found for ID:', consumerId);\r\n      setIsAlertVisible(true);\r\n      setAlertMessage(\"Error: Consumer not found\");\r\n      return;\r\n    }\r\n    console.log(\"Consumer found:\", consumer.name);\r\n\r\n    if (!consumer.wasooliTransactions || consumer.wasooliTransactions.length === 0) {\r\n      console.error('No transactions found for consumer:', consumer.name);\r\n      return;\r\n    }\r\n\r\n    console.log(\"Consumer's Wasooli Transactions:\", consumer.wasooliTransactions);\r\n\r\n    const selectedWasooliCard = consumer.wasooliTransactions.find(txn => txn.idwasooli.toString() === transactionId.toString());\r\n    if (!selectedWasooliCard) {\r\n      console.error('Wasooli transaction not found for ID:', transactionId, \"in consumer:\", consumer.name);\r\n      return;\r\n    }\r\n    console.log(\"Selected Wasooli Card:\", selectedWasooliCard);\r\n\r\n    // Update the form data and editing transaction state asynchronously\r\n    setWasooliData({\r\n      date: selectedWasooliCard.date,\r\n      wasooli: selectedWasooliCard.Wasooli.toString(),\r\n    });\r\n\r\n    setEditingTransaction({\r\n      consumerId: consumerId,\r\n      transactionId: transactionId,\r\n    });\r\n\r\n    setIsWasooliVisible(true);\r\n  };\r\n\r\n\r\n  const handleManageClick = (consumerId) => {\r\n    setSelectedConsumerId(consumerId);\r\n    setIsWasooliVisible(true);\r\n    setCurrentManaging(consumerId); // Reset Wasooli form data\r\n    setWasooliData({ date: '', Wasooli: '' });\r\n  };\r\n\r\n  const handleWasooliInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setWasooliData(prevState => ({\r\n      ...prevState,\r\n      [name]: value // Ensure this never sets `date` or `wasooli` to undefined\r\n    }));\r\n  };\r\n\r\n  const handleConfirmDeletion = async () => {\r\n    const { consumerId, wasooliId, index } = deleteConfirmationData;\r\n\r\n    if (!wasooliId) {\r\n      console.error(\"Wasooli ID is missing.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Delete the Wasooli transaction\r\n      const deleteResponse = await fetch(`http://localhost:3001/wasooli/${wasooliId}`, { method: 'DELETE' });\r\n\r\n      if (!deleteResponse.ok) {\r\n        const errorData = await deleteResponse.json();\r\n        throw new Error(errorData.message || 'Failed to delete Wasooli transaction.');\r\n      }\r\n\r\n      console.log(\"Wasooli transaction deleted successfully.\");\r\n\r\n      // Re-fetch updated consumer data to refresh local state\r\n      await fetchData();\r\n\r\n      console.log(\"Consumer data refreshed after Wasooli deletion.\");\r\n\r\n      // Reset the delete confirmation data and close the modal\r\n      setDeleteConfirmationData({ consumerId: null, wasooliId: null, index: null });\r\n      setIsConfirmModalVisible(false);\r\n    } catch (error) {\r\n      console.error('Error during Wasooli deletion:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleCancelDeletion = () => {\r\n    setIsConfirmModalVisible(false); // Hide the modal\r\n  };\r\n\r\n  const handleDeleteWasooliClick = (consumerId, wasooliId, index) => {\r\n    // Log the parameters to ensure they are being passed correctly\r\n    console.log(`Preparing to delete Wasooli with ID: ${wasooliId}, for Consumer ID: ${consumerId}, at Index: ${index}`);\r\n\r\n\r\n    // Set the deleteConfirmationData with the correct values\r\n    setDeleteConfirmationData({ consumerId, wasooliId, index });\r\n    setIsConfirmModalVisible(true);\r\n  };\r\n\r\n\r\n\r\n  const AlertModal = ({ isOpen, message, onClose }) => {\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n      <div className=\"alert-modal-overlay\">\r\n        <div className=\"alert-modal\">\r\n          <p>{message}</p>\r\n          <button onClick={onClose}>OK</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const ConfirmationModal = ({ onConfirm, onCancel }) => {\r\n    return (\r\n      <div className=\"confirmation-modal-overlay\">\r\n        <div className=\"confirmation-modal\">\r\n          <p> {translations[language].deleteWasooliConfirm}</p>\r\n          <button className=\"yes-button\" onClick={onConfirm}> {translations[language].yes}</button>\r\n          <button className=\"no-button\" onClick={onCancel}> {translations[language].no}</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleSaveWasooliClick = async () => {\r\n    try {\r\n      const wasooliAmount = parseInt(wasooliData.wasooli);\r\n\r\n      if (wasooliAmount <= 0) {\r\n        throw new Error(\"invalid Wasooli amount\");\r\n      }\r\n\r\n      if (isNaN(wasooliAmount) ) {\r\n        throw new Error(\"Please fill up the Wasooli amount\");\r\n      }\r\n\r\n      if (!wasooliData.date) {\r\n        throw new Error(\"Date is required\");\r\n      }\r\n\r\n      let payload = {\r\n        date: wasooliData.date,\r\n        Wasooli: wasooliAmount,\r\n      };\r\n\r\n      let endpoint = 'http://localhost:3001/wasooli';\r\n      let method = 'POST';\r\n\r\n      // If we're editing an existing transaction, adjust the endpoint and method.\r\n      // Otherwise, ensure the consumer ID is included in the payload for new transactions.\r\n      if (editingTransaction && editingTransaction.transactionId) {\r\n        endpoint += `/${editingTransaction.transactionId}`;\r\n        method = 'PUT';\r\n      } else {\r\n        // For new transactions, include the consumerId in the payload\r\n        if (!selectedConsumerId) {\r\n          throw new Error(\"Consumer ID is missing for new Wasooli transaction\");\r\n        }\r\n        payload = { ...payload, consumerId: selectedConsumerId };\r\n      }\r\n\r\n      const response = await fetch(endpoint, {\r\n        method: method,\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Failed to save Wasooli transaction\");\r\n      }\r\n\r\n      console.log(\"Wasooli transaction saved:\", await response.json());\r\n\r\n      setIsWasooliVisible(false);\r\n      setWasooliData({ date: '', wasooli: '' });\r\n      setEditingTransaction(null);\r\n      await fetchData();\r\n\r\n    } catch (error) {\r\n      console.error(\"Error saving Wasooli transaction:\", error);\r\n      setIsAlertVisible(true);\r\n      setAlertMessage(error.toString());\r\n    }\r\n  };\r\n\r\n  // Toggle visibility for an individual month (optional, if you need finer control)\r\n\r\n  const renderWasooliTransactions = (consumer) => {\r\n    // Ensure consumer.wasooliTransactions is an array.\r\n    const transactions = consumer.wasooliTransactions || [];\r\n    const transactionsByMonth = transactions.reduce((acc, transaction) => {\r\n      const monthYear = new Date(transaction.date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n      if (!acc[monthYear]) acc[monthYear] = [];\r\n      acc[monthYear].push(transaction);\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.entries(transactionsByMonth).map(([monthYear, transactions]) => {\r\n      // Check if the monthYear is visible based on the state.\r\n      const isButtonVisible = monthYearButtonsVisibility[consumer.idconsumerkhata];\r\n      const isDataVisible = monthVisibility[consumer.idconsumerkhata]?.[monthYear] ?? false;\r\n      return (\r\n\r\n        <div key={monthYear}>\r\n         {isButtonVisible && (\r\n            <button className=\"toggle-visibility-button\" onClick={() => toggleMonthVisibility(consumer.idconsumerkhata, monthYear)}>\r\n              {isDataVisible ? translations[language].Hide : translations[language].Show} {monthYear}\r\n            </button>\r\n          )} \r\n          {isDataVisible && transactions.map((transaction, index) => (\r\n            <div className=\"wasooli-card-horizontal\" key={index}>\r\n              {/* Ensure the property names match what's returned from the database. */}\r\n              <span>{translations[language].date} : {transaction.date}</span> {/* If your database returns 'date' in lowercase */}\r\n              <span>{translations[language].wasooli} : {transaction.Wasooli}</span> {/* If your database returns 'wasooli' in lowercase */}\r\n              <button className=\"updatee-button\" onClick={() => handleUpdateWasooliClick(consumer.idconsumerkhata, transaction.idwasooli)}>\r\n                {translations[language].update}\r\n              </button>\r\n              <button className=\"deletee-button\" onClick={() => handleDeleteWasooliClick(consumer.idconsumerkhata, transaction.idwasooli, index)}>\r\n                {translations[language].delete}\r\n              </button>\r\n\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"consumer-khata-container\">\r\n      <h1 className=\"header\">{translations[language].consumerKhata}</h1>\r\n      <button onClick={() => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English')} className=\"language-toggle\">\r\n        {language === 'English' ? 'اردو' : 'English'}\r\n      </button>\r\n      {isConfirmModalVisible && (\r\n        <ConfirmationModal onConfirm={handleConfirmDeletion} onCancel={handleCancelDeletion} />\r\n\r\n      )}\r\n      <AlertModal\r\n        isOpen={isAlertVisible}\r\n        message={alertMessage}\r\n        onClose={() => setIsAlertVisible(false)}\r\n      />\r\n      {\r\n        consumers.map((consumer) => (\r\n          <div className=\"consumer-card\" key={consumer.idconsumerkhata}>\r\n            <h2 className=\"consumer-name\">{consumer.name} {translations[language].Khata}</h2>\r\n            <p>{translations[language].date} : {consumer.Date}</p>\r\n            <p>{translations[language].consumerName} : {consumer.name}</p>\r\n            <p>{translations[language].baqaya} : {consumer.baqaya}</p>\r\n            <div className=\"action-buttons\">\r\n              <button className=\"manage-buttonn\" onClick={() => handleManageClick(consumer.idconsumerkhata)}>\r\n                {translations[language].manage}\r\n              </button>\r\n              <button className=\"add-baqaya-buttonn\" onClick={() => {\r\n                setIsAddBaqayaVisible(true);\r\n                setSelectedConsumerId(consumer.idconsumerkhata); // Ensure this is set when opening the Baqaya add form\r\n              }}>\r\n                {translations[language].addBaqaya}\r\n              </button>\r\n              <button className=\"update-buttonn\" onClick={() => handleUpdateClick(consumer.idconsumerkhata)}>\r\n                {translations[language].update}\r\n              </button>\r\n\r\n            </div>\r\n            <button className=\"global-toggle-buttonn\" onClick={() => toggleMonthYearButtonsVisibility(consumer.idconsumerkhata)}>\r\n              {monthYearButtonsVisibility[consumer.idconsumerkhata] ? translations[language].hideAll : translations[language].showAll}\r\n            </button>\r\n\r\n            {renderWasooliTransactions(consumer)}\r\n\r\n            {currentManaging === consumer.idconsumerkhata && isWasooliVisible && (\r\n              <div className=\"form-container wasooli-card\">\r\n                <h2>{translations[language].wasooli}</h2>\r\n                <button className=\"close-button\" onClick={() => setIsWasooliVisible(false)}>\r\n                  &#10005;\r\n                </button>\r\n                <span className=\"error-message\">{wasooliErrorMessages.date}</span>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date\"\r\n                  placeholder={translations[language].datee}\r\n                  value={wasooliData.date || ''}\r\n                  onChange={handleWasooliInputChange}\r\n                />\r\n\r\n                <span className=\"error-message\">{wasooliErrorMessages.wasooli}</span>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"wasooli\"\r\n                  placeholder={translations[language].wasooliAmountt}\r\n                  value={wasooliData.wasooli || ''} // Fallback to empty string if undefined\r\n                  onChange={handleWasooliInputChange}\r\n                />\r\n\r\n                <button className=\"save-button\" onClick={(e) => {\r\n                  e.preventDefault();\r\n                  handleSaveWasooliClick();\r\n                }}>\r\n                  {translations[language].saveWasooli}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n            {selectedConsumerId === consumer.idconsumerkhata && isAddBaqayaVisible && (\r\n              <div className=\"add-baqaya-card\">\r\n                <button className=\"close-button\" onClick={() => setIsAddBaqayaVisible(false)} >\r\n                  &#10005;\r\n                </button>\r\n                <span className=\"error-message\">{baqayaError}</span>\r\n                <input\r\n                  type=\"number\"\r\n                  placeholder={translations[language].baqayaa}\r\n                  value={baqayaToAdd}\r\n                  onChange={handleBaqayaInputChange}\r\n                />\r\n\r\n                <button className=\"save-baqaya-button\" onClick={handleSaveBaqayaClick}>\r\n                  {translations[language].save}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n          </div>\r\n\r\n        ))\r\n      }\r\n      <ConfirmAddModal\r\n        isOpen={isAddConsumerConfirmVisible}\r\n        onConfirm={() => {\r\n          setIsAddConsumerConfirmVisible(false);\r\n          setIsFormVisible(true); // Show the form if the user confirms\r\n        }}\r\n        onCancel={() => setIsAddConsumerConfirmVisible(false)}\r\n      />\r\n      {isFormVisible && (\r\n        <div className=\"form-container\">\r\n          <button className=\"close-button\" onClick={handleCancelClick}>\r\n            &#10005;\r\n          </button>\r\n          <span className=\"error-message\">{errorMessages.date}</span>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            placeholder={translations[language].datee}\r\n            value={consumerData.date}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <span className=\"error-message\">{errorMessages.consumerName}</span>\r\n          <input\r\n            type=\"text\"\r\n            name=\"consumerName\"\r\n            placeholder={translations[language].consumerNamee}\r\n            value={consumerData.consumerName}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <span className=\"error-message\">{errorMessages.baqaya}</span>\r\n          <input\r\n            type=\"text\"\r\n            name=\"baqaya\"\r\n            placeholder={translations[language].baqayaa}\r\n            value={consumerData.baqaya}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <button className=\"save-button\" onClick={handleSaveClick}>\r\n            {translations[language].save}\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      <button className=\"add-button\" onClick={handleAddConsumerClick}>\r\n        {translations[language].addConsumer}\r\n      </button>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConsumerKhata;","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\RelativesKhata.jsx",["93","94","95"],[],"import React, { useState, useEffect } from 'react';\r\nimport './RelativesKhata.css';\r\n\r\nconst RelativesKhata = () => {\r\n  const [date, setDate] = useState(() => {\r\n    const today = new Date();\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    const year = today.getFullYear();\r\n\r\n    return `${year}-${month}-${day}`;\r\n  });\r\n  const [source, setSource] = useState('');\r\n  const [quantity, setQuantity] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [editIndex, setEditIndex] = useState(-1);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [deleteIndex, setDeleteIndex] = useState(null);\r\n  const [groupVisibility, setGroupVisibility] = useState({});\r\n  const [showMonthlySales, setShowMonthlySales] = useState(false);\r\n  const [globalVisibility, setGlobalVisibility] = useState(false);\r\n  const [showModal, setShowModal] = useState(false); // You already have this for controlling the visibility of the modal\r\n  const [modalMessage, setModalMessage] = useState(''); // Add this line to manage the modal message\r\n  const [language, setLanguage] = useState('English');\r\n  const translations = {\r\n    English: {\r\n      date: \"Date\",\r\n      name: \"Name\",\r\n      quantity: \"Quantity\",\r\n      pricePerKilo: \"Price per kilo\",\r\n      save: \"Save\",\r\n      monthlyRelativesSale: \"Monthly Relatives Sale\",\r\n      overallRelativesSale: \"Overall Relatives Sale\",\r\n      showAll: \"Show All\",\r\n      hideAll: \"Hide All\",\r\n      show: \"Show \",\r\n      hide: \"Hide \",\r\n      delete: \"Delete\",\r\n      update: \"Update\",\r\n      deletePrompt: \"Are you sure you want to delete this?\",\r\n      yes: \"Yes\",\r\n      no: \"No\",\r\n      total: \"Total\",\r\n      relativeName: \"Relative Name\",\r\n      enterRelativeName: \"Enter Relative Name\",\r\n      enterQuantity: \"Enter Quantity\",\r\n      enterPricePerKilo: \"Enter Price per kilo\",\r\n      relativesKhata: \"Relatives Sales\",\r\n      KiloMilk:  \"Kilo Milk\", \r\n      kaa: \"of\",\r\n      added: \"has been added\",\r\n      In: \"In\", \r\n      expens : \"Expense\",\r\n      record: \"Record has been updated\",\r\n    },\r\n    Urdu: {\r\n      date: \"تاریخ\",\r\n      name: \"نام\",\r\n      quantity: \"مقدار\",\r\n      pricePerKilo: \"فی کلو قیمت\",\r\n      save: \"محفوظ کریں\",\r\n      monthlyRelativesSale: \"ماہانہ رشتہ داروں کی فروخت\",\r\n      overallRelativesSale: \"کل رشتہ داروں کی فروخت\",\r\n      showAll: \"سب دیکھیں\",\r\n      hideAll: \"سب چھپائیں\",\r\n      show: \"دیکھیں\",\r\n      hide: \"چھپائیں\",\r\n      delete: \"حذف کریں\",\r\n      update: \"اپ ڈیٹ\",\r\n      deletePrompt: \"کیا آپ واقعی اس  کو حذف کرنا چاہتے ہیں؟\",\r\n      yes: \"ہاں\",\r\n      no: \"نہیں\",\r\n      relativeName: \"رشتہ دار کا نام\",\r\n      enterRelativeName: \"رشتہ دار کا نام درج کریں\",\r\n      enterQuantity: \"مقدار درج کریں\",\r\n      enterPricePerKilo: \"فی کلو قیمت درج کریں\",\r\n      relativesKhata:   \"رشتہ داروں کی فروخت\",\r\n      total: \"کل\",\r\n      KiloMilk: \"کلو دودھ\",\r\n      kaa: \"کا\",\r\n      added: \" شامل ہوگیا ہے\",\r\n      In: \"میں\",\r\n      record: \"ریکارڈ اپ ڈیٹ ہو گیا ہے\",\r\n    }\r\n  };\r\n  const monthTranslations = {\r\n    January: \"جنوری\",\r\n    February: \"فروری\",\r\n    March: \"مارچ\",\r\n    April: \"اپریل\",\r\n    May: \"مئی\",\r\n    June: \"جون\",\r\n    July: \"جولائی\",\r\n    August: \"اگست\",\r\n    September: \"ستمبر\",\r\n    October: \"اکتوبر\",\r\n    November: \"نومبر\",\r\n    December: \"دسمبر\",\r\n  };\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/relatives');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      const processedData = data.map(expense => ({\r\n        ...expense,\r\n        Quantity: parseFloat(expense.Quantity),\r\n        RUnitPrice: parseFloat(expense.RUnitPrice),\r\n        RTotal: expense.RTotal ? parseFloat(expense.RTotal).toFixed(2) : undefined\r\n      }));\r\n      setExpenses(processedData);\r\n    } catch (error) {\r\n      console.error('There was an error fetching the sales data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const toggleGroupVisibility = (monthYear) => {\r\n    setGlobalVisibility(prevGlobalState => {\r\n      if (!prevGlobalState) {\r\n        // If global visibility is off, ensure it stays off and don't toggle individual groups\r\n        console.warn(\"Global visibility is off. Can't toggle individual group visibility.\");\r\n        return prevGlobalState;\r\n      }\r\n\r\n      // If global visibility is on, toggle the specific month/year group\r\n      setGroupVisibility(prevGroupVisibility => ({\r\n        ...prevGroupVisibility,\r\n        [monthYear]: !prevGroupVisibility[monthYear]\r\n      }));\r\n\r\n      return prevGlobalState; // Return the unchanged global state\r\n    });\r\n  };\r\n  const CustomModal = ({ message, onClose }) => {\r\n    return (\r\n      <div className=\"custom-modal-overlay\">\r\n        <div className=\"custom-modal\">\r\n           <div className=\"custom-modal-content\">\r\n            <p>{message}</p>\r\n            <button onClick={onClose}>Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  // Group expenses by month and year\r\n  const groupedExpenses = expenses.reduce((acc, expense) => {\r\n    // Ensure the date string is in the correct format (YYYY-MM-DD)\r\n    const expenseDate = expense.Date; // Adjust if the API gives a different property name for the date\r\n    const date = new Date(expenseDate);\r\n\r\n    if (isNaN(date.getTime())) {\r\n      console.error('Invalid date for expense:', expense);\r\n      return acc; // Skip this expense if the date is invalid\r\n    }\r\n\r\n    const monthYear = `${date.toLocaleString('default', { month: 'long', year: 'numeric' })}`;\r\n    if (!acc[monthYear]) {\r\n      acc[monthYear] = [];\r\n    }\r\n    acc[monthYear].push(expense);\r\n\r\n    return acc;\r\n  }, {});\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const expensePayload = {\r\n      Date: date,\r\n      Rname: source,\r\n      Quantity: parseFloat(quantity),\r\n      RUnitPrice: parseFloat(amount),\r\n    };\r\n\r\n    try {\r\n      let response;\r\n      if (editIndex >= 0) {\r\n        // Assuming your expense objects use 'idConsumersSale' as the key for ID\r\n        const expenseId = expenses[editIndex].idRelatives; // Adjust this line accordingly\r\n        response = await fetch(`http://localhost:3001/relatives/${expenseId}`, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n        });\r\n\r\n        const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n        const alertMessage = `${translations[language].record} `;\r\n  \r\n        // Replace alert(alertMessage); with:\r\n        setModalMessage(alertMessage);\r\n        setShowModal(true);\r\n\r\n      } else {\r\n        // Adding a new expense\r\n        response = await fetch('http://localhost:3001/relatives', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n        });\r\n\r\n      const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n      const alertMessage = `${quantity} ${translations[language].KiloMilk} ${translations[language].added}`;\r\n\r\n      // Replace alert(alertMessage); with:\r\n      setModalMessage(alertMessage);\r\n      setShowModal(true);\r\n\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      await fetchData(); // Refresh data\r\n\r\n      // Reset form fields and editIndex\r\n      //setDate('');\r\n      setSource('');\r\n      setQuantity('');\r\n      setAmount('');\r\n      setEditIndex(-1);\r\n      \r\n    } catch (error) {\r\n      console.error('There was an error saving the sale:', error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = (index) => {\r\n    setShowAlert(true);\r\n    setDeleteIndex(index);\r\n  };\r\n\r\n  const handleAlertConfirm = async (isConfirmed) => {\r\n    if (isConfirmed && deleteIndex != null) {\r\n      const expense = expenses[deleteIndex];\r\n      if (expense && expense.idRelatives) { // Make sure the ID field matches your data structure\r\n        try {\r\n          const response = await fetch(`http://localhost:3001/relatives/${expense.idRelatives}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n\r\n          const result = await response.json();\r\n          console.log(result.message); // Log the message from the backend\r\n\r\n          // Refresh the expenses list after deleting an expense\r\n          await fetchData();\r\n\r\n        } catch (error) {\r\n          console.error('There was an error deleting the sale:', error);\r\n        }\r\n      } else {\r\n        console.error('Attempted to delete an expense without a valid ID');\r\n      }\r\n    }\r\n\r\n    // Reset the state regardless of whether the delete was successful or not\r\n    setDeleteIndex(null);\r\n    setShowAlert(false);\r\n  };\r\n\r\n  const getMonthlyExpenses = () => {\r\n    const monthlyExpenses = expenses.reduce((acc, expense) => {\r\n      // Check if the date is valid\r\n      const date = new Date(expense.Date);\r\n      if (isNaN(date.getTime())) {\r\n        console.error('Invalid date for expense:', expense);\r\n        return acc; // Skip this expense if the date is invalid\r\n      }\r\n\r\n      const monthYear = `${date.toLocaleString('default', { month: 'long' })} ${date.getFullYear()}`;\r\n      const expenseQuantity = parseFloat(expense.Quantity);\r\n      const expenseUnitPrice = parseFloat(expense.RUnitPrice);\r\n      const monthlyTotal = !isNaN(expenseQuantity) && !isNaN(expenseUnitPrice) ? expenseQuantity * expenseUnitPrice : 0;\r\n\r\n      if (!acc[monthYear]) {\r\n        acc[monthYear] = 0;\r\n      }\r\n\r\n      acc[monthYear] += monthlyTotal;\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return monthlyExpenses;\r\n  };\r\n\r\n  const getOverallExpenses = () => {\r\n    return expenses.reduce((acc, expense) => {\r\n      const expenseQuantity = parseFloat(expense.Quantity);\r\n      const expenseUnitPrice = parseFloat(expense.RUnitPrice);\r\n      const total = expenseQuantity && expenseUnitPrice ? expenseQuantity * expenseUnitPrice : 0;\r\n      return acc + total;\r\n    }, 0);\r\n  };\r\n\r\n  const handleUpdate = (index) => {\r\n    const expense = expenses[index];\r\n    setDate(expense.Date);\r\n    setSource(expense.Rname); // Corrected: ensure this matches your data structure\r\n    setQuantity(expense.Quantity.toString());\r\n    setAmount(expense.RUnitPrice.toString());\r\n    setEditIndex(index);\r\n  };\r\n  const toggleGlobalVisibility = () => {\r\n    setGlobalVisibility(prevState => {\r\n      const newState = !prevState;\r\n      // Update all group visibilities based on the new global state\r\n      const newGroupVisibility = Object.keys(groupVisibility).reduce((acc, key) => {\r\n        acc[key] = newState; // Show or hide all based on the new global state\r\n        return acc;\r\n      }, {});\r\n\r\n      setGroupVisibility(newGroupVisibility);\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const toggleMonthlySalesVisibility = () => {\r\n    setShowMonthlySales(prevShow => !prevShow); // Toggle the visibility state\r\n\r\n\r\n  };\r\n  return (\r\n    <div className=\"expenditure-container\">\r\n      <h1 className=\"expenditure-title\">{translations[language].relativesKhata}</h1>\r\n      <button onClick={() => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English')} className=\"language-toggle\">\r\n        {language === 'English' ? 'اردو' : 'English'}\r\n      </button>\r\n      <form className=\"expenditure-form\" onSubmit={handleSave}>\r\n        <label htmlFor=\"date\" className=\"expenditure-label\">{translations[language].date}</label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          className=\"expenditure-input date-input\"\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"source\" className=\"expenditure-label\">{translations[language].name}</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"source\"\r\n          value={source}\r\n          onChange={(e) => setSource(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].relativeName}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"quantity\" className=\"expenditure-label\">{translations[language].quantity}</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"quantity\"\r\n          value={quantity}\r\n          onChange={(e) => setQuantity(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].enterQuantity}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"amount\" className=\"expenditure-label\">{translations[language].pricePerKilo}</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"amount\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].enterPricePerKilo}\r\n          required\r\n        />\r\n\r\n        <button type=\"submit\" className=\"save-button\">{translations[language].save}</button>\r\n      </form>\r\n      {showModal && (\r\n        <CustomModal\r\n          message={modalMessage}\r\n          onClose={() => setShowModal(false)}\r\n        />\r\n      )}\r\n      <div className=\"expenses-report\">\r\n        <h4>{translations[language].monthlyRelativesSale}</h4>\r\n\r\n        <button onClick={toggleMonthlySalesVisibility} className=\"toggle-all-button\">\r\n          {showMonthlySales ? translations[language].hideAll : translations[language].showAll}\r\n        </button>\r\n\r\n        {showMonthlySales && Object.entries(getMonthlyExpenses()).map(([monthYear, total]) => {\r\n          // Split month and year\r\n          const [month, year] = monthYear.split(' ');\r\n\r\n          // Translate the month name if available, otherwise, use the original name\r\n          const translatedMonth = language === 'Urdu' ? monthTranslations[month] || month : month;\r\n\r\n          // Combine translated month and year\r\n          const translatedMonthYear = `${translatedMonth} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear} style={{ color: 'green' }}>\r\n              {translations[language].monthlySales} {translatedMonthYear} : {total}\r\n            </div>\r\n          );\r\n        })}\r\n\r\n        <h4>{translations[language].overallRelativesSale}<br /><span style={{ color: 'green' }}>{getOverallExpenses()}</span></h4>\r\n      </div>\r\n      <button onClick={toggleGlobalVisibility} className=\"global-toggle-button\">\r\n        {globalVisibility ? translations[language].hideAll : translations[language].showAll}\r\n      </button>\r\n\r\n      {globalVisibility && Object.entries(groupedExpenses).map(([monthYear, expensesList]) => (\r\n        // Move the statements outside of JSX\r\n        (() => {\r\n          const monthYearArray = monthYear.split(' ');\r\n          const month = monthYearArray[0];\r\n          const year = monthYearArray[1];\r\n\r\n          // Translate the month name if the current language is Urdu\r\n          const translatedMonthName = language === 'Urdu' ? (monthTranslations[month] || month) : month;\r\n\r\n          // Reconstruct the monthYear string with the possibly translated month name\r\n          const displayMonthYear = `${translatedMonthName} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear}>\r\n              <h3 style={{ marginTop: 15 }}>\r\n                {displayMonthYear}\r\n                <button\r\n                  onClick={() => toggleGroupVisibility(monthYear)}\r\n                  className=\"toggle-button\"\r\n                >\r\n                  {groupVisibility[monthYear] ? translations[language].hide : translations[language].show}\r\n                </button>\r\n              </h3>\r\n              {groupVisibility[monthYear] && (\r\n                <div className=\"expenses-display\">\r\n                  {expensesList.map((expense, index) => {\r\n                    const actualIndex = expenses.findIndex(e => e === expense);\r\n                    const total = expense.quantity * expense.amount;\r\n                    return (\r\n                      <div key={index} className=\"expense-card\">\r\n                        <div>{translations[language].date} : {expense.Date}</div>\r\n                        <div>{translations[language].name} : {expense.Rname}</div>\r\n                        <div>{translations[language].quantity} : {expense.Quantity}</div>\r\n                        <div>{translations[language].pricePerKilo} : {expense.RUnitPrice}</div>\r\n                        <div>{translations[language].total} :  {expense.RTotal}</div>\r\n                        <button onClick={() => handleDelete(actualIndex)} className=\"delete-button1\">{translations[language].delete} </button>\r\n                        <button onClick={() => handleUpdate(actualIndex)} className=\"update-button\">{translations[language].update} </button>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })()\r\n      ))}\r\n\r\n\r\n      {showAlert && (\r\n        <div className=\"alert-dialog\">\r\n          <p>{translations[language].deletePrompt} </p>\r\n          <button onClick={() => handleAlertConfirm(true)} className=\"confirm-yes\">{translations[language].yes} </button>\r\n          <button onClick={() => handleAlertConfirm(false)} className=\"confirm-no\" >{translations[language].no} </button>\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default RelativesKhata;\r\n","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\Expenditure.jsx",["96","97"],[],"import React, { useState, useEffect } from 'react';\r\nimport './Expenditure.css';\r\n\r\nconst Expenditure = () => {\r\n  const [date, setDate] = useState(() => {\r\n    const today = new Date();\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    const year = today.getFullYear();\r\n\r\n    return `${year}-${month}-${day}`;\r\n  });\r\n  const [source, setSource] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [editIndex, setEditIndex] = useState(-1);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [deleteIndex, setDeleteIndex] = useState(null);\r\n  const [groupVisibility, setGroupVisibility] = useState({});\r\n  const [showMonthlySales, setShowMonthlySales] = useState(false);\r\n  const [globalVisibility, setGlobalVisibility] = useState(false);\r\n  const [showModal, setShowModal] = useState(false); // You already have this for controlling the visibility of the modal\r\n  const [modalMessage, setModalMessage] = useState(''); // Add this line to manage the modal message\r\n  const [language, setLanguage] = useState('English');\r\n\r\n  const translations = {\r\n\r\n    English: {\r\n      title: \"Expenditure khata\",\r\n      date: \"Date\",\r\n      source: \"Source of Expense\",\r\n      amount: \"Amount\",\r\n      save: \"Save\",\r\n      monthlyExpenseReport: \"Monthly Expense Report:\",\r\n      overallExpenses: \"Overall Expenses:\",\r\n      showAll: \"Show All\",\r\n      hideAll: \"Hide All\",\r\n      delete: \"Delete\",\r\n      update: \"Update\",\r\n      deletePrompt: \"Are you sure you want to delete this expense?\",\r\n      yes: \"Yes\",\r\n      no: \"No\",\r\n      show: \"Show\",\r\n      hide: \"Hide\",\r\n      KiloMilk: \"Kilo Milk\",\r\n      kaa: \"of\",\r\n      added: \"has been added\",\r\n      In: \"In\",\r\n      enterSource :\"Enter source expense \",\r\n      enterAmount: \"Enter amount of Expense\",\r\n      expens : \"Expense\",\r\n   \r\n      record: \"Record has been updated\",\r\n    },\r\n    Urdu: {\r\n      title: \"خرچے کا حساب\",\r\n      date: \"تاریخ\",\r\n      source: \"خرچے کا ذریعہ\",\r\n      amount: \"رقم\",\r\n      save: \"محفوظ کریں\",\r\n      monthlyExpenseReport: \"ماہانہ خرچہ رپورٹ:\",\r\n      overallExpenses: \"کل خرچے:\",\r\n      showAll: \"سب دیکھیں\",\r\n      hideAll: \"سب چھپائیں\",\r\n      delete: \"حذف کریں\",\r\n      update: \"اپ ڈیٹ\",\r\n      deletePrompt: \"کیا آپ واقعی اس خرچے کو حذف کرنا چاہتے ہیں؟\",\r\n      yes: \"ہاں\",\r\n      no: \"نہیں\",\r\n      show: \" دیکھیں\",\r\n      hide: \" چھپائیں\",\r\n      KiloMilk: \"کلو دودھ\",\r\n      kaa: \"کا\",\r\n      added: \" شامل ہوگیا ہے\",\r\n      In: \"میں\",\r\n      enterSource: \"خرچے کا ذریعہ درج کریں\",\r\n      enterAmount: \"خرچے کی رقم درج کریں\",\r\n      expens : 'اخراجات',\r\n      record: \"ریکارڈ اپ ڈیٹ ہو گیا ہے\",\r\n    },\r\n\r\n  };\r\n\r\n  const monthTranslations = {\r\n    January: \"جنوری\",\r\n    February: \"فروری\",\r\n    March: \"مارچ\",\r\n    April: \"اپریل\",\r\n    May: \"مئی\",\r\n    June: \"جون\",\r\n    July: \"جولائی\",\r\n    August: \"اگست\",\r\n    September: \"ستمبر\",\r\n    October: \"اکتوبر\",\r\n    November: \"نومبر\",\r\n    December: \"دسمبر\",\r\n  };\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/expenditure');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      const processedData = data.map(expense => ({\r\n        ...expense,\r\n        amount: parseFloat(expense.amount),\r\n\r\n      }));\r\n      setExpenses(processedData);\r\n    } catch (error) {\r\n      console.error('There was an error fetching the sales data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const toggleGroupVisibility = (monthYear) => {\r\n    setGlobalVisibility(prevGlobalState => {\r\n      if (!prevGlobalState) {\r\n        // If global visibility is off, ensure it stays off and don't toggle individual groups\r\n        console.warn(\"Global visibility is off. Can't toggle individual group visibility.\");\r\n        return prevGlobalState;\r\n      }\r\n\r\n      // If global visibility is on, toggle the specific month/year group\r\n      setGroupVisibility(prevGroupVisibility => ({\r\n        ...prevGroupVisibility,\r\n        [monthYear]: !prevGroupVisibility[monthYear]\r\n      }));\r\n\r\n      return prevGlobalState; // Return the unchanged global state\r\n    });\r\n  };\r\n  const CustomModal = ({ message, onClose }) => {\r\n    return (\r\n      <div className=\"custom-modal-overlay\">\r\n        <div className=\"custom-modal\">\r\n          <div className=\"custom-modal-content\">\r\n            <p>{message}</p>\r\n            <button onClick={onClose}>Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  // Group expenses by month and year\r\n  const groupedExpenses = expenses.reduce((acc, expense) => {\r\n    // Ensure the date string is in the correct format (YYYY-MM-DD)\r\n    const expenseDate = expense.Date; // Adjust if the API gives a different property name for the date\r\n    const date = new Date(expenseDate);\r\n\r\n    if (isNaN(date.getTime())) {\r\n      console.error('Invalid date for expense:', expense);\r\n      return acc; // Skip this expense if the date is invalid\r\n    }\r\n\r\n    const monthYear = `${date.toLocaleString('default', { month: 'long', year: 'numeric' })}`;\r\n    if (!acc[monthYear]) {\r\n      acc[monthYear] = [];\r\n    }\r\n    acc[monthYear].push(expense);\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const expensePayload = {\r\n      Date: date,\r\n      source: source,\r\n\r\n      amount: parseFloat(amount),\r\n    };\r\n\r\n    try {\r\n      let response;\r\n      if (editIndex >= 0) {\r\n        // Assuming your expense objects use 'idConsumersSale' as the key for ID\r\n        const expenseId = expenses[editIndex].idexpenditure; // Adjust this line accordingly\r\n        response = await fetch(`http://localhost:3001/expenditure/${expenseId}`, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n        });\r\n\r\n        const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n        const alertMessage = `${translations[language].record} `;\r\n\r\n        // Replace alert(alertMessage); with:\r\n        setModalMessage(alertMessage);\r\n        setShowModal(true);\r\n\r\n\r\n      } else {\r\n        // Adding a new expense\r\n        response = await fetch('http://localhost:3001/expenditure', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n          \r\n        });\r\n\r\n        const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n        const alertMessage = `${amount} ${translations[language].expens} ${translations[language].added} `;\r\n        // Replace alert(alertMessage); with:\r\n        setModalMessage(alertMessage);\r\n        setShowModal(true);\r\n\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      await fetchData(); // Refresh data\r\n\r\n      setSource('');\r\n      setAmount('');\r\n      setEditIndex(-1);\r\n\r\n    \r\n    } catch (error) {\r\n      console.error('There was an error saving the sale:', error);\r\n    }\r\n  };\r\n  const toggleGlobalVisibility = () => {\r\n    setGlobalVisibility(prevState => {\r\n      const newState = !prevState;\r\n      // Update all group visibilities based on the new global state\r\n      const newGroupVisibility = Object.keys(groupVisibility).reduce((acc, key) => {\r\n        acc[key] = newState; // Show or hide all based on the new global state\r\n        return acc;\r\n      }, {});\r\n\r\n      setGroupVisibility(newGroupVisibility);\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const toggleMonthlySalesVisibility = () => {\r\n    setShowMonthlySales(prevShow => !prevShow); // Toggle the visibility state\r\n  };\r\n\r\n  const handleDelete = (index) => {\r\n    setShowAlert(true);\r\n    setDeleteIndex(index);\r\n  };\r\n\r\n  const handleAlertConfirm = async (isConfirmed) => {\r\n    if (isConfirmed && deleteIndex != null) {\r\n      const expense = expenses[deleteIndex];\r\n      if (expense && expense.idexpenditure) { // Make sure the ID field matches your data structure\r\n        try {\r\n          const response = await fetch(`http://localhost:3001/expenditure/${expense.idexpenditure}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n\r\n          const result = await response.json();\r\n          console.log(result.message); // Log the message from the backend\r\n\r\n          // Refresh the expenses list after deleting an expense\r\n          await fetchData();\r\n\r\n        } catch (error) {\r\n          console.error('There was an error deleting the sale:', error);\r\n        }\r\n      } else {\r\n        console.error('Attempted to delete an expense without a valid ID');\r\n      }\r\n    }\r\n\r\n    // Reset the state regardless of whether the delete was successful or not\r\n    setDeleteIndex(null);\r\n    setShowAlert(false);\r\n  };\r\n\r\n  const getMonthlyExpenses = () => {\r\n    return expenses.reduce((acc, expense) => {\r\n      const expenseDate = new Date(expense.Date); // Adjust according to your actual data structure\r\n      const monthYear = `${expenseDate.toLocaleString('default', { month: 'long' })} ${expenseDate.getFullYear()}`;\r\n      const expenseAmount = isNaN(parseFloat(expense.amount)) ? 0 : parseFloat(expense.amount);\r\n\r\n      if (!acc[monthYear]) acc[monthYear] = 0;\r\n      acc[monthYear] += expenseAmount;\r\n\r\n      return acc;\r\n    }, {});\r\n  };\r\n\r\n\r\n  const getOverallExpenses = () => {\r\n\r\n    return expenses.reduce((acc, expense) => acc + expense.amount, 0);\r\n  };\r\n\r\n  const handleUpdate = (index) => {\r\n    const expense = expenses[index];\r\n    // Correctly assign values from the expense object\r\n    setDate(expense.Date); // Ensure the property names match your data structure\r\n    setSource(expense.source); // This should be the source, not the total or any other field\r\n    setAmount(expense.amount.toString());\r\n    setEditIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"expenditure-container\">\r\n      <h1 className=\"expenditure-title\">{translations[language].title}</h1>\r\n      <button onClick={() => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English')} className=\"language-toggle\">\r\n        {language === 'English' ? 'اردو' : 'English'}\r\n      </button>\r\n      <form className=\"expenditure-form\" onSubmit={handleSave}>\r\n        <label htmlFor=\"date\" className=\"expenditure-label\">{translations[language].date}</label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          className=\"expenditure-input date-input\"\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"source\" className=\"expenditure-label\">{translations[language].source}</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"source\"\r\n          value={source}\r\n          onChange={(e) => setSource(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].enterSource}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"amount\" className=\"expenditure-label\">{translations[language].amount}</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"amount\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].enterAmount}\r\n          required\r\n        />\r\n\r\n        <button type=\"submit\" className=\"save-button\">{translations[language].save}</button>\r\n      </form>\r\n      {showModal && (\r\n        <CustomModal\r\n          message={modalMessage}\r\n          onClose={() => setShowModal(false)}\r\n        />\r\n      )}\r\n      <div className=\"expenses-report\">\r\n        <h4>{translations[language].monthlyExpenseReport}</h4>\r\n\r\n        <button onClick={toggleMonthlySalesVisibility} className=\"toggle-all-button\">\r\n          {showMonthlySales ? translations[language].hideAll : translations[language].showAll}\r\n        </button>\r\n\r\n        {showMonthlySales && Object.entries(getMonthlyExpenses()).map(([monthYear, total]) => {\r\n          // Split month and year\r\n          const [month, year] = monthYear.split(' ');\r\n\r\n          // Translate the month name if available, otherwise, use the original name\r\n          const translatedMonth = language === 'Urdu' ? monthTranslations[month] || month : month;\r\n\r\n          // Combine translated month and year\r\n          const translatedMonthYear = `${translatedMonth} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear} style={{ color: 'green' }}>\r\n              {translations[language].monthlySales} {translatedMonthYear} : {total}\r\n            </div>\r\n          );\r\n        })}\r\n\r\n\r\n        <h4>{translations[language].overallExpenses}<br /><span style={{ color: 'green' }}>{getOverallExpenses()}</span></h4>\r\n      </div>\r\n      <button onClick={toggleGlobalVisibility} className=\"global-toggle-button\">\r\n        {globalVisibility ? translations[language].hideAll : translations[language].showAll}\r\n      </button>\r\n\r\n      {globalVisibility && Object.entries(groupedExpenses).map(([monthYear, expensesList]) => (\r\n        (() => {\r\n          const monthYearArray = monthYear.split(' ');\r\n          const month = monthYearArray[0];\r\n          const year = monthYearArray[1];\r\n\r\n          // Translate the month name if the current language is Urdu\r\n          const translatedMonthName = language === 'Urdu' ? (monthTranslations[month] || month) : month;\r\n\r\n          // Reconstruct the monthYear string with the possibly translated month name\r\n          const displayMonthYear = `${translatedMonthName} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear}>\r\n              <h3 style={{ marginTop: 15 }}>\r\n                {displayMonthYear}\r\n                <button\r\n                  onClick={() => toggleGroupVisibility(monthYear)}\r\n                  className=\"toggle-button\"\r\n                >\r\n                  {groupVisibility[monthYear] ? translations[language].hide : translations[language].show}\r\n                </button>\r\n              </h3>\r\n              {groupVisibility[monthYear] && (\r\n                <div className=\"expenses-display\">\r\n                  {expensesList.map((expense, index) => {\r\n                    const actualIndex = expenses.findIndex(e => e === expense);\r\n                    return (\r\n                      <div key={index} className=\"expense-card\">\r\n                        <div>{translations[language].date} : {expense.Date}</div>\r\n                        <div>{translations[language].source} : {expense.source}</div>\r\n                        <div>{translations[language].amount} : {expense.amount}</div>\r\n                        <button onClick={() => handleDelete(actualIndex)} className=\"delete-button1\">{translations[language].delete} </button>\r\n                        <button onClick={() => handleUpdate(actualIndex)} className=\"update-button\">{translations[language].update} </button>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })()\r\n      ))}\r\n      {showAlert && (\r\n        <div className=\"alert-dialog\">\r\n          <p>{translations[language].deletePrompt} :</p>\r\n          <button onClick={() => handleAlertConfirm(true)} className=\"confirm-yes\">{translations[language].yes} </button>\r\n          <button onClick={() => handleAlertConfirm(false)} className=\"confirm-no\" >{translations[language].no} </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenditure;\r\n","C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\Sales.jsx",[],[],"C:\\Users\\Faisal\\Desktop\\fullstack Projects\\Diary Software\\my-frontend\\src\\Employee.jsx",["98","99","100","101","102","103","104","105","106","107","108"],[],"import React, { useState, useEffect } from 'react';\r\nimport './Employee.css';\r\n\r\nconst Employee = () => {\r\n\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Pad single digit months with a leading 0\r\n    const day = String(today.getDate()).padStart(2, '0'); // Pad single digit days with a leading 0\r\n    return `${year}-${month}-${day}`; // Format must be YYYY-MM-DD\r\n  };\r\n\r\n\r\n  const [isFormVisible, setIsFormVisible] = useState(false);\r\n  const [consumerData, setConsumerData] = useState({\r\n    date: getTodayDate(),\r\n    consumerName: '',\r\n    baqaya: '',\r\n  });\r\n  const [errorMessages, setErrorMessages] = useState({\r\n    date: '',\r\n    consumerName: '',\r\n    baqaya: '',\r\n  });\r\n  const [isDataSaved, setIsDataSaved] = useState(false);\r\n  const [isUpdateMode, setIsUpdateMode] = useState(false);\r\n  const [isAddBaqayaVisible, setIsAddBaqayaVisible] = useState(false);\r\n  const [baqayaToAdd, setBaqayaToAdd] = useState('');\r\n  const [baqayaError, setBaqayaError] = useState('');\r\n  const [consumers, setConsumers] = useState([]);\r\n  const [selectedConsumerId, setSelectedConsumerId] = useState(null);\r\n  const [isConfirmModalVisible, setIsConfirmModalVisible] = useState(false);\r\n  const [isAlertVisible, setIsAlertVisible] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n  const [currentManaging, setCurrentManaging] = useState(null);\r\n  const [monthVisibility, setMonthVisibility] = useState({})\r\n  const [language, setLanguage] = useState('English');\r\n  const [monthYearButtonsVisibility, setMonthYearButtonsVisibility] = useState({});\r\n  const [isWasooliVisible, setIsWasooliVisible] = useState(false);\r\n  const [wasooliData, setWasooliData] = useState({\r\n    date: getTodayDate(),\r\n    source: '',\r\n    wasooli: '',\r\n  });\r\n  // Update this state to also include the wasooliId\r\n  const [deleteConfirmationData, setDeleteConfirmationData] = useState({\r\n    consumerId: null,\r\n    wasooliId: null, // Add this line\r\n    index: null,\r\n  });\r\n  const [editingTransaction, setEditingTransaction] = useState(null);\r\n\r\n  const [wasooliErrorMessages, setWasooliErrorMessages] = useState({\r\n    date: '',\r\n    source: '',\r\n    wasooli: '',\r\n  });\r\n\r\n  const translations = {\r\n    English: {\r\n      date: 'Date',\r\n      consumerName: 'Employee Name',\r\n      baqaya: 'Employee Baqaya',\r\n      employeekhata: \"Employee Khata\",\r\n      pleaseEnterDate: 'Please enter a date',\r\n      pleaseEnterConsumerName: 'Please enter employee name',\r\n      pleaseEnterBaqaya: 'Please enter employee baqaya amount',\r\n      save: 'Save',\r\n      Khata: \"Khata\",\r\n      addEmployee: 'Add Employee',\r\n      manage: 'Manage',\r\n      addBaqaya: 'Add Baqaya',\r\n      update: 'Update',\r\n      toggleVisibility: 'Toggle Visibility',\r\n      hideAll: 'Hide All',\r\n      showAll: 'Show All',\r\n      sourceOfKharcha: 'Source',\r\n      kharcha: 'Kharcha',\r\n      saveKharcha: 'Save Kharcha',\r\n      close: 'Close',\r\n      addMoreEmployeeBaqaya: 'Add more Employee Baqaya',\r\n      confirmAddConsumer: \"Are you sure you want to add a new consumer?\",\r\n      yes: \"Yes\",\r\n      no: \"No\",\r\n      deleteWasooliConfirm: \"Are you sure you want to delete this kharcha?\",\r\n      close: \"Close\",\r\n      Show: \"Show\",\r\n      Hide: \"Hide\",\r\n      delete: \"Delete\",\r\n      datee: \"Please enter a date\",\r\n      consumerNamee: \"Please enter employee name\",\r\n      baqayaa: \"Please enter baqaya amount\",\r\n      baqayaNumberr: \"Baqaya must be a number\",\r\n      wasooliAmountt: \"Please fill up the khatcha amount\",\r\n      baqayaerror: \"Please fill up the baqaya amount\",\r\n      \r\n    },\r\n    Urdu: {\r\n      date: 'تاریخ',\r\n      consumerName: 'ملازم کا نام',\r\n      baqaya: 'ملازم کا باقیہ',\r\n      consumerKhata: \"صارف خاتہ \",\r\n      employeekhata: \"خاتہ ملازم \",\r\n      pleaseEnterDate: 'براہ کرم تاریخ درج کریں',\r\n      pleaseEnterConsumerName: 'براہ کرم ملازم کا نام درج کریں',\r\n      pleaseEnterBaqaya: 'براہ کرم ملازم کا باقیہ معلومات درج کریں',\r\n      save: 'محفوظ کریں',\r\n      delete: \"حذف کریں\",\r\n      addEmployee: 'ملازم شامل کریں',\r\n      manage: 'انتظام کریں',\r\n      addBaqaya: 'باقیہ شامل کریں',\r\n      update: 'اپ ڈیٹ',\r\n      toggleVisibility: 'دکھائیں یا چھپائیں',\r\n      hideAll: 'سب چھپائیں',\r\n      showAll: 'سب دکھائیں',\r\n      sourceOfKharcha: 'خرچے کا ذریعہ',\r\n      kharcha: 'خرچہ',\r\n      saveKharcha: 'خرچہ محفوظ کریں',\r\n      close: 'بند کریں',\r\n      addMoreEmployeeBaqaya: 'مزید ملازم کا باقیہ شامل کریں',\r\n      delete: \"حذف کریں\",\r\n      Khata: \"خاتہ\",\r\n      confirmAddConsumer: \"کیا آپ واقعی نیا صارف شامل کرنا چاہتے ہیں؟\",\r\n      yes: \"جی ہاں\",\r\n      no: \"نہیں\",\r\n      Khata: \"خاتہ\",\r\n      Show: \"دکھائیں\",\r\n      Hide: \"چھپائیں\",\r\n      deleteWasooliConfirm: \"کیا آپ واقعی اس وصولی کو حذف کرنا چاہتے ہیں؟\",\r\n      close: \"بند کریں\",\r\n      datee: \"براہ کرم تاریخ درج کریں\",\r\n      consumerNamee: \"براہ کرم صارف کا نام درج کریں\",\r\n      baqayaa: \"براہ کرم باقیہ مقدار درج کریں\",\r\n      baqayaNumberr: \"باقیہ کو نمبر ہونا چاہئے\",\r\n      wasooliAmountt: \"براہ کرم وصولی کی رقم بھریں\",\r\n      wasooliDatee: \"تاریخ ضروری ہے\",\r\n      baqayaerror: \"برائے مہربانی باقیہ رقم بھریں\",\r\n    }\r\n\r\n  };\r\n  const monthTranslations = {\r\n    January: \"جنوری\",\r\n    February: \"فروری\",\r\n    March: \"مارچ\",\r\n    April: \"اپریل\",\r\n    May: \"مئی\",\r\n    June: \"جون\",\r\n    July: \"جولائی\",\r\n    August: \"اگست\",\r\n    September: \"ستمبر\",\r\n    October: \"اکتوبر\",\r\n    November: \"نومبر\",\r\n    December: \"دسمبر\",\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/employeekhata');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const consumersData = await response.json();\r\n\r\n      // Check the fetched data\r\n      console.log(\"Fetched consumers data:\", consumersData);\r\n\r\n      const updatedConsumersData = await Promise.all(consumersData.map(async (consumer) => {\r\n        const wasooliResponse = await fetch(`http://localhost:3001/kharchay/${consumer.idEmployeekhata}`);\r\n        if (!wasooliResponse.ok) {\r\n          console.log(`Failed to fetch wasooli data for consumer ID: ${consumer.idEmployeekhata}`);\r\n          return consumer; // Return the consumer without wasooli data if fetch fails\r\n        }\r\n        const wasooliData = await wasooliResponse.json();\r\n        return { ...consumer, wasooliTransactions: wasooliData };\r\n      }));\r\n\r\n      // Check the updated consumers data\r\n      console.log(\"Updated consumers data:\", updatedConsumersData);\r\n\r\n      // Update state with the processed and fetched data\r\n      setConsumers(updatedConsumersData);\r\n    } catch (error) {\r\n      console.error('Fetch error:', error);\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(consumers); // Log the state to see if it includes the dates correctly\r\n  }, [consumers]);\r\n\r\n  const toggleMonthYearButtonsVisibility = (consumerId) => {\r\n\r\n    setMonthYearButtonsVisibility(prevState => {\r\n      const newState = {\r\n        ...prevState,\r\n        [consumerId]: !prevState[consumerId],\r\n      };\r\n\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    let newValue = value;\r\n\r\n    // If the input is for baqaya, ensure it's handled as a number\r\n    if (name === 'baqaya') {\r\n      newValue = value !== '' ? parseInt(value, 10) : 0;\r\n      if (isNaN(newValue)) {\r\n        setErrorMessages((prevErrors) => ({\r\n          ...prevErrors,\r\n          baqaya: 'Baqaya must be a number',\r\n        }));\r\n        return; // Don't set the consumer data if the input is not a number\r\n      }\r\n    }\r\n\r\n    setConsumerData((prevData) => ({\r\n      ...prevData,\r\n      [name]: newValue,\r\n    }));\r\n\r\n    // Clear any error messages for this input\r\n    setErrorMessages((prevErrors) => ({\r\n      ...prevErrors,\r\n      [name]: '',\r\n    }));\r\n  };\r\n\r\n  const handleSaveClick = async () => {\r\n    const { date, consumerName, baqaya, idEmployeekhata } = consumerData;\r\n    console.log('Data before sending:', { date, consumerName, baqaya, idEmployeekhata }); // Debug log\r\n\r\n    if (!date.trim() || !consumerName.trim() || isNaN(parseInt(baqaya)) || parseInt(baqaya) < 0) {\r\n      let errors = {\r\n        ...(date.trim() ? null : { date: \"Please enter a date\" }),\r\n        ...(consumerName.trim() ? null : { consumerName: \"Please enter consumer name\" }),\r\n        ...(!isNaN(parseInt(baqaya)) && parseInt(baqaya) >= 0 ? null : { baqaya: \"Please enter a valid non-negative baqaya amount\" }),\r\n      };\r\n      setErrorMessages(errors);\r\n      return;\r\n    }\r\n\r\n    const endpoint = idEmployeekhata ? `http://localhost:3001/employeekhata/${idEmployeekhata}` : 'http://localhost:3001/employeekhata';\r\n    const method = idEmployeekhata ? 'PUT' : 'POST';\r\n    const body = JSON.stringify({\r\n      Date: date,  // Ensure this key matches the server's expectation (case-sensitive)\r\n      name: consumerName,\r\n      baqaya: parseInt(baqaya),\r\n    });\r\n\r\n    try {\r\n      const response = await fetch(endpoint, {\r\n        method,\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: body,\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n      console.log('Update successful', await response.json()); // Debug success\r\n      await fetchData();\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('Error during fetch:', error);\r\n    }\r\n};\r\n\r\n\r\n  const resetForm = () => {\r\n    setConsumerData({\r\n      date: '',\r\n      consumerName: '',\r\n      baqaya: '',\r\n    });\r\n    setIsFormVisible(false);\r\n    setErrorMessages({});\r\n  };\r\n\r\n  const handleCancelClick = () => {\r\n    setIsFormVisible(false);\r\n    setIsUpdateMode(false);\r\n  };\r\n\r\n  const handleUpdateClick = (id) => {\r\n    const consumerToUpdate = consumers.find(consumer => consumer.idEmployeekhata === id);\r\n    if (consumerToUpdate) {\r\n      setConsumerData({\r\n        date: consumerToUpdate.Date || '',\r\n        consumerName: consumerToUpdate.name || '',\r\n        baqaya: consumerToUpdate.baqaya || '',\r\n        idEmployeekhata: consumerToUpdate.idEmployeekhata, // Store the id in the state\r\n      });\r\n      setIsUpdateMode(true);\r\n      setIsFormVisible(true);\r\n    } else {\r\n      console.error(\"No consumer found with ID:\", id);\r\n    }\r\n  };\r\n\r\n  const handleAddBaqayaClick = () => {\r\n    setIsAddBaqayaVisible(true);\r\n  };\r\n\r\n  const handleBaqayaInputChange = (e) => {\r\n    const { value } = e.target;\r\n    setBaqayaToAdd(value);\r\n    setBaqayaError('');\r\n  };\r\n\r\n  const handleSaveBaqayaClick = async () => {\r\n    if (!baqayaToAdd) {\r\n      setBaqayaError('Please fill the Baqaya field');\r\n      return;\r\n    }\r\n    const newBaqayaAmount = parseInt(baqayaToAdd);\r\n    if (isNaN(newBaqayaAmount)) {\r\n      setBaqayaError('Invalid Baqaya amount');\r\n      return;\r\n    }\r\n\r\n    // Find the consumer to update\r\n    const consumerToUpdate = consumers.find(consumer => consumer.idEmployeekhata === selectedConsumerId);\r\n    if (!consumerToUpdate) {\r\n      console.error(\"Consumer not found\");\r\n      return;\r\n    }\r\n\r\n    // Ensure consumerToUpdate.baqaya is a number\r\n    const currentBaqaya = parseInt(consumerToUpdate.baqaya) || 0;\r\n\r\n    // Calculate updated baqaya\r\n    const updatedBaqaya = currentBaqaya + newBaqayaAmount;\r\n\r\n    // Corrected URL in the fetch request\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/employeekhata/${selectedConsumerId}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          Date: consumerToUpdate.Date, // Make sure to include other fields required by your server\r\n          name: consumerToUpdate.name,\r\n          baqaya: updatedBaqaya,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Update local state and UI\r\n      const updatedConsumers = consumers.map(consumer =>\r\n        consumer.idEmployeekhata === selectedConsumerId ? {\r\n          ...consumer,\r\n          baqaya: updatedBaqaya.toString(),\r\n        } : consumer\r\n      );\r\n\r\n      setConsumers(updatedConsumers);\r\n      setIsDataSaved(true);\r\n      setBaqayaToAdd('');\r\n      setIsAddBaqayaVisible(false);\r\n      setBaqayaError('');\r\n      fetchData(); // Refresh data\r\n    } catch (error) {\r\n      console.error('Error updating baqaya:', error);\r\n      setBaqayaError('Failed to update baqaya');\r\n    }\r\n  };\r\n\r\n  const handleUpdateWasooliClick = (consumerId, transactionId) => {\r\n    if (!consumerId || !transactionId) {\r\n      console.error('Missing consumer ID or transaction ID');\r\n      return;\r\n    }\r\n\r\n    const consumer = consumers.find(consumer => consumer.idEmployeekhata === consumerId);\r\n    if (!consumer) {\r\n      console.error('Consumer not found for ID:', consumerId);\r\n      setIsAlertVisible(true);\r\n      setAlertMessage(\"Error: Consumer not found\");\r\n      return;\r\n    }\r\n    console.log(\"Consumer found:\", consumer.name);\r\n\r\n    if (!consumer.wasooliTransactions || consumer.wasooliTransactions.length === 0) {\r\n      console.error('No transactions found for consumer:', consumer.name);\r\n      return;\r\n    }\r\n\r\n    console.log(\"Consumer's Wasooli Transactions:\", consumer.wasooliTransactions);\r\n\r\n    const selectedWasooliCard = consumer.wasooliTransactions.find(txn => txn.idkharchay.toString() === transactionId.toString());\r\n    if (!selectedWasooliCard) {\r\n      console.error('Wasooli transaction not found for ID:', transactionId, \"in consumer:\", consumer.name);\r\n      return;\r\n    }\r\n    console.log(\"Selected Wasooli Card:\", selectedWasooliCard);\r\n\r\n    // Update the form data and editing transaction state asynchronously\r\n    setWasooliData({\r\n      date: selectedWasooliCard.date,\r\n      source: selectedWasooliCard.source,\r\n      wasooli: selectedWasooliCard.Wasooli.toString(),\r\n    });\r\n\r\n    setEditingTransaction({\r\n      consumerId: consumerId,\r\n      transactionId: transactionId,\r\n    });\r\n\r\n    setIsWasooliVisible(true);\r\n  };\r\n\r\n\r\n\r\n  const handleManageClick = (consumerId) => {\r\n    setSelectedConsumerId(consumerId);\r\n    setIsWasooliVisible(true);\r\n    setCurrentManaging(consumerId);\r\n    // Reset Wasooli form data\r\n    setWasooliData({ date: '', source: '', Wasooli: '' });\r\n  };\r\n\r\n  const handleWasooliInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setWasooliData({ ...wasooliData, [name]: value });\r\n    setWasooliErrorMessages({ ...wasooliErrorMessages, [name]: '' });\r\n  };\r\n\r\n\r\n  const handleConfirmDeletion = async () => {\r\n    const { consumerId, wasooliId, index } = deleteConfirmationData;\r\n\r\n    if (!wasooliId) {\r\n      console.error(\"Wasooli ID is missing.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Delete the Wasooli transaction\r\n      const deleteResponse = await fetch(`http://localhost:3001/kharchay/${wasooliId}`, { method: 'DELETE' });\r\n\r\n      if (!deleteResponse.ok) {\r\n        const errorData = await deleteResponse.json();\r\n        throw new Error(errorData.message || 'Failed to delete Wasooli transaction.');\r\n      }\r\n\r\n      console.log(\"Wasooli transaction deleted successfully.\");\r\n\r\n      // Re-fetch updated consumer data to refresh local state\r\n      await fetchData();\r\n\r\n      console.log(\"Consumer data refreshed after Wasooli deletion.\");\r\n\r\n      // Reset the delete confirmation data and close the modal\r\n      setDeleteConfirmationData({ consumerId: null, wasooliId: null, index: null });\r\n      setIsConfirmModalVisible(false);\r\n    } catch (error) {\r\n      console.error('Error during Wasooli deletion:', error);\r\n    }\r\n  };\r\n\r\n\r\n  const handleCancelDeletion = () => {\r\n    setIsConfirmModalVisible(false); // Hide the modal\r\n  };\r\n\r\n  const handleDeleteWasooliClick = (consumerId, wasooliId, index) => {\r\n    // Log the parameters to ensure they are being passed correctly\r\n    console.log(`Preparing to delete Wasooli with ID: ${wasooliId}, for Consumer ID: ${consumerId}, at Index: ${index}`);\r\n\r\n\r\n    // Set the deleteConfirmationData with the correct values\r\n    setDeleteConfirmationData({ consumerId, wasooliId, index });\r\n    setIsConfirmModalVisible(true);\r\n  };\r\n\r\n  const AlertModal = ({ isOpen, message, onClose }) => {\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n      <div className=\"alert-modal-overlay\">\r\n        <div className=\"alert-modal\">\r\n          <p>{message}</p>\r\n          <button onClick={onClose}>OK</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const ConfirmationModal = ({ onConfirm, onCancel }) => (\r\n    <div className=\"confirmation-modal-overlay\">\r\n      <div className=\"confirmation-modal\">\r\n        <p>Are you sure you want to delete this kharcha?</p>\r\n        <button className=\"yes-button\" onClick={onConfirm}>Yes</button>\r\n        <button className=\"no-button\" onClick={onCancel}>No</button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const handleSaveWasooliClick = async () => {\r\n    try {\r\n    \r\n\r\n      if (!wasooliData.date) {\r\n        throw new Error(\"Date is required\");\r\n      }\r\n\r\n      if (!wasooliData.source) {\r\n        throw new Error(\"source is required\");\r\n    }\r\n    \r\n    const wasooliAmount = parseInt(wasooliData.wasooli);\r\n    if (isNaN(wasooliAmount) || wasooliAmount <= 0) {\r\n      throw new Error(\"Invalid Kharcha amount\");\r\n    }\r\n      let payload = {\r\n        date: wasooliData.date,\r\n        source: wasooliData.source,\r\n        Wasooli: wasooliAmount,\r\n      };\r\n\r\n      let endpoint = 'http://localhost:3001/kharchay';\r\n      let method = 'POST';\r\n\r\n      // If we're editing an existing transaction, adjust the endpoint and method.\r\n      // Otherwise, ensure the consumer ID is included in the payload for new transactions.\r\n      if (editingTransaction && editingTransaction.transactionId) {\r\n        endpoint += `/${editingTransaction.transactionId}`;\r\n        method = 'PUT';\r\n      } else {\r\n        // For new transactions, include the consumerId in the payload\r\n        if (!selectedConsumerId) {\r\n          throw new Error(\"Consumer ID is missing for new Wasooli transaction\");\r\n        }\r\n        payload = { ...payload, consumerId: selectedConsumerId };\r\n      }\r\n\r\n      const response = await fetch(endpoint, {\r\n        method: method,\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Failed to save Wasooli transaction\");\r\n      }\r\n\r\n      console.log(\"Wasooli transaction saved:\", await response.json());\r\n\r\n      setIsWasooliVisible(false);\r\n      setWasooliData({ date: '', source: '', wasooli: '' });\r\n      setEditingTransaction(null);\r\n      await fetchData();\r\n\r\n    } catch (error) {\r\n      console.error(\"Error saving Wasooli transaction:\", error);\r\n      setIsAlertVisible(true);\r\n      setAlertMessage(error.toString());\r\n    }\r\n  };\r\n  const groupTransactionsByDate = (transactions) => {\r\n    const grouped = {};\r\n    transactions.forEach((transaction) => {\r\n      const yearMonth = new Date(transaction.date).toISOString().substring(0, 7); // e.g., \"2024-01\"\r\n      if (!grouped[yearMonth]) {\r\n        grouped[yearMonth] = {\r\n          transactions: [],\r\n          isVisible: false,\r\n        };\r\n      }\r\n      grouped[yearMonth].transactions.push(transaction);\r\n    });\r\n    return grouped;\r\n  };\r\n\r\n\r\n  const toggleMonthVisibility = (consumerId, monthYear) => {\r\n    setMonthVisibility(prevVisibility => ({\r\n      ...prevVisibility,\r\n      [consumerId]: {\r\n        ...prevVisibility[consumerId],\r\n        [monthYear]: !(prevVisibility[consumerId]?.[monthYear] ?? false),\r\n      },\r\n    }));\r\n  };\r\n\r\n  const renderWasooliTransactions = (consumer) => {\r\n    // Group Wasooli transactions by month and year\r\n    const transactionsByMonth = consumer.wasooliTransactions.reduce((acc, transaction) => {\r\n      const monthYear = new Date(transaction.date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n      if (!acc[monthYear]) {\r\n        acc[monthYear] = [];\r\n      }\r\n      acc[monthYear].push(transaction);\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.entries(transactionsByMonth).map(([monthYear, transactions]) => {\r\n      const isButtonVisible = monthYearButtonsVisibility[consumer.idEmployeekhata];\r\n      const isDataVisible = monthVisibility[consumer.idEmployeekhata]?.[monthYear] ?? false;\r\n\r\n      return (\r\n        <div key={monthYear}>\r\n          {isButtonVisible && (\r\n            <button className=\"toggle-visibility-button\" onClick={() => toggleMonthVisibility(consumer.idEmployeekhata, monthYear)}>\r\n              {isDataVisible ? translations[language].Hide : translations[language].Show} {monthYear}\r\n            </button>\r\n          )}\r\n          {isDataVisible && transactions.map((transaction, index) => (\r\n            <div className=\"wasooli-card-horizontal\" key={index}>\r\n              <span> {translations[language].date}  {transaction.date}</span>\r\n              <span>  {translations[language].sourceOfKharcha} {transaction.source}</span>\r\n              <span>   {translations[language].kharcha}  {transaction.Wasooli}</span>\r\n              <button className=\"updatee-button\" onClick={() => handleUpdateWasooliClick(consumer.idEmployeekhata, transaction.idkharchay)}>\r\n              {translations[language].update}\r\n              </button>\r\n              <button className=\"deletee-button\" onClick={() => handleDeleteWasooliClick(consumer.idEmployeekhata, transaction.idkharchay)}>\r\n              {translations[language].delete}\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"consumer-khata-container\">\r\n      <h1 className=\"header\"> {translations[language].employeekhata}</h1>\r\n      <button onClick={() => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English')} className=\"language-toggle\">\r\n        {language === 'English' ? 'اردو' : 'English'}\r\n      </button>\r\n      {isConfirmModalVisible && (\r\n        <ConfirmationModal onConfirm={handleConfirmDeletion} onCancel={handleCancelDeletion} />\r\n      )}\r\n      <AlertModal\r\n        isOpen={isAlertVisible}\r\n        message={alertMessage}\r\n        onClose={() => setIsAlertVisible(false)}\r\n      />\r\n      {\r\n        consumers.map((consumer) => (\r\n          <div className=\"consumer-card\" key={consumer.idEmployeekhata}>\r\n            <h2 className=\"consumer-name\">{consumer.name} {translations[language].Khata}</h2>\r\n            <p>{translations[language].date} : {consumer.Date ? consumer.Date : 'No date available'}</p>\r\n\r\n            <p>{translations[language].consumerName} : {consumer.name}</p>\r\n            <p> {translations[language].baqaya} : {consumer.baqaya}</p>\r\n            <div className=\"action-buttons\">\r\n              <button className=\"manage-buttonn\" onClick={() => handleManageClick(consumer.idEmployeekhata)}>\r\n              {translations[language].manage}\r\n              </button>\r\n              <button className=\"add-baqaya-buttonn\" onClick={() => {\r\n                setIsAddBaqayaVisible(true);\r\n                setSelectedConsumerId(consumer.idEmployeekhata); // Ensure this is set when opening the Baqaya add form\r\n              }}>\r\n               {translations[language].addBaqaya}\r\n              </button>\r\n              <button className=\"update-buttonn\" onClick={() => handleUpdateClick(consumer.idEmployeekhata)}>\r\n              {translations[language].update}\r\n              </button>\r\n\r\n              <button className=\"global-toggle-buttonnn\" onClick={() => toggleMonthYearButtonsVisibility(consumer.idEmployeekhata)}>\r\n                {monthYearButtonsVisibility[consumer.idEmployeekhata] ? translations[language].hideAll : translations[language].showAll}\r\n              </button>\r\n\r\n            </div>\r\n            {renderWasooliTransactions(consumer)}\r\n\r\n            {currentManaging === consumer.idEmployeekhata && isWasooliVisible && (\r\n              <div className=\"form-container wasooli-card\">\r\n                <h2> {translations[language].kharcha}</h2>\r\n                <button className=\"close-button\" onClick={() => setIsWasooliVisible(false)}>\r\n                  &#10005;\r\n                </button>\r\n                <span className=\"error-message\">{wasooliErrorMessages.date}</span>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date\"\r\n                  placeholder= {translations[language].date}\r\n                  value={wasooliData.date || ''}\r\n                  onChange={handleWasooliInputChange}\r\n                />\r\n                <span className=\"error-message\">{wasooliErrorMessages.source}</span>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"source\"\r\n                  placeholder= {translations[language].sourceOfKharcha}\r\n                  value={wasooliData.source || ''}\r\n                  onChange={handleWasooliInputChange}\r\n                />\r\n\r\n                <span className=\"error-message\">{wasooliErrorMessages.wasooli}</span>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"wasooli\"\r\n                  placeholder= {translations[language].kharcha}\r\n                  value={wasooliData.wasooli}\r\n                  onChange={handleWasooliInputChange}\r\n                />\r\n\r\n                <button className=\"save-button\" onClick={(e) => {\r\n                  e.preventDefault();\r\n                  handleSaveWasooliClick();\r\n                }}>\r\n                  {translations[language].saveKharcha}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n            {selectedConsumerId === consumer.idEmployeekhata && isAddBaqayaVisible && (\r\n              <div className=\"add-baqaya-card\">\r\n                <button className=\"close-button\" onClick={() => setIsAddBaqayaVisible(false)} >\r\n                  &#10005;\r\n                </button>\r\n                <span className=\"error-message\">{baqayaError}</span>\r\n                <input\r\n                  type=\"number\"\r\n                  placeholder= {translations[language].addMoreEmployeeBaqaya}\r\n                  value={baqayaToAdd}\r\n                  onChange={handleBaqayaInputChange}\r\n                />\r\n\r\n                <button className=\"save-baqaya-button\" onClick={handleSaveBaqayaClick}>\r\n                {translations[language].save}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n\r\n          </div>\r\n        ))\r\n      }\r\n\r\n      {isFormVisible && (\r\n        <div className=\"form-container\">\r\n          <button className=\"close-button\" onClick={handleCancelClick}>\r\n            &#10005;\r\n          </button>\r\n          <span className=\"error-message\">{errorMessages.date}</span>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            placeholder=\"Enter Date\"\r\n            value={consumerData.date || ''}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <span className=\"error-message\">{errorMessages.consumerName}</span>\r\n          <input\r\n            type=\"text\"\r\n            name=\"consumerName\"\r\n            placeholder=\"Employee Name\"\r\n            value={consumerData.consumerName}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <span className=\"error-message\">{errorMessages.baqaya}</span>\r\n          <input\r\n            type=\"text\"\r\n            name=\"baqaya\"\r\n            placeholder=\"Employee Baqaya\"\r\n            value={consumerData.baqaya}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <button className=\"save-button\" onClick={handleSaveClick}>\r\n          {translations[language].save}\r\n          </button>\r\n        </div>\r\n      )}\r\n      <button className=\"add-button\" onClick={() => setIsFormVisible(true)}>\r\n      {translations[language].addEmployee}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Employee;",{"ruleId":"109","severity":1,"message":"110","line":237,"column":15,"nodeType":"111","messageId":"112","endLine":237,"endColumn":24},{"ruleId":"109","severity":1,"message":"110","line":252,"column":15,"nodeType":"111","messageId":"112","endLine":252,"endColumn":24},{"ruleId":"109","severity":1,"message":"113","line":499,"column":27,"nodeType":"111","messageId":"112","endLine":499,"endColumn":32},{"ruleId":"109","severity":1,"message":"114","line":30,"column":10,"nodeType":"111","messageId":"112","endLine":30,"endColumn":21},{"ruleId":"109","severity":1,"message":"115","line":31,"column":10,"nodeType":"111","messageId":"112","endLine":31,"endColumn":22},{"ruleId":"109","severity":1,"message":"116","line":54,"column":32,"nodeType":"111","messageId":"112","endLine":54,"endColumn":55},{"ruleId":"109","severity":1,"message":"117","line":124,"column":9,"nodeType":"111","messageId":"112","endLine":124,"endColumn":26},{"ruleId":"109","severity":1,"message":"118","line":172,"column":9,"nodeType":"111","messageId":"112","endLine":172,"endColumn":20},{"ruleId":"109","severity":1,"message":"119","line":296,"column":9,"nodeType":"111","messageId":"112","endLine":296,"endColumn":29},{"ruleId":"109","severity":1,"message":"120","line":461,"column":13,"nodeType":"111","messageId":"112","endLine":461,"endColumn":23},{"ruleId":"109","severity":1,"message":"121","line":461,"column":36,"nodeType":"111","messageId":"112","endLine":461,"endColumn":41},{"ruleId":"109","severity":1,"message":"110","line":193,"column":15,"nodeType":"111","messageId":"112","endLine":193,"endColumn":24},{"ruleId":"109","severity":1,"message":"110","line":208,"column":13,"nodeType":"111","messageId":"112","endLine":208,"endColumn":22},{"ruleId":"109","severity":1,"message":"113","line":453,"column":27,"nodeType":"111","messageId":"112","endLine":453,"endColumn":32},{"ruleId":"109","severity":1,"message":"110","line":190,"column":15,"nodeType":"111","messageId":"112","endLine":190,"endColumn":24},{"ruleId":"109","severity":1,"message":"110","line":207,"column":15,"nodeType":"111","messageId":"112","endLine":207,"endColumn":24},{"ruleId":"109","severity":1,"message":"114","line":26,"column":10,"nodeType":"111","messageId":"112","endLine":26,"endColumn":21},{"ruleId":"109","severity":1,"message":"115","line":27,"column":10,"nodeType":"111","messageId":"112","endLine":27,"endColumn":22},{"ruleId":"122","severity":1,"message":"123","line":87,"column":7,"nodeType":"124","messageId":"125","endLine":87,"endColumn":12},{"ruleId":"122","severity":1,"message":"126","line":122,"column":7,"nodeType":"124","messageId":"125","endLine":122,"endColumn":13},{"ruleId":"122","severity":1,"message":"127","line":127,"column":7,"nodeType":"124","messageId":"125","endLine":127,"endColumn":12},{"ruleId":"122","severity":1,"message":"123","line":131,"column":7,"nodeType":"124","messageId":"125","endLine":131,"endColumn":12},{"ruleId":"109","severity":1,"message":"117","line":142,"column":9,"nodeType":"111","messageId":"112","endLine":142,"endColumn":26},{"ruleId":"109","severity":1,"message":"119","line":307,"column":9,"nodeType":"111","messageId":"112","endLine":307,"endColumn":29},{"ruleId":"109","severity":1,"message":"120","line":439,"column":13,"nodeType":"111","messageId":"112","endLine":439,"endColumn":23},{"ruleId":"109","severity":1,"message":"121","line":439,"column":36,"nodeType":"111","messageId":"112","endLine":439,"endColumn":41},{"ruleId":"109","severity":1,"message":"128","line":570,"column":9,"nodeType":"111","messageId":"112","endLine":570,"endColumn":32},"no-unused-vars","'monthYear' is assigned a value but never used.","Identifier","unusedVar","'total' is assigned a value but never used.","'isDataSaved' is assigned a value but never used.","'isUpdateMode' is assigned a value but never used.","'setWasooliErrorMessages' is assigned a value but never used.","'monthTranslations' is assigned a value but never used.","'CustomModal' is assigned a value but never used.","'handleAddBaqayaClick' is assigned a value but never used.","'consumerId' is assigned a value but never used.","'index' is assigned a value but never used.","no-dupe-keys","Duplicate key 'close'.","ObjectExpression","unexpected","Duplicate key 'delete'.","Duplicate key 'Khata'.","'groupTransactionsByDate' is assigned a value but never used."]