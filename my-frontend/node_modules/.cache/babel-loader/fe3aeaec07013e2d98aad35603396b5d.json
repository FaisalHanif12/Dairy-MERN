{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Faisal\\\\Desktop\\\\fullstack Projects\\\\Diary Software\\\\my-frontend\\\\src\\\\Employee.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Employee.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Employee = () => {\n  _s();\n\n  const getTodayDate = () => {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Pad single digit months with a leading 0\n\n    const day = String(today.getDate()).padStart(2, '0'); // Pad single digit days with a leading 0\n\n    return `${year}-${month}-${day}`; // Format must be YYYY-MM-DD\n  };\n\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const [consumerData, setConsumerData] = useState({\n    date: getTodayDate(),\n    consumerName: '',\n    baqaya: ''\n  });\n  const [errorMessages, setErrorMessages] = useState({\n    date: '',\n    consumerName: '',\n    baqaya: ''\n  });\n  const [isDataSaved, setIsDataSaved] = useState(false);\n  const [isUpdateMode, setIsUpdateMode] = useState(false);\n  const [isAddBaqayaVisible, setIsAddBaqayaVisible] = useState(false);\n  const [baqayaToAdd, setBaqayaToAdd] = useState('');\n  const [baqayaError, setBaqayaError] = useState('');\n  const [consumers, setConsumers] = useState([]);\n  const [selectedConsumerId, setSelectedConsumerId] = useState(null);\n  const [isConfirmModalVisible, setIsConfirmModalVisible] = useState(false);\n  const [isAlertVisible, setIsAlertVisible] = useState(false);\n  const [alertMessage, setAlertMessage] = useState('');\n  const [currentManaging, setCurrentManaging] = useState(null);\n  const [monthVisibility, setMonthVisibility] = useState({});\n  const [language, setLanguage] = useState('English');\n  const [monthYearButtonsVisibility, setMonthYearButtonsVisibility] = useState({});\n  const [isWasooliVisible, setIsWasooliVisible] = useState(false);\n  const [wasooliData, setWasooliData] = useState({\n    date: getTodayDate(),\n    source: '',\n    wasooli: ''\n  }); // Update this state to also include the wasooliId\n\n  const [deleteConfirmationData, setDeleteConfirmationData] = useState({\n    consumerId: null,\n    wasooliId: null,\n    // Add this line\n    index: null\n  });\n  const [editingTransaction, setEditingTransaction] = useState(null);\n  const [wasooliErrorMessages, setWasooliErrorMessages] = useState({\n    date: '',\n    source: '',\n    wasooli: ''\n  });\n  const translations = {\n    English: {\n      date: 'Date',\n      consumerName: 'Employee Name',\n      baqaya: 'Employee Baqaya',\n      employeekhata: \"Employee Khata\",\n      pleaseEnterDate: 'Please enter a date',\n      pleaseEnterConsumerName: 'Please enter employee name',\n      pleaseEnterBaqaya: 'Please enter employee baqaya amount',\n      save: 'Save',\n      Khata: \"Khata\",\n      addEmployee: 'Add Employee',\n      manage: 'Manage',\n      addBaqaya: 'Add Baqaya',\n      update: 'Update',\n      toggleVisibility: 'Toggle Visibility',\n      hideAll: 'Hide All',\n      showAll: 'Show All',\n      sourceOfKharcha: 'Source',\n      kharcha: 'Kharcha',\n      saveKharcha: 'Save Kharcha',\n      close: 'Close',\n      addMoreEmployeeBaqaya: 'Add more Employee Baqaya',\n      confirmAddConsumer: \"Are you sure you want to add a new consumer?\",\n      yes: \"Yes\",\n      no: \"No\",\n      deleteWasooliConfirm: \"Are you sure you want to delete this kharcha?\",\n      close: \"Close\",\n      Show: \"Show\",\n      Hide: \"Hide\",\n      delete: \"Delete\",\n      datee: \"Please enter a date\",\n      consumerNamee: \"Please enter employee name\",\n      baqayaa: \"Please enter baqaya amount\",\n      baqayaNumberr: \"Baqaya must be a number\",\n      wasooliAmountt: \"Please fill up the khatcha amount\",\n      baqayaerror: \"Please fill up the baqaya amount\"\n    },\n    Urdu: {\n      date: 'تاریخ',\n      consumerName: 'ملازم کا نام',\n      baqaya: 'ملازم کا باقیہ',\n      consumerKhata: \"صارف خاتہ \",\n      employeekhata: \"خاتہ ملازم \",\n      pleaseEnterDate: 'براہ کرم تاریخ درج کریں',\n      pleaseEnterConsumerName: 'براہ کرم ملازم کا نام درج کریں',\n      pleaseEnterBaqaya: 'براہ کرم ملازم کا باقیہ معلومات درج کریں',\n      save: 'محفوظ کریں',\n      delete: \"حذف کریں\",\n      addEmployee: 'ملازم شامل کریں',\n      manage: 'انتظام کریں',\n      addBaqaya: 'باقیہ شامل کریں',\n      update: 'اپ ڈیٹ',\n      toggleVisibility: 'دکھائیں یا چھپائیں',\n      hideAll: 'سب چھپائیں',\n      showAll: 'سب دکھائیں',\n      sourceOfKharcha: 'خرچے کا ذریعہ',\n      kharcha: 'خرچہ',\n      saveKharcha: 'خرچہ محفوظ کریں',\n      close: 'بند کریں',\n      addMoreEmployeeBaqaya: 'مزید ملازم کا باقیہ شامل کریں',\n      delete: \"حذف کریں\",\n      Khata: \"خاتہ\",\n      confirmAddConsumer: \"کیا آپ واقعی نیا صارف شامل کرنا چاہتے ہیں؟\",\n      yes: \"جی ہاں\",\n      no: \"نہیں\",\n      Khata: \"خاتہ\",\n      Show: \"دکھائیں\",\n      Hide: \"چھپائیں\",\n      deleteWasooliConfirm: \"کیا آپ واقعی اس وصولی کو حذف کرنا چاہتے ہیں؟\",\n      close: \"بند کریں\",\n      datee: \"براہ کرم تاریخ درج کریں\",\n      consumerNamee: \"براہ کرم صارف کا نام درج کریں\",\n      baqayaa: \"براہ کرم باقیہ مقدار درج کریں\",\n      baqayaNumberr: \"باقیہ کو نمبر ہونا چاہئے\",\n      wasooliAmountt: \"براہ کرم وصولی کی رقم بھریں\",\n      wasooliDatee: \"تاریخ ضروری ہے\",\n      baqayaerror: \"برائے مہربانی باقیہ رقم بھریں\"\n    }\n  };\n  const monthTranslations = {\n    January: \"جنوری\",\n    February: \"فروری\",\n    March: \"مارچ\",\n    April: \"اپریل\",\n    May: \"مئی\",\n    June: \"جون\",\n    July: \"جولائی\",\n    August: \"اگست\",\n    September: \"ستمبر\",\n    October: \"اکتوبر\",\n    November: \"نومبر\",\n    December: \"دسمبر\"\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/employeekhata');\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const consumersData = await response.json(); // Check the fetched data\n\n      console.log(\"Fetched consumers data:\", consumersData);\n      const updatedConsumersData = await Promise.all(consumersData.map(async consumer => {\n        const wasooliResponse = await fetch(`http://localhost:3001/kharchay/${consumer.idEmployeekhata}`);\n\n        if (!wasooliResponse.ok) {\n          console.log(`Failed to fetch wasooli data for consumer ID: ${consumer.idEmployeekhata}`);\n          return consumer; // Return the consumer without wasooli data if fetch fails\n        }\n\n        const wasooliData = await wasooliResponse.json();\n        return { ...consumer,\n          wasooliTransactions: wasooliData\n        };\n      })); // Check the updated consumers data\n\n      console.log(\"Updated consumers data:\", updatedConsumersData); // Update state with the processed and fetched data\n\n      setConsumers(updatedConsumersData);\n    } catch (error) {\n      console.error('Fetch error:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  useEffect(() => {\n    console.log(consumers); // Log the state to see if it includes the dates correctly\n  }, [consumers]);\n\n  const toggleMonthYearButtonsVisibility = consumerId => {\n    setMonthYearButtonsVisibility(prevState => {\n      const newState = { ...prevState,\n        [consumerId]: !prevState[consumerId]\n      };\n      return newState;\n    });\n  };\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    let newValue = value; // If the input is for baqaya, ensure it's handled as a number\n\n    if (name === 'baqaya') {\n      newValue = value !== '' ? parseInt(value, 10) : 0;\n\n      if (isNaN(newValue)) {\n        setErrorMessages(prevErrors => ({ ...prevErrors,\n          baqaya: 'Baqaya must be a number'\n        }));\n        return; // Don't set the consumer data if the input is not a number\n      }\n    }\n\n    setConsumerData(prevData => ({ ...prevData,\n      [name]: newValue\n    })); // Clear any error messages for this input\n\n    setErrorMessages(prevErrors => ({ ...prevErrors,\n      [name]: ''\n    }));\n  };\n\n  const handleSaveClick = async () => {\n    const {\n      date,\n      consumerName,\n      baqaya,\n      idEmployeekhata\n    } = consumerData;\n    console.log('Data before sending:', {\n      date,\n      consumerName,\n      baqaya,\n      idEmployeekhata\n    }); // Debug log\n\n    if (!date.trim() || !consumerName.trim() || isNaN(parseInt(baqaya)) || parseInt(baqaya) < 0) {\n      let errors = { ...(date.trim() ? null : {\n          date: \"Please enter a date\"\n        }),\n        ...(consumerName.trim() ? null : {\n          consumerName: \"Please enter consumer name\"\n        }),\n        ...(!isNaN(parseInt(baqaya)) && parseInt(baqaya) >= 0 ? null : {\n          baqaya: \"Please enter a valid non-negative baqaya amount\"\n        })\n      };\n      setErrorMessages(errors);\n      return;\n    }\n\n    const endpoint = idEmployeekhata ? `http://localhost:3001/employeekhata/${idEmployeekhata}` : 'http://localhost:3001/employeekhata';\n    const method = idEmployeekhata ? 'PUT' : 'POST';\n    const body = JSON.stringify({\n      Date: date,\n      // Ensure this key matches the server's expectation (case-sensitive)\n      name: consumerName,\n      baqaya: parseInt(baqaya)\n    });\n\n    try {\n      const response = await fetch(endpoint, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      console.log('Update successful', await response.json()); // Debug success\n\n      await fetchData();\n      resetForm();\n    } catch (error) {\n      console.error('Error during fetch:', error);\n    }\n  };\n\n  const resetForm = () => {\n    setConsumerData({\n      date: '',\n      consumerName: '',\n      baqaya: ''\n    });\n    setIsFormVisible(false);\n    setErrorMessages({});\n  };\n\n  const handleCancelClick = () => {\n    setIsFormVisible(false);\n    setIsUpdateMode(false);\n  };\n\n  const handleUpdateClick = id => {\n    const consumerToUpdate = consumers.find(consumer => consumer.idEmployeekhata === id);\n\n    if (consumerToUpdate) {\n      setConsumerData({\n        date: consumerToUpdate.Date || '',\n        consumerName: consumerToUpdate.name || '',\n        baqaya: consumerToUpdate.baqaya || '',\n        idEmployeekhata: consumerToUpdate.idEmployeekhata // Store the id in the state\n\n      });\n      setIsUpdateMode(true);\n      setIsFormVisible(true);\n    } else {\n      console.error(\"No consumer found with ID:\", id);\n    }\n  };\n\n  const handleAddBaqayaClick = () => {\n    setIsAddBaqayaVisible(true);\n  };\n\n  const handleBaqayaInputChange = e => {\n    const {\n      value\n    } = e.target;\n    setBaqayaToAdd(value);\n    setBaqayaError('');\n  };\n\n  const handleSaveBaqayaClick = async () => {\n    if (!baqayaToAdd) {\n      setBaqayaError('Please fill the Baqaya field');\n      return;\n    }\n\n    const newBaqayaAmount = parseInt(baqayaToAdd);\n\n    if (isNaN(newBaqayaAmount)) {\n      setBaqayaError('Invalid Baqaya amount');\n      return;\n    } // Find the consumer to update\n\n\n    const consumerToUpdate = consumers.find(consumer => consumer.idEmployeekhata === selectedConsumerId);\n\n    if (!consumerToUpdate) {\n      console.error(\"Consumer not found\");\n      return;\n    } // Ensure consumerToUpdate.baqaya is a number\n\n\n    const currentBaqaya = parseInt(consumerToUpdate.baqaya) || 0; // Calculate updated baqaya\n\n    const updatedBaqaya = currentBaqaya + newBaqayaAmount; // Corrected URL in the fetch request\n\n    try {\n      const response = await fetch(`http://localhost:3001/employeekhata/${selectedConsumerId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Date: consumerToUpdate.Date,\n          // Make sure to include other fields required by your server\n          name: consumerToUpdate.name,\n          baqaya: updatedBaqaya\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      } // Update local state and UI\n\n\n      const updatedConsumers = consumers.map(consumer => consumer.idEmployeekhata === selectedConsumerId ? { ...consumer,\n        baqaya: updatedBaqaya.toString()\n      } : consumer);\n      setConsumers(updatedConsumers);\n      setIsDataSaved(true);\n      setBaqayaToAdd('');\n      setIsAddBaqayaVisible(false);\n      setBaqayaError('');\n      fetchData(); // Refresh data\n    } catch (error) {\n      console.error('Error updating baqaya:', error);\n      setBaqayaError('Failed to update baqaya');\n    }\n  };\n\n  const handleUpdateWasooliClick = (consumerId, transactionId) => {\n    if (!consumerId || !transactionId) {\n      console.error('Missing consumer ID or transaction ID');\n      return;\n    }\n\n    const consumer = consumers.find(consumer => consumer.idEmployeekhata === consumerId);\n\n    if (!consumer) {\n      console.error('Consumer not found for ID:', consumerId);\n      setIsAlertVisible(true);\n      setAlertMessage(\"Error: Consumer not found\");\n      return;\n    }\n\n    console.log(\"Consumer found:\", consumer.name);\n\n    if (!consumer.wasooliTransactions || consumer.wasooliTransactions.length === 0) {\n      console.error('No transactions found for consumer:', consumer.name);\n      return;\n    }\n\n    console.log(\"Consumer's Wasooli Transactions:\", consumer.wasooliTransactions);\n    const selectedWasooliCard = consumer.wasooliTransactions.find(txn => txn.idkharchay.toString() === transactionId.toString());\n\n    if (!selectedWasooliCard) {\n      console.error('Wasooli transaction not found for ID:', transactionId, \"in consumer:\", consumer.name);\n      return;\n    }\n\n    console.log(\"Selected Wasooli Card:\", selectedWasooliCard); // Update the form data and editing transaction state asynchronously\n\n    setWasooliData({\n      date: selectedWasooliCard.date,\n      source: selectedWasooliCard.source,\n      wasooli: selectedWasooliCard.Wasooli.toString()\n    });\n    setEditingTransaction({\n      consumerId: consumerId,\n      transactionId: transactionId\n    });\n    setIsWasooliVisible(true);\n  };\n\n  const handleManageClick = consumerId => {\n    setSelectedConsumerId(consumerId);\n    setIsWasooliVisible(true);\n    setCurrentManaging(consumerId); // Reset Wasooli form data\n\n    setWasooliData({\n      date: '',\n      source: '',\n      Wasooli: ''\n    });\n  };\n\n  const handleWasooliInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setWasooliData({ ...wasooliData,\n      [name]: value\n    });\n    setWasooliErrorMessages({ ...wasooliErrorMessages,\n      [name]: ''\n    });\n  };\n\n  const handleConfirmDeletion = async () => {\n    const {\n      consumerId,\n      wasooliId,\n      index\n    } = deleteConfirmationData;\n\n    if (!wasooliId) {\n      console.error(\"Wasooli ID is missing.\");\n      return;\n    }\n\n    try {\n      // Delete the Wasooli transaction\n      const deleteResponse = await fetch(`http://localhost:3001/kharchay/${wasooliId}`, {\n        method: 'DELETE'\n      });\n\n      if (!deleteResponse.ok) {\n        const errorData = await deleteResponse.json();\n        throw new Error(errorData.message || 'Failed to delete Wasooli transaction.');\n      }\n\n      console.log(\"Wasooli transaction deleted successfully.\"); // Re-fetch updated consumer data to refresh local state\n\n      await fetchData();\n      console.log(\"Consumer data refreshed after Wasooli deletion.\"); // Reset the delete confirmation data and close the modal\n\n      setDeleteConfirmationData({\n        consumerId: null,\n        wasooliId: null,\n        index: null\n      });\n      setIsConfirmModalVisible(false);\n    } catch (error) {\n      console.error('Error during Wasooli deletion:', error);\n    }\n  };\n\n  const handleCancelDeletion = () => {\n    setIsConfirmModalVisible(false); // Hide the modal\n  };\n\n  const handleDeleteWasooliClick = (consumerId, wasooliId, index) => {\n    // Log the parameters to ensure they are being passed correctly\n    console.log(`Preparing to delete Wasooli with ID: ${wasooliId}, for Consumer ID: ${consumerId}, at Index: ${index}`); // Set the deleteConfirmationData with the correct values\n\n    setDeleteConfirmationData({\n      consumerId,\n      wasooliId,\n      index\n    });\n    setIsConfirmModalVisible(true);\n  };\n\n  const AlertModal = _ref => {\n    let {\n      isOpen,\n      message,\n      onClose\n    } = _ref;\n    if (!isOpen) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          children: \"OK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 7\n    }, this);\n  };\n\n  const ConfirmationModal = _ref2 => {\n    let {\n      onConfirm,\n      onCancel\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to delete this kharcha?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"yes-button\",\n          onClick: onConfirm,\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"no-button\",\n          onClick: onCancel,\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 5\n    }, this);\n  };\n\n  const handleSaveWasooliClick = async () => {\n    try {\n      if (!wasooliData.date) {\n        throw new Error(\"Date is required\");\n      }\n\n      if (!wasooliData.source) {\n        throw new Error(\"source is required\");\n      }\n\n      const wasooliAmount = parseInt(wasooliData.wasooli);\n\n      if (isNaN(wasooliAmount) || wasooliAmount <= 0) {\n        throw new Error(\"Invalid Kharcha amount\");\n      }\n\n      let payload = {\n        date: wasooliData.date,\n        source: wasooliData.source,\n        Wasooli: wasooliAmount\n      };\n      let endpoint = 'http://localhost:3001/kharchay';\n      let method = 'POST'; // If we're editing an existing transaction, adjust the endpoint and method.\n      // Otherwise, ensure the consumer ID is included in the payload for new transactions.\n\n      if (editingTransaction && editingTransaction.transactionId) {\n        endpoint += `/${editingTransaction.transactionId}`;\n        method = 'PUT';\n      } else {\n        // For new transactions, include the consumerId in the payload\n        if (!selectedConsumerId) {\n          throw new Error(\"Consumer ID is missing for new Wasooli transaction\");\n        }\n\n        payload = { ...payload,\n          consumerId: selectedConsumerId\n        };\n      }\n\n      const response = await fetch(endpoint, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to save Wasooli transaction\");\n      }\n\n      console.log(\"Wasooli transaction saved:\", await response.json());\n      setIsWasooliVisible(false);\n      setWasooliData({\n        date: '',\n        source: '',\n        wasooli: ''\n      });\n      setEditingTransaction(null);\n      await fetchData();\n    } catch (error) {\n      console.error(\"Error saving Wasooli transaction:\", error);\n      setIsAlertVisible(true);\n      setAlertMessage(error.toString());\n    }\n  };\n\n  const groupTransactionsByDate = transactions => {\n    const grouped = {};\n    transactions.forEach(transaction => {\n      const yearMonth = new Date(transaction.date).toISOString().substring(0, 7); // e.g., \"2024-01\"\n\n      if (!grouped[yearMonth]) {\n        grouped[yearMonth] = {\n          transactions: [],\n          isVisible: false\n        };\n      }\n\n      grouped[yearMonth].transactions.push(transaction);\n    });\n    return grouped;\n  };\n\n  const toggleMonthVisibility = (consumerId, monthYear) => {\n    setMonthVisibility(prevVisibility => {\n      var _prevVisibility$consu, _prevVisibility$consu2;\n\n      return { ...prevVisibility,\n        [consumerId]: { ...prevVisibility[consumerId],\n          [monthYear]: !((_prevVisibility$consu = (_prevVisibility$consu2 = prevVisibility[consumerId]) === null || _prevVisibility$consu2 === void 0 ? void 0 : _prevVisibility$consu2[monthYear]) !== null && _prevVisibility$consu !== void 0 ? _prevVisibility$consu : false)\n        }\n      };\n    });\n  };\n\n  const renderWasooliTransactions = consumer => {\n    // Group Wasooli transactions by month and year\n    const transactionsByMonth = consumer.wasooliTransactions.reduce((acc, transaction) => {\n      const monthYear = new Date(transaction.date).toLocaleString('default', {\n        month: 'long',\n        year: 'numeric'\n      });\n\n      if (!acc[monthYear]) {\n        acc[monthYear] = [];\n      }\n\n      acc[monthYear].push(transaction);\n      return acc;\n    }, {});\n    return Object.entries(transactionsByMonth).map(_ref3 => {\n      var _monthVisibility$cons, _monthVisibility$cons2;\n\n      let [monthYear, transactions] = _ref3;\n      const isButtonVisible = monthYearButtonsVisibility[consumer.idEmployeekhata];\n      const isDataVisible = (_monthVisibility$cons = (_monthVisibility$cons2 = monthVisibility[consumer.idEmployeekhata]) === null || _monthVisibility$cons2 === void 0 ? void 0 : _monthVisibility$cons2[monthYear]) !== null && _monthVisibility$cons !== void 0 ? _monthVisibility$cons : false;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [isButtonVisible && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"toggle-visibility-button\",\n          onClick: () => toggleMonthVisibility(consumer.idEmployeekhata, monthYear),\n          children: [isDataVisible ? translations[language].Hide : translations[language].Show, \" \", monthYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 13\n        }, this), isDataVisible && transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wasooli-card-horizontal\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", translations[language].date, \"  \", transaction.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"  \", translations[language].sourceOfKharcha, \" \", transaction.source]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"   \", translations[language].kharcha, \"  \", transaction.Wasooli]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"updatee-button\",\n            onClick: () => handleUpdateWasooliClick(consumer.idEmployeekhata, transaction.idkharchay),\n            children: translations[language].update\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"deletee-button\",\n            onClick: () => handleDeleteWasooliClick(consumer.idEmployeekhata, transaction.idkharchay),\n            children: translations[language].delete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 13\n        }, this))]\n      }, monthYear, true, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"consumer-khata-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: [\" \", translations[language].employeekhata]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English'),\n      className: \"language-toggle\",\n      children: language === 'English' ? 'اردو' : 'English'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 7\n    }, this), isConfirmModalVisible && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      onConfirm: handleConfirmDeletion,\n      onCancel: handleCancelDeletion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AlertModal, {\n      isOpen: isAlertVisible,\n      message: alertMessage,\n      onClose: () => setIsAlertVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 7\n    }, this), consumers.map(consumer => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consumer-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"consumer-name\",\n        children: [consumer.name, \" \", translations[language].Khata]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [translations[language].date, \" : \", consumer.Date ? consumer.Date : 'No date available']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [translations[language].consumerName, \" : \", consumer.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", translations[language].baqaya, \" : \", consumer.baqaya]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"manage-buttonn\",\n          onClick: () => handleManageClick(consumer.idEmployeekhata),\n          children: translations[language].manage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-baqaya-buttonn\",\n          onClick: () => {\n            setIsAddBaqayaVisible(true);\n            setSelectedConsumerId(consumer.idEmployeekhata); // Ensure this is set when opening the Baqaya add form\n          },\n          children: translations[language].addBaqaya\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"update-buttonn\",\n          onClick: () => handleUpdateClick(consumer.idEmployeekhata),\n          children: translations[language].update\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"global-toggle-buttonnn\",\n          onClick: () => toggleMonthYearButtonsVisibility(consumer.idEmployeekhata),\n          children: monthYearButtonsVisibility[consumer.idEmployeekhata] ? translations[language].hideAll : translations[language].showAll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 13\n      }, this), renderWasooliTransactions(consumer), currentManaging === consumer.idEmployeekhata && isWasooliVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container wasooli-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", translations[language].kharcha]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setIsWasooliVisible(false),\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error-message\",\n          children: wasooliErrorMessages.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"date\",\n          placeholder: translations[language].date,\n          value: wasooliData.date || '',\n          onChange: handleWasooliInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error-message\",\n          children: wasooliErrorMessages.source\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"source\",\n          placeholder: translations[language].sourceOfKharcha,\n          value: wasooliData.source || '',\n          onChange: handleWasooliInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error-message\",\n          children: wasooliErrorMessages.wasooli\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"wasooli\",\n          placeholder: translations[language].kharcha,\n          value: wasooliData.wasooli,\n          onChange: handleWasooliInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: e => {\n            e.preventDefault();\n            handleSaveWasooliClick();\n          },\n          children: translations[language].saveKharcha\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 15\n      }, this), selectedConsumerId === consumer.idEmployeekhata && isAddBaqayaVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-baqaya-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setIsAddBaqayaVisible(false),\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error-message\",\n          children: baqayaError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: translations[language].addMoreEmployeeBaqaya,\n          value: baqayaToAdd,\n          onChange: handleBaqayaInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-baqaya-button\",\n          onClick: handleSaveBaqayaClick,\n          children: translations[language].save\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 15\n      }, this)]\n    }, consumer.idEmployeekhata, true, {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 11\n    }, this)), isFormVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: handleCancelClick,\n        children: \"\\u2715\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-message\",\n        children: errorMessages.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"date\",\n        placeholder: \"Enter Date\",\n        value: consumerData.date || '',\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-message\",\n        children: errorMessages.consumerName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"consumerName\",\n        placeholder: \"Employee Name\",\n        value: consumerData.consumerName,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-message\",\n        children: errorMessages.baqaya\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"baqaya\",\n        placeholder: \"Employee Baqaya\",\n        value: consumerData.baqaya,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: handleSaveClick,\n        children: translations[language].save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 745,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-button\",\n      onClick: () => setIsFormVisible(true),\n      children: translations[language].addEmployee\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 781,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 637,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Employee, \"eFuyiszJqRXLTR5wJ2lAMJ4xqTE=\");\n\n_c = Employee;\nexport default Employee;\n\nvar _c;\n\n$RefreshReg$(_c, \"Employee\");","map":{"version":3,"sources":["C:/Users/Faisal/Desktop/fullstack Projects/Diary Software/my-frontend/src/Employee.jsx"],"names":["React","useState","useEffect","Employee","getTodayDate","today","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","isFormVisible","setIsFormVisible","consumerData","setConsumerData","date","consumerName","baqaya","errorMessages","setErrorMessages","isDataSaved","setIsDataSaved","isUpdateMode","setIsUpdateMode","isAddBaqayaVisible","setIsAddBaqayaVisible","baqayaToAdd","setBaqayaToAdd","baqayaError","setBaqayaError","consumers","setConsumers","selectedConsumerId","setSelectedConsumerId","isConfirmModalVisible","setIsConfirmModalVisible","isAlertVisible","setIsAlertVisible","alertMessage","setAlertMessage","currentManaging","setCurrentManaging","monthVisibility","setMonthVisibility","language","setLanguage","monthYearButtonsVisibility","setMonthYearButtonsVisibility","isWasooliVisible","setIsWasooliVisible","wasooliData","setWasooliData","source","wasooli","deleteConfirmationData","setDeleteConfirmationData","consumerId","wasooliId","index","editingTransaction","setEditingTransaction","wasooliErrorMessages","setWasooliErrorMessages","translations","English","employeekhata","pleaseEnterDate","pleaseEnterConsumerName","pleaseEnterBaqaya","save","Khata","addEmployee","manage","addBaqaya","update","toggleVisibility","hideAll","showAll","sourceOfKharcha","kharcha","saveKharcha","close","addMoreEmployeeBaqaya","confirmAddConsumer","yes","no","deleteWasooliConfirm","Show","Hide","delete","datee","consumerNamee","baqayaa","baqayaNumberr","wasooliAmountt","baqayaerror","Urdu","consumerKhata","wasooliDatee","monthTranslations","January","February","March","April","May","June","July","August","September","October","November","December","fetchData","response","fetch","ok","Error","status","consumersData","json","console","log","updatedConsumersData","Promise","all","map","consumer","wasooliResponse","idEmployeekhata","wasooliTransactions","error","toggleMonthYearButtonsVisibility","prevState","newState","handleInputChange","e","name","value","target","newValue","parseInt","isNaN","prevErrors","prevData","handleSaveClick","trim","errors","endpoint","method","body","JSON","stringify","headers","resetForm","handleCancelClick","handleUpdateClick","id","consumerToUpdate","find","handleAddBaqayaClick","handleBaqayaInputChange","handleSaveBaqayaClick","newBaqayaAmount","currentBaqaya","updatedBaqaya","updatedConsumers","toString","handleUpdateWasooliClick","transactionId","length","selectedWasooliCard","txn","idkharchay","Wasooli","handleManageClick","handleWasooliInputChange","handleConfirmDeletion","deleteResponse","errorData","message","handleCancelDeletion","handleDeleteWasooliClick","AlertModal","isOpen","onClose","ConfirmationModal","onConfirm","onCancel","handleSaveWasooliClick","wasooliAmount","payload","groupTransactionsByDate","transactions","grouped","forEach","transaction","yearMonth","toISOString","substring","isVisible","push","toggleMonthVisibility","monthYear","prevVisibility","renderWasooliTransactions","transactionsByMonth","reduce","acc","toLocaleString","Object","entries","isButtonVisible","isDataVisible","lang","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,gBAAP;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAErB,QAAMC,YAAY,GAAG,MAAM;AACzB,UAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,UAAMC,IAAI,GAAGF,KAAK,CAACG,WAAN,EAAb;AACA,UAAMC,KAAK,GAAGC,MAAM,CAACL,KAAK,CAACM,QAAN,KAAmB,CAApB,CAAN,CAA6BC,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAd,CAHyB,CAGoC;;AAC7D,UAAMC,GAAG,GAAGH,MAAM,CAACL,KAAK,CAACS,OAAN,EAAD,CAAN,CAAwBF,QAAxB,CAAiC,CAAjC,EAAoC,GAApC,CAAZ,CAJyB,CAI6B;;AACtD,WAAQ,GAAEL,IAAK,IAAGE,KAAM,IAAGI,GAAI,EAA/B,CALyB,CAKS;AACnC,GAND;;AASA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC;AAC/CkB,IAAAA,IAAI,EAAEf,YAAY,EAD6B;AAE/CgB,IAAAA,YAAY,EAAE,EAFiC;AAG/CC,IAAAA,MAAM,EAAE;AAHuC,GAAD,CAAhD;AAKA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAAC;AACjDkB,IAAAA,IAAI,EAAE,EAD2C;AAEjDC,IAAAA,YAAY,EAAE,EAFmC;AAGjDC,IAAAA,MAAM,EAAE;AAHyC,GAAD,CAAlD;AAKA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCxB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACyB,YAAD,EAAeC,eAAf,IAAkC1B,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAAC2B,kBAAD,EAAqBC,qBAArB,IAA8C5B,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAAC6B,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC+B,WAAD,EAAcC,cAAd,IAAgChC,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACiC,SAAD,EAAYC,YAAZ,IAA4BlC,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACmC,kBAAD,EAAqBC,qBAArB,IAA8CpC,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAACqC,qBAAD,EAAwBC,wBAAxB,IAAoDtC,QAAQ,CAAC,KAAD,CAAlE;AACA,QAAM,CAACuC,cAAD,EAAiBC,iBAAjB,IAAsCxC,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACyC,YAAD,EAAeC,eAAf,IAAkC1C,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAAC2C,eAAD,EAAkBC,kBAAlB,IAAwC5C,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAAC6C,eAAD,EAAkBC,kBAAlB,IAAwC9C,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAAC+C,QAAD,EAAWC,WAAX,IAA0BhD,QAAQ,CAAC,SAAD,CAAxC;AACA,QAAM,CAACiD,0BAAD,EAA6BC,6BAA7B,IAA8DlD,QAAQ,CAAC,EAAD,CAA5E;AACA,QAAM,CAACmD,gBAAD,EAAmBC,mBAAnB,IAA0CpD,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACqD,WAAD,EAAcC,cAAd,IAAgCtD,QAAQ,CAAC;AAC7CkB,IAAAA,IAAI,EAAEf,YAAY,EAD2B;AAE7CoD,IAAAA,MAAM,EAAE,EAFqC;AAG7CC,IAAAA,OAAO,EAAE;AAHoC,GAAD,CAA9C,CArCqB,CA0CrB;;AACA,QAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsD1D,QAAQ,CAAC;AACnE2D,IAAAA,UAAU,EAAE,IADuD;AAEnEC,IAAAA,SAAS,EAAE,IAFwD;AAElD;AACjBC,IAAAA,KAAK,EAAE;AAH4D,GAAD,CAApE;AAKA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8C/D,QAAQ,CAAC,IAAD,CAA5D;AAEA,QAAM,CAACgE,oBAAD,EAAuBC,uBAAvB,IAAkDjE,QAAQ,CAAC;AAC/DkB,IAAAA,IAAI,EAAE,EADyD;AAE/DqC,IAAAA,MAAM,EAAE,EAFuD;AAG/DC,IAAAA,OAAO,EAAE;AAHsD,GAAD,CAAhE;AAMA,QAAMU,YAAY,GAAG;AACnBC,IAAAA,OAAO,EAAE;AACPjD,MAAAA,IAAI,EAAE,MADC;AAEPC,MAAAA,YAAY,EAAE,eAFP;AAGPC,MAAAA,MAAM,EAAE,iBAHD;AAIPgD,MAAAA,aAAa,EAAE,gBAJR;AAKPC,MAAAA,eAAe,EAAE,qBALV;AAMPC,MAAAA,uBAAuB,EAAE,4BANlB;AAOPC,MAAAA,iBAAiB,EAAE,qCAPZ;AAQPC,MAAAA,IAAI,EAAE,MARC;AASPC,MAAAA,KAAK,EAAE,OATA;AAUPC,MAAAA,WAAW,EAAE,cAVN;AAWPC,MAAAA,MAAM,EAAE,QAXD;AAYPC,MAAAA,SAAS,EAAE,YAZJ;AAaPC,MAAAA,MAAM,EAAE,QAbD;AAcPC,MAAAA,gBAAgB,EAAE,mBAdX;AAePC,MAAAA,OAAO,EAAE,UAfF;AAgBPC,MAAAA,OAAO,EAAE,UAhBF;AAiBPC,MAAAA,eAAe,EAAE,QAjBV;AAkBPC,MAAAA,OAAO,EAAE,SAlBF;AAmBPC,MAAAA,WAAW,EAAE,cAnBN;AAoBPC,MAAAA,KAAK,EAAE,OApBA;AAqBPC,MAAAA,qBAAqB,EAAE,0BArBhB;AAsBPC,MAAAA,kBAAkB,EAAE,8CAtBb;AAuBPC,MAAAA,GAAG,EAAE,KAvBE;AAwBPC,MAAAA,EAAE,EAAE,IAxBG;AAyBPC,MAAAA,oBAAoB,EAAE,+CAzBf;AA0BPL,MAAAA,KAAK,EAAE,OA1BA;AA2BPM,MAAAA,IAAI,EAAE,MA3BC;AA4BPC,MAAAA,IAAI,EAAE,MA5BC;AA6BPC,MAAAA,MAAM,EAAE,QA7BD;AA8BPC,MAAAA,KAAK,EAAE,qBA9BA;AA+BPC,MAAAA,aAAa,EAAE,4BA/BR;AAgCPC,MAAAA,OAAO,EAAE,4BAhCF;AAiCPC,MAAAA,aAAa,EAAE,yBAjCR;AAkCPC,MAAAA,cAAc,EAAE,mCAlCT;AAmCPC,MAAAA,WAAW,EAAE;AAnCN,KADU;AAuCnBC,IAAAA,IAAI,EAAE;AACJjF,MAAAA,IAAI,EAAE,OADF;AAEJC,MAAAA,YAAY,EAAE,cAFV;AAGJC,MAAAA,MAAM,EAAE,gBAHJ;AAIJgF,MAAAA,aAAa,EAAE,YAJX;AAKJhC,MAAAA,aAAa,EAAE,aALX;AAMJC,MAAAA,eAAe,EAAE,yBANb;AAOJC,MAAAA,uBAAuB,EAAE,gCAPrB;AAQJC,MAAAA,iBAAiB,EAAE,0CARf;AASJC,MAAAA,IAAI,EAAE,YATF;AAUJoB,MAAAA,MAAM,EAAE,UAVJ;AAWJlB,MAAAA,WAAW,EAAE,iBAXT;AAYJC,MAAAA,MAAM,EAAE,aAZJ;AAaJC,MAAAA,SAAS,EAAE,iBAbP;AAcJC,MAAAA,MAAM,EAAE,QAdJ;AAeJC,MAAAA,gBAAgB,EAAE,oBAfd;AAgBJC,MAAAA,OAAO,EAAE,YAhBL;AAiBJC,MAAAA,OAAO,EAAE,YAjBL;AAkBJC,MAAAA,eAAe,EAAE,eAlBb;AAmBJC,MAAAA,OAAO,EAAE,MAnBL;AAoBJC,MAAAA,WAAW,EAAE,iBApBT;AAqBJC,MAAAA,KAAK,EAAE,UArBH;AAsBJC,MAAAA,qBAAqB,EAAE,+BAtBnB;AAuBJO,MAAAA,MAAM,EAAE,UAvBJ;AAwBJnB,MAAAA,KAAK,EAAE,MAxBH;AAyBJa,MAAAA,kBAAkB,EAAE,4CAzBhB;AA0BJC,MAAAA,GAAG,EAAE,QA1BD;AA2BJC,MAAAA,EAAE,EAAE,MA3BA;AA4BJf,MAAAA,KAAK,EAAE,MA5BH;AA6BJiB,MAAAA,IAAI,EAAE,SA7BF;AA8BJC,MAAAA,IAAI,EAAE,SA9BF;AA+BJF,MAAAA,oBAAoB,EAAE,8CA/BlB;AAgCJL,MAAAA,KAAK,EAAE,UAhCH;AAiCJS,MAAAA,KAAK,EAAE,yBAjCH;AAkCJC,MAAAA,aAAa,EAAE,+BAlCX;AAmCJC,MAAAA,OAAO,EAAE,+BAnCL;AAoCJC,MAAAA,aAAa,EAAE,0BApCX;AAqCJC,MAAAA,cAAc,EAAE,6BArCZ;AAsCJI,MAAAA,YAAY,EAAE,gBAtCV;AAuCJH,MAAAA,WAAW,EAAE;AAvCT;AAvCa,GAArB;AAkFA,QAAMI,iBAAiB,GAAG;AACxBC,IAAAA,OAAO,EAAE,OADe;AAExBC,IAAAA,QAAQ,EAAE,OAFc;AAGxBC,IAAAA,KAAK,EAAE,MAHiB;AAIxBC,IAAAA,KAAK,EAAE,OAJiB;AAKxBC,IAAAA,GAAG,EAAE,KALmB;AAMxBC,IAAAA,IAAI,EAAE,KANkB;AAOxBC,IAAAA,IAAI,EAAE,QAPkB;AAQxBC,IAAAA,MAAM,EAAE,MARgB;AASxBC,IAAAA,SAAS,EAAE,OATa;AAUxBC,IAAAA,OAAO,EAAE,QAVe;AAWxBC,IAAAA,QAAQ,EAAE,OAXc;AAYxBC,IAAAA,QAAQ,EAAE;AAZc,GAA1B;;AAeA,QAAMC,SAAS,GAAG,YAAY;AAC5B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAD,CAA5B;;AACA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAW,uBAAsBH,QAAQ,CAACI,MAAO,EAAjD,CAAN;AACD;;AACD,YAAMC,aAAa,GAAG,MAAML,QAAQ,CAACM,IAAT,EAA5B,CALE,CAOF;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCH,aAAvC;AAEA,YAAMI,oBAAoB,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYN,aAAa,CAACO,GAAd,CAAkB,MAAOC,QAAP,IAAoB;AACnF,cAAMC,eAAe,GAAG,MAAMb,KAAK,CAAE,kCAAiCY,QAAQ,CAACE,eAAgB,EAA5D,CAAnC;;AACA,YAAI,CAACD,eAAe,CAACZ,EAArB,EAAyB;AACvBK,UAAAA,OAAO,CAACC,GAAR,CAAa,iDAAgDK,QAAQ,CAACE,eAAgB,EAAtF;AACA,iBAAOF,QAAP,CAFuB,CAEN;AAClB;;AACD,cAAM5E,WAAW,GAAG,MAAM6E,eAAe,CAACR,IAAhB,EAA1B;AACA,eAAO,EAAE,GAAGO,QAAL;AAAeG,UAAAA,mBAAmB,EAAE/E;AAApC,SAAP;AACD,OAR8C,CAAZ,CAAnC,CAVE,CAoBF;;AACAsE,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCC,oBAAvC,EArBE,CAuBF;;AACA3F,MAAAA,YAAY,CAAC2F,oBAAD,CAAZ;AACD,KAzBD,CAyBE,OAAOQ,KAAP,EAAc;AACdV,MAAAA,OAAO,CAACU,KAAR,CAAc,cAAd,EAA8BA,KAA9B;AACD;AACF,GA7BD;;AAgCApI,EAAAA,SAAS,CAAC,MAAM;AACdkH,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIAlH,EAAAA,SAAS,CAAC,MAAM;AACd0H,IAAAA,OAAO,CAACC,GAAR,CAAY3F,SAAZ,EADc,CACU;AACzB,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;;AAIA,QAAMqG,gCAAgC,GAAI3E,UAAD,IAAgB;AAEvDT,IAAAA,6BAA6B,CAACqF,SAAS,IAAI;AACzC,YAAMC,QAAQ,GAAG,EACf,GAAGD,SADY;AAEf,SAAC5E,UAAD,GAAc,CAAC4E,SAAS,CAAC5E,UAAD;AAFT,OAAjB;AAKA,aAAO6E,QAAP;AACD,KAP4B,CAA7B;AAQD,GAVD;;AAYA,QAAMC,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACA,QAAIC,QAAQ,GAAGF,KAAf,CAF+B,CAI/B;;AACA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACrBG,MAAAA,QAAQ,GAAGF,KAAK,KAAK,EAAV,GAAeG,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAvB,GAAqC,CAAhD;;AACA,UAAII,KAAK,CAACF,QAAD,CAAT,EAAqB;AACnBxH,QAAAA,gBAAgB,CAAE2H,UAAD,KAAiB,EAChC,GAAGA,UAD6B;AAEhC7H,UAAAA,MAAM,EAAE;AAFwB,SAAjB,CAAD,CAAhB;AAIA,eALmB,CAKX;AACT;AACF;;AAEDH,IAAAA,eAAe,CAAEiI,QAAD,KAAe,EAC7B,GAAGA,QAD0B;AAE7B,OAACP,IAAD,GAAQG;AAFqB,KAAf,CAAD,CAAf,CAhB+B,CAqB/B;;AACAxH,IAAAA,gBAAgB,CAAE2H,UAAD,KAAiB,EAChC,GAAGA,UAD6B;AAEhC,OAACN,IAAD,GAAQ;AAFwB,KAAjB,CAAD,CAAhB;AAID,GA1BD;;AA4BA,QAAMQ,eAAe,GAAG,YAAY;AAClC,UAAM;AAAEjI,MAAAA,IAAF;AAAQC,MAAAA,YAAR;AAAsBC,MAAAA,MAAtB;AAA8B+G,MAAAA;AAA9B,QAAkDnH,YAAxD;AACA2G,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC;AAAE1G,MAAAA,IAAF;AAAQC,MAAAA,YAAR;AAAsBC,MAAAA,MAAtB;AAA8B+G,MAAAA;AAA9B,KAApC,EAFkC,CAEoD;;AAEtF,QAAI,CAACjH,IAAI,CAACkI,IAAL,EAAD,IAAgB,CAACjI,YAAY,CAACiI,IAAb,EAAjB,IAAwCJ,KAAK,CAACD,QAAQ,CAAC3H,MAAD,CAAT,CAA7C,IAAmE2H,QAAQ,CAAC3H,MAAD,CAAR,GAAmB,CAA1F,EAA6F;AAC3F,UAAIiI,MAAM,GAAG,EACX,IAAInI,IAAI,CAACkI,IAAL,KAAc,IAAd,GAAqB;AAAElI,UAAAA,IAAI,EAAE;AAAR,SAAzB,CADW;AAEX,YAAIC,YAAY,CAACiI,IAAb,KAAsB,IAAtB,GAA6B;AAAEjI,UAAAA,YAAY,EAAE;AAAhB,SAAjC,CAFW;AAGX,YAAI,CAAC6H,KAAK,CAACD,QAAQ,CAAC3H,MAAD,CAAT,CAAN,IAA4B2H,QAAQ,CAAC3H,MAAD,CAAR,IAAoB,CAAhD,GAAoD,IAApD,GAA2D;AAAEA,UAAAA,MAAM,EAAE;AAAV,SAA/D;AAHW,OAAb;AAKAE,MAAAA,gBAAgB,CAAC+H,MAAD,CAAhB;AACA;AACD;;AAED,UAAMC,QAAQ,GAAGnB,eAAe,GAAI,uCAAsCA,eAAgB,EAA1D,GAA8D,qCAA9F;AACA,UAAMoB,MAAM,GAAGpB,eAAe,GAAG,KAAH,GAAW,MAAzC;AACA,UAAMqB,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC1BrJ,MAAAA,IAAI,EAAEa,IADoB;AACb;AACbyH,MAAAA,IAAI,EAAExH,YAFoB;AAG1BC,MAAAA,MAAM,EAAE2H,QAAQ,CAAC3H,MAAD;AAHU,KAAf,CAAb;;AAMA,QAAI;AACF,YAAMgG,QAAQ,GAAG,MAAMC,KAAK,CAACiC,QAAD,EAAW;AACrCC,QAAAA,MADqC;AAErCI,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAF4B;AAGrCH,QAAAA,IAAI,EAAEA;AAH+B,OAAX,CAA5B;AAMA,UAAI,CAACpC,QAAQ,CAACE,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAW,uBAAsBH,QAAQ,CAACI,MAAO,EAAjD,CAAN;AAClBG,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,MAAMR,QAAQ,CAACM,IAAT,EAAvC,EARE,CAQuD;;AACzD,YAAMP,SAAS,EAAf;AACAyC,MAAAA,SAAS;AACV,KAXD,CAWE,OAAOvB,KAAP,EAAc;AACdV,MAAAA,OAAO,CAACU,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACD;AACJ,GApCC;;AAuCA,QAAMuB,SAAS,GAAG,MAAM;AACtB3I,IAAAA,eAAe,CAAC;AACdC,MAAAA,IAAI,EAAE,EADQ;AAEdC,MAAAA,YAAY,EAAE,EAFA;AAGdC,MAAAA,MAAM,EAAE;AAHM,KAAD,CAAf;AAKAL,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAO,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,GARD;;AAUA,QAAMuI,iBAAiB,GAAG,MAAM;AAC9B9I,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAW,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAHD;;AAKA,QAAMoI,iBAAiB,GAAIC,EAAD,IAAQ;AAChC,UAAMC,gBAAgB,GAAG/H,SAAS,CAACgI,IAAV,CAAehC,QAAQ,IAAIA,QAAQ,CAACE,eAAT,KAA6B4B,EAAxD,CAAzB;;AACA,QAAIC,gBAAJ,EAAsB;AACpB/I,MAAAA,eAAe,CAAC;AACdC,QAAAA,IAAI,EAAE8I,gBAAgB,CAAC3J,IAAjB,IAAyB,EADjB;AAEdc,QAAAA,YAAY,EAAE6I,gBAAgB,CAACrB,IAAjB,IAAyB,EAFzB;AAGdvH,QAAAA,MAAM,EAAE4I,gBAAgB,CAAC5I,MAAjB,IAA2B,EAHrB;AAId+G,QAAAA,eAAe,EAAE6B,gBAAgB,CAAC7B,eAJpB,CAIqC;;AAJrC,OAAD,CAAf;AAMAzG,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAX,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KATD,MASO;AACL4G,MAAAA,OAAO,CAACU,KAAR,CAAc,4BAAd,EAA4C0B,EAA5C;AACD;AACF,GAdD;;AAgBA,QAAMG,oBAAoB,GAAG,MAAM;AACjCtI,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,GAFD;;AAIA,QAAMuI,uBAAuB,GAAIzB,CAAD,IAAO;AACrC,UAAM;AAAEE,MAAAA;AAAF,QAAYF,CAAC,CAACG,MAApB;AACA/G,IAAAA,cAAc,CAAC8G,KAAD,CAAd;AACA5G,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAJD;;AAMA,QAAMoI,qBAAqB,GAAG,YAAY;AACxC,QAAI,CAACvI,WAAL,EAAkB;AAChBG,MAAAA,cAAc,CAAC,8BAAD,CAAd;AACA;AACD;;AACD,UAAMqI,eAAe,GAAGtB,QAAQ,CAAClH,WAAD,CAAhC;;AACA,QAAImH,KAAK,CAACqB,eAAD,CAAT,EAA4B;AAC1BrI,MAAAA,cAAc,CAAC,uBAAD,CAAd;AACA;AACD,KATuC,CAWxC;;;AACA,UAAMgI,gBAAgB,GAAG/H,SAAS,CAACgI,IAAV,CAAehC,QAAQ,IAAIA,QAAQ,CAACE,eAAT,KAA6BhG,kBAAxD,CAAzB;;AACA,QAAI,CAAC6H,gBAAL,EAAuB;AACrBrC,MAAAA,OAAO,CAACU,KAAR,CAAc,oBAAd;AACA;AACD,KAhBuC,CAkBxC;;;AACA,UAAMiC,aAAa,GAAGvB,QAAQ,CAACiB,gBAAgB,CAAC5I,MAAlB,CAAR,IAAqC,CAA3D,CAnBwC,CAqBxC;;AACA,UAAMmJ,aAAa,GAAGD,aAAa,GAAGD,eAAtC,CAtBwC,CAwBxC;;AACA,QAAI;AACF,YAAMjD,QAAQ,GAAG,MAAMC,KAAK,CAAE,uCAAsClF,kBAAmB,EAA3D,EAA8D;AACxFoH,QAAAA,MAAM,EAAE,KADgF;AAExFI,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAF+E;AAGxFH,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBrJ,UAAAA,IAAI,EAAE2J,gBAAgB,CAAC3J,IADJ;AACU;AAC7BsI,UAAAA,IAAI,EAAEqB,gBAAgB,CAACrB,IAFJ;AAGnBvH,UAAAA,MAAM,EAAEmJ;AAHW,SAAf;AAHkF,OAA9D,CAA5B;;AAUA,UAAI,CAACnD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAW,uBAAsBH,QAAQ,CAACI,MAAO,EAAjD,CAAN;AACD,OAbC,CAeF;;;AACA,YAAMgD,gBAAgB,GAAGvI,SAAS,CAAC+F,GAAV,CAAcC,QAAQ,IAC7CA,QAAQ,CAACE,eAAT,KAA6BhG,kBAA7B,GAAkD,EAChD,GAAG8F,QAD6C;AAEhD7G,QAAAA,MAAM,EAAEmJ,aAAa,CAACE,QAAd;AAFwC,OAAlD,GAGIxC,QAJmB,CAAzB;AAOA/F,MAAAA,YAAY,CAACsI,gBAAD,CAAZ;AACAhJ,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAM,MAAAA,cAAc,CAAC,EAAD,CAAd;AACAF,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAI,MAAAA,cAAc,CAAC,EAAD,CAAd;AACAmF,MAAAA,SAAS,GA5BP,CA4BW;AACd,KA7BD,CA6BE,OAAOkB,KAAP,EAAc;AACdV,MAAAA,OAAO,CAACU,KAAR,CAAc,wBAAd,EAAwCA,KAAxC;AACArG,MAAAA,cAAc,CAAC,yBAAD,CAAd;AACD;AACF,GA1DD;;AA4DA,QAAM0I,wBAAwB,GAAG,CAAC/G,UAAD,EAAagH,aAAb,KAA+B;AAC9D,QAAI,CAAChH,UAAD,IAAe,CAACgH,aAApB,EAAmC;AACjChD,MAAAA,OAAO,CAACU,KAAR,CAAc,uCAAd;AACA;AACD;;AAED,UAAMJ,QAAQ,GAAGhG,SAAS,CAACgI,IAAV,CAAehC,QAAQ,IAAIA,QAAQ,CAACE,eAAT,KAA6BxE,UAAxD,CAAjB;;AACA,QAAI,CAACsE,QAAL,EAAe;AACbN,MAAAA,OAAO,CAACU,KAAR,CAAc,4BAAd,EAA4C1E,UAA5C;AACAnB,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAE,MAAAA,eAAe,CAAC,2BAAD,CAAf;AACA;AACD;;AACDiF,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BK,QAAQ,CAACU,IAAxC;;AAEA,QAAI,CAACV,QAAQ,CAACG,mBAAV,IAAiCH,QAAQ,CAACG,mBAAT,CAA6BwC,MAA7B,KAAwC,CAA7E,EAAgF;AAC9EjD,MAAAA,OAAO,CAACU,KAAR,CAAc,qCAAd,EAAqDJ,QAAQ,CAACU,IAA9D;AACA;AACD;;AAEDhB,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDK,QAAQ,CAACG,mBAAzD;AAEA,UAAMyC,mBAAmB,GAAG5C,QAAQ,CAACG,mBAAT,CAA6B6B,IAA7B,CAAkCa,GAAG,IAAIA,GAAG,CAACC,UAAJ,CAAeN,QAAf,OAA8BE,aAAa,CAACF,QAAd,EAAvE,CAA5B;;AACA,QAAI,CAACI,mBAAL,EAA0B;AACxBlD,MAAAA,OAAO,CAACU,KAAR,CAAc,uCAAd,EAAuDsC,aAAvD,EAAsE,cAAtE,EAAsF1C,QAAQ,CAACU,IAA/F;AACA;AACD;;AACDhB,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCiD,mBAAtC,EA3B8D,CA6B9D;;AACAvH,IAAAA,cAAc,CAAC;AACbpC,MAAAA,IAAI,EAAE2J,mBAAmB,CAAC3J,IADb;AAEbqC,MAAAA,MAAM,EAAEsH,mBAAmB,CAACtH,MAFf;AAGbC,MAAAA,OAAO,EAAEqH,mBAAmB,CAACG,OAApB,CAA4BP,QAA5B;AAHI,KAAD,CAAd;AAMA1G,IAAAA,qBAAqB,CAAC;AACpBJ,MAAAA,UAAU,EAAEA,UADQ;AAEpBgH,MAAAA,aAAa,EAAEA;AAFK,KAAD,CAArB;AAKAvH,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,GA1CD;;AA8CA,QAAM6H,iBAAiB,GAAItH,UAAD,IAAgB;AACxCvB,IAAAA,qBAAqB,CAACuB,UAAD,CAArB;AACAP,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAR,IAAAA,kBAAkB,CAACe,UAAD,CAAlB,CAHwC,CAIxC;;AACAL,IAAAA,cAAc,CAAC;AAAEpC,MAAAA,IAAI,EAAE,EAAR;AAAYqC,MAAAA,MAAM,EAAE,EAApB;AAAwByH,MAAAA,OAAO,EAAE;AAAjC,KAAD,CAAd;AACD,GAND;;AAQA,QAAME,wBAAwB,GAAIxC,CAAD,IAAO;AACtC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAvF,IAAAA,cAAc,CAAC,EAAE,GAAGD,WAAL;AAAkB,OAACsF,IAAD,GAAQC;AAA1B,KAAD,CAAd;AACA3E,IAAAA,uBAAuB,CAAC,EAAE,GAAGD,oBAAL;AAA2B,OAAC2E,IAAD,GAAQ;AAAnC,KAAD,CAAvB;AACD,GAJD;;AAOA,QAAMwC,qBAAqB,GAAG,YAAY;AACxC,UAAM;AAAExH,MAAAA,UAAF;AAAcC,MAAAA,SAAd;AAAyBC,MAAAA;AAAzB,QAAmCJ,sBAAzC;;AAEA,QAAI,CAACG,SAAL,EAAgB;AACd+D,MAAAA,OAAO,CAACU,KAAR,CAAc,wBAAd;AACA;AACD;;AAED,QAAI;AACF;AACA,YAAM+C,cAAc,GAAG,MAAM/D,KAAK,CAAE,kCAAiCzD,SAAU,EAA7C,EAAgD;AAAE2F,QAAAA,MAAM,EAAE;AAAV,OAAhD,CAAlC;;AAEA,UAAI,CAAC6B,cAAc,CAAC9D,EAApB,EAAwB;AACtB,cAAM+D,SAAS,GAAG,MAAMD,cAAc,CAAC1D,IAAf,EAAxB;AACA,cAAM,IAAIH,KAAJ,CAAU8D,SAAS,CAACC,OAAV,IAAqB,uCAA/B,CAAN;AACD;;AAED3D,MAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EATE,CAWF;;AACA,YAAMT,SAAS,EAAf;AAEAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ,EAdE,CAgBF;;AACAlE,MAAAA,yBAAyB,CAAC;AAAEC,QAAAA,UAAU,EAAE,IAAd;AAAoBC,QAAAA,SAAS,EAAE,IAA/B;AAAqCC,QAAAA,KAAK,EAAE;AAA5C,OAAD,CAAzB;AACAvB,MAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACD,KAnBD,CAmBE,OAAO+F,KAAP,EAAc;AACdV,MAAAA,OAAO,CAACU,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;AACD;AACF,GA9BD;;AAiCA,QAAMkD,oBAAoB,GAAG,MAAM;AACjCjJ,IAAAA,wBAAwB,CAAC,KAAD,CAAxB,CADiC,CACA;AAClC,GAFD;;AAIA,QAAMkJ,wBAAwB,GAAG,CAAC7H,UAAD,EAAaC,SAAb,EAAwBC,KAAxB,KAAkC;AACjE;AACA8D,IAAAA,OAAO,CAACC,GAAR,CAAa,wCAAuChE,SAAU,sBAAqBD,UAAW,eAAcE,KAAM,EAAlH,EAFiE,CAKjE;;AACAH,IAAAA,yBAAyB,CAAC;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,SAAd;AAAyBC,MAAAA;AAAzB,KAAD,CAAzB;AACAvB,IAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD,GARD;;AAUA,QAAMmJ,UAAU,GAAG,QAAkC;AAAA,QAAjC;AAAEC,MAAAA,MAAF;AAAUJ,MAAAA,OAAV;AAAmBK,MAAAA;AAAnB,KAAiC;AACnD,QAAI,CAACD,MAAL,EAAa,OAAO,IAAP;AAEb,wBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACE;AAAA,oBAAIJ;AAAJ;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAEK,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GAXD;;AAaA,QAAMC,iBAAiB,GAAG;AAAA,QAAC;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAD;AAAA,wBACxB;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,SAAS,EAAC,YAAlB;AAA+B,UAAA,OAAO,EAAED,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,SAAS,EAAC,WAAlB;AAA8B,UAAA,OAAO,EAAEC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADwB;AAAA,GAA1B;;AAUA,QAAMC,sBAAsB,GAAG,YAAY;AACzC,QAAI;AAGF,UAAI,CAAC1I,WAAW,CAACnC,IAAjB,EAAuB;AACrB,cAAM,IAAIqG,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,UAAI,CAAClE,WAAW,CAACE,MAAjB,EAAyB;AACvB,cAAM,IAAIgE,KAAJ,CAAU,oBAAV,CAAN;AACH;;AAED,YAAMyE,aAAa,GAAGjD,QAAQ,CAAC1F,WAAW,CAACG,OAAb,CAA9B;;AACA,UAAIwF,KAAK,CAACgD,aAAD,CAAL,IAAwBA,aAAa,IAAI,CAA7C,EAAgD;AAC9C,cAAM,IAAIzE,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACC,UAAI0E,OAAO,GAAG;AACZ/K,QAAAA,IAAI,EAAEmC,WAAW,CAACnC,IADN;AAEZqC,QAAAA,MAAM,EAAEF,WAAW,CAACE,MAFR;AAGZyH,QAAAA,OAAO,EAAEgB;AAHG,OAAd;AAMA,UAAI1C,QAAQ,GAAG,gCAAf;AACA,UAAIC,MAAM,GAAG,MAAb,CAtBE,CAwBF;AACA;;AACA,UAAIzF,kBAAkB,IAAIA,kBAAkB,CAAC6G,aAA7C,EAA4D;AAC1DrB,QAAAA,QAAQ,IAAK,IAAGxF,kBAAkB,CAAC6G,aAAc,EAAjD;AACApB,QAAAA,MAAM,GAAG,KAAT;AACD,OAHD,MAGO;AACL;AACA,YAAI,CAACpH,kBAAL,EAAyB;AACvB,gBAAM,IAAIoF,KAAJ,CAAU,oDAAV,CAAN;AACD;;AACD0E,QAAAA,OAAO,GAAG,EAAE,GAAGA,OAAL;AAActI,UAAAA,UAAU,EAAExB;AAA1B,SAAV;AACD;;AAED,YAAMiF,QAAQ,GAAG,MAAMC,KAAK,CAACiC,QAAD,EAAW;AACrCC,QAAAA,MAAM,EAAEA,MAD6B;AAErCI,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAF4B;AAGrCH,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeuC,OAAf;AAH+B,OAAX,CAA5B;;AAMA,UAAI,CAAC7E,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM+D,SAAS,GAAG,MAAMjE,QAAQ,CAACM,IAAT,EAAxB;AACA,cAAM,IAAIH,KAAJ,CAAU8D,SAAS,CAACC,OAAV,IAAqB,oCAA/B,CAAN;AACD;;AAED3D,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0C,MAAMR,QAAQ,CAACM,IAAT,EAAhD;AAEAtE,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAE,MAAAA,cAAc,CAAC;AAAEpC,QAAAA,IAAI,EAAE,EAAR;AAAYqC,QAAAA,MAAM,EAAE,EAApB;AAAwBC,QAAAA,OAAO,EAAE;AAAjC,OAAD,CAAd;AACAO,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACA,YAAMoD,SAAS,EAAf;AAED,KAvDD,CAuDE,OAAOkB,KAAP,EAAc;AACdV,MAAAA,OAAO,CAACU,KAAR,CAAc,mCAAd,EAAmDA,KAAnD;AACA7F,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAE,MAAAA,eAAe,CAAC2F,KAAK,CAACoC,QAAN,EAAD,CAAf;AACD;AACF,GA7DD;;AA8DA,QAAMyB,uBAAuB,GAAIC,YAAD,IAAkB;AAChD,UAAMC,OAAO,GAAG,EAAhB;AACAD,IAAAA,YAAY,CAACE,OAAb,CAAsBC,WAAD,IAAiB;AACpC,YAAMC,SAAS,GAAG,IAAIlM,IAAJ,CAASiM,WAAW,CAACpL,IAArB,EAA2BsL,WAA3B,GAAyCC,SAAzC,CAAmD,CAAnD,EAAsD,CAAtD,CAAlB,CADoC,CACwC;;AAC5E,UAAI,CAACL,OAAO,CAACG,SAAD,CAAZ,EAAyB;AACvBH,QAAAA,OAAO,CAACG,SAAD,CAAP,GAAqB;AACnBJ,UAAAA,YAAY,EAAE,EADK;AAEnBO,UAAAA,SAAS,EAAE;AAFQ,SAArB;AAID;;AACDN,MAAAA,OAAO,CAACG,SAAD,CAAP,CAAmBJ,YAAnB,CAAgCQ,IAAhC,CAAqCL,WAArC;AACD,KATD;AAUA,WAAOF,OAAP;AACD,GAbD;;AAgBA,QAAMQ,qBAAqB,GAAG,CAACjJ,UAAD,EAAakJ,SAAb,KAA2B;AACvD/J,IAAAA,kBAAkB,CAACgK,cAAc;AAAA;;AAAA,aAAK,EACpC,GAAGA,cADiC;AAEpC,SAACnJ,UAAD,GAAc,EACZ,GAAGmJ,cAAc,CAACnJ,UAAD,CADL;AAEZ,WAACkJ,SAAD,GAAa,qDAAEC,cAAc,CAACnJ,UAAD,CAAhB,2DAAE,uBAA6BkJ,SAA7B,CAAF,yEAA6C,KAA7C;AAFD;AAFsB,OAAL;AAAA,KAAf,CAAlB;AAOD,GARD;;AAUA,QAAME,yBAAyB,GAAI9E,QAAD,IAAc;AAC9C;AACA,UAAM+E,mBAAmB,GAAG/E,QAAQ,CAACG,mBAAT,CAA6B6E,MAA7B,CAAoC,CAACC,GAAD,EAAMZ,WAAN,KAAsB;AACpF,YAAMO,SAAS,GAAG,IAAIxM,IAAJ,CAASiM,WAAW,CAACpL,IAArB,EAA2BiM,cAA3B,CAA0C,SAA1C,EAAqD;AAAE3M,QAAAA,KAAK,EAAE,MAAT;AAAiBF,QAAAA,IAAI,EAAE;AAAvB,OAArD,CAAlB;;AACA,UAAI,CAAC4M,GAAG,CAACL,SAAD,CAAR,EAAqB;AACnBK,QAAAA,GAAG,CAACL,SAAD,CAAH,GAAiB,EAAjB;AACD;;AACDK,MAAAA,GAAG,CAACL,SAAD,CAAH,CAAeF,IAAf,CAAoBL,WAApB;AACA,aAAOY,GAAP;AACD,KAP2B,EAOzB,EAPyB,CAA5B;AASA,WAAOE,MAAM,CAACC,OAAP,CAAeL,mBAAf,EAAoChF,GAApC,CAAwC,SAA+B;AAAA;;AAAA,UAA9B,CAAC6E,SAAD,EAAYV,YAAZ,CAA8B;AAC5E,YAAMmB,eAAe,GAAGrK,0BAA0B,CAACgF,QAAQ,CAACE,eAAV,CAAlD;AACA,YAAMoF,aAAa,sDAAG1K,eAAe,CAACoF,QAAQ,CAACE,eAAV,CAAlB,2DAAG,uBAA4C0E,SAA5C,CAAH,yEAA6D,KAAhF;AAEA,0BACE;AAAA,mBACGS,eAAe,iBACd;AAAQ,UAAA,SAAS,EAAC,0BAAlB;AAA6C,UAAA,OAAO,EAAE,MAAMV,qBAAqB,CAAC3E,QAAQ,CAACE,eAAV,EAA2B0E,SAA3B,CAAjF;AAAA,qBACGU,aAAa,GAAGrJ,YAAY,CAACnB,QAAD,CAAZ,CAAuB4C,IAA1B,GAAiCzB,YAAY,CAACnB,QAAD,CAAZ,CAAuB2C,IADxE,OAC+EmH,SAD/E;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAMGU,aAAa,IAAIpB,YAAY,CAACnE,GAAb,CAAiB,CAACsE,WAAD,EAAczI,KAAd,kBACjC;AAAK,UAAA,SAAS,EAAC,yBAAf;AAAA,kCACE;AAAA,4BAAQK,YAAY,CAACnB,QAAD,CAAZ,CAAuB7B,IAA/B,QAAuCoL,WAAW,CAACpL,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,6BAASgD,YAAY,CAACnB,QAAD,CAAZ,CAAuBkC,eAAhC,OAAkDqH,WAAW,CAAC/I,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,8BAAUW,YAAY,CAACnB,QAAD,CAAZ,CAAuBmC,OAAjC,QAA4CoH,WAAW,CAACtB,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAQ,YAAA,SAAS,EAAC,gBAAlB;AAAmC,YAAA,OAAO,EAAE,MAAMN,wBAAwB,CAACzC,QAAQ,CAACE,eAAV,EAA2BmE,WAAW,CAACvB,UAAvC,CAA1E;AAAA,sBACC7G,YAAY,CAACnB,QAAD,CAAZ,CAAuB8B;AADxB;AAAA;AAAA;AAAA;AAAA,kBAJF,eAOE;AAAQ,YAAA,SAAS,EAAC,gBAAlB;AAAmC,YAAA,OAAO,EAAE,MAAM2G,wBAAwB,CAACvD,QAAQ,CAACE,eAAV,EAA2BmE,WAAW,CAACvB,UAAvC,CAA1E;AAAA,sBACC7G,YAAY,CAACnB,QAAD,CAAZ,CAAuB6C;AADxB;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA,WAA8C/B,KAA9C;AAAA;AAAA;AAAA;AAAA,gBADgB,CANpB;AAAA,SAAUgJ,SAAV;AAAA;AAAA;AAAA;AAAA,cADF;AAsBD,KA1BM,CAAP;AA2BD,GAtCD;;AAwCA,sBACE;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA,sBAAyB3I,YAAY,CAACnB,QAAD,CAAZ,CAAuBqB,aAAhD;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMpB,WAAW,CAACwK,IAAI,IAAIA,IAAI,KAAK,SAAT,GAAqB,MAArB,GAA8B,SAAvC,CAAlC;AAAqF,MAAA,SAAS,EAAC,iBAA/F;AAAA,gBACGzK,QAAQ,KAAK,SAAb,GAAyB,MAAzB,GAAkC;AADrC;AAAA;AAAA;AAAA;AAAA,YAFF,EAKGV,qBAAqB,iBACpB,QAAC,iBAAD;AAAmB,MAAA,SAAS,EAAE8I,qBAA9B;AAAqD,MAAA,QAAQ,EAAEI;AAA/D;AAAA;AAAA;AAAA;AAAA,YANJ,eAQE,QAAC,UAAD;AACE,MAAA,MAAM,EAAEhJ,cADV;AAEE,MAAA,OAAO,EAAEE,YAFX;AAGE,MAAA,OAAO,EAAE,MAAMD,iBAAiB,CAAC,KAAD;AAHlC;AAAA;AAAA;AAAA;AAAA,YARF,EAcIP,SAAS,CAAC+F,GAAV,CAAeC,QAAD,iBACZ;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,eAAd;AAAA,mBAA+BA,QAAQ,CAACU,IAAxC,OAA+CzE,YAAY,CAACnB,QAAD,CAAZ,CAAuB0B,KAAtE;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mBAAIP,YAAY,CAACnB,QAAD,CAAZ,CAAuB7B,IAA3B,SAAoC+G,QAAQ,CAAC5H,IAAT,GAAgB4H,QAAQ,CAAC5H,IAAzB,GAAgC,mBAApE;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE;AAAA,mBAAI6D,YAAY,CAACnB,QAAD,CAAZ,CAAuB5B,YAA3B,SAA4C8G,QAAQ,CAACU,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA,wBAAKzE,YAAY,CAACnB,QAAD,CAAZ,CAAuB3B,MAA5B,SAAuC6G,QAAQ,CAAC7G,MAAhD;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACE;AAAQ,UAAA,SAAS,EAAC,gBAAlB;AAAmC,UAAA,OAAO,EAAE,MAAM6J,iBAAiB,CAAChD,QAAQ,CAACE,eAAV,CAAnE;AAAA,oBACCjE,YAAY,CAACnB,QAAD,CAAZ,CAAuB4B;AADxB;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAQ,UAAA,SAAS,EAAC,oBAAlB;AAAuC,UAAA,OAAO,EAAE,MAAM;AACpD/C,YAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAQ,YAAAA,qBAAqB,CAAC6F,QAAQ,CAACE,eAAV,CAArB,CAFoD,CAEH;AAClD,WAHD;AAAA,oBAIEjE,YAAY,CAACnB,QAAD,CAAZ,CAAuB6B;AAJzB;AAAA;AAAA;AAAA;AAAA,gBAJF,eAUE;AAAQ,UAAA,SAAS,EAAC,gBAAlB;AAAmC,UAAA,OAAO,EAAE,MAAMkF,iBAAiB,CAAC7B,QAAQ,CAACE,eAAV,CAAnE;AAAA,oBACCjE,YAAY,CAACnB,QAAD,CAAZ,CAAuB8B;AADxB;AAAA;AAAA;AAAA;AAAA,gBAVF,eAcE;AAAQ,UAAA,SAAS,EAAC,wBAAlB;AAA2C,UAAA,OAAO,EAAE,MAAMyD,gCAAgC,CAACL,QAAQ,CAACE,eAAV,CAA1F;AAAA,oBACGlF,0BAA0B,CAACgF,QAAQ,CAACE,eAAV,CAA1B,GAAuDjE,YAAY,CAACnB,QAAD,CAAZ,CAAuBgC,OAA9E,GAAwFb,YAAY,CAACnB,QAAD,CAAZ,CAAuBiC;AADlH;AAAA;AAAA;AAAA;AAAA,gBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,EAyBG+H,yBAAyB,CAAC9E,QAAD,CAzB5B,EA2BGtF,eAAe,KAAKsF,QAAQ,CAACE,eAA7B,IAAgDhF,gBAAhD,iBACC;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA,gCACE;AAAA,0BAAMe,YAAY,CAACnB,QAAD,CAAZ,CAAuBmC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,SAAS,EAAC,cAAlB;AAAiC,UAAA,OAAO,EAAE,MAAM9B,mBAAmB,CAAC,KAAD,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAKE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA,oBAAiCY,oBAAoB,CAAC9C;AAAtD;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,WAAW,EAAGgD,YAAY,CAACnB,QAAD,CAAZ,CAAuB7B,IAHvC;AAIE,UAAA,KAAK,EAAEmC,WAAW,CAACnC,IAAZ,IAAoB,EAJ7B;AAKE,UAAA,QAAQ,EAAEgK;AALZ;AAAA;AAAA;AAAA;AAAA,gBANF,eAaE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA,oBAAiClH,oBAAoB,CAACT;AAAtD;AAAA;AAAA;AAAA;AAAA,gBAbF,eAcE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,WAAW,EAAGW,YAAY,CAACnB,QAAD,CAAZ,CAAuBkC,eAHvC;AAIE,UAAA,KAAK,EAAE5B,WAAW,CAACE,MAAZ,IAAsB,EAJ/B;AAKE,UAAA,QAAQ,EAAE2H;AALZ;AAAA;AAAA;AAAA;AAAA,gBAdF,eAsBE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA,oBAAiClH,oBAAoB,CAACR;AAAtD;AAAA;AAAA;AAAA;AAAA,gBAtBF,eAuBE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,IAAI,EAAC,SAFP;AAGE,UAAA,WAAW,EAAGU,YAAY,CAACnB,QAAD,CAAZ,CAAuBmC,OAHvC;AAIE,UAAA,KAAK,EAAE7B,WAAW,CAACG,OAJrB;AAKE,UAAA,QAAQ,EAAE0H;AALZ;AAAA;AAAA;AAAA;AAAA,gBAvBF,eA+BE;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAgC,UAAA,OAAO,EAAGxC,CAAD,IAAO;AAC9CA,YAAAA,CAAC,CAAC+E,cAAF;AACA1B,YAAAA,sBAAsB;AACvB,WAHD;AAAA,oBAIG7H,YAAY,CAACnB,QAAD,CAAZ,CAAuBoC;AAJ1B;AAAA;AAAA;AAAA;AAAA,gBA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BJ,EAoEGhD,kBAAkB,KAAK8F,QAAQ,CAACE,eAAhC,IAAmDxG,kBAAnD,iBACC;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACE;AAAQ,UAAA,SAAS,EAAC,cAAlB;AAAiC,UAAA,OAAO,EAAE,MAAMC,qBAAqB,CAAC,KAAD,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA,oBAAiCG;AAAjC;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,WAAW,EAAGmC,YAAY,CAACnB,QAAD,CAAZ,CAAuBsC,qBAFvC;AAGE,UAAA,KAAK,EAAExD,WAHT;AAIE,UAAA,QAAQ,EAAEsI;AAJZ;AAAA;AAAA;AAAA;AAAA,gBALF,eAYE;AAAQ,UAAA,SAAS,EAAC,oBAAlB;AAAuC,UAAA,OAAO,EAAEC,qBAAhD;AAAA,oBACClG,YAAY,CAACnB,QAAD,CAAZ,CAAuByB;AADxB;AAAA;AAAA;AAAA;AAAA,gBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,cArEJ;AAAA,OAAoCyD,QAAQ,CAACE,eAA7C;AAAA;AAAA;AAAA;AAAA,YADF,CAdJ,EA2GGrH,aAAa,iBACZ;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAiC,QAAA,OAAO,EAAE+I,iBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA,kBAAiCxI,aAAa,CAACH;AAA/C;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,WAAW,EAAC,YAHd;AAIE,QAAA,KAAK,EAAEF,YAAY,CAACE,IAAb,IAAqB,EAJ9B;AAKE,QAAA,QAAQ,EAAEuH;AALZ;AAAA;AAAA;AAAA;AAAA,cALF,eAaE;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA,kBAAiCpH,aAAa,CAACF;AAA/C;AAAA;AAAA;AAAA;AAAA,cAbF,eAcE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,cAFP;AAGE,QAAA,WAAW,EAAC,eAHd;AAIE,QAAA,KAAK,EAAEH,YAAY,CAACG,YAJtB;AAKE,QAAA,QAAQ,EAAEsH;AALZ;AAAA;AAAA;AAAA;AAAA,cAdF,eAsBE;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA,kBAAiCpH,aAAa,CAACD;AAA/C;AAAA;AAAA;AAAA;AAAA,cAtBF,eAuBE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,WAAW,EAAC,iBAHd;AAIE,QAAA,KAAK,EAAEJ,YAAY,CAACI,MAJtB;AAKE,QAAA,QAAQ,EAAEqH;AALZ;AAAA;AAAA;AAAA;AAAA,cAvBF,eA+BE;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAEU,eAAzC;AAAA,kBACCjF,YAAY,CAACnB,QAAD,CAAZ,CAAuByB;AADxB;AAAA;AAAA;AAAA;AAAA,cA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,YA5GJ,eAgJE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAA+B,MAAA,OAAO,EAAE,MAAMzD,gBAAgB,CAAC,IAAD,CAA9D;AAAA,gBACCmD,YAAY,CAACnB,QAAD,CAAZ,CAAuB2B;AADxB;AAAA;AAAA;AAAA;AAAA,YAhJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsJD,CA9wBD;;GAAMxE,Q;;KAAAA,Q;AAgxBN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Employee.css';\r\n\r\nconst Employee = () => {\r\n\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Pad single digit months with a leading 0\r\n    const day = String(today.getDate()).padStart(2, '0'); // Pad single digit days with a leading 0\r\n    return `${year}-${month}-${day}`; // Format must be YYYY-MM-DD\r\n  };\r\n\r\n\r\n  const [isFormVisible, setIsFormVisible] = useState(false);\r\n  const [consumerData, setConsumerData] = useState({\r\n    date: getTodayDate(),\r\n    consumerName: '',\r\n    baqaya: '',\r\n  });\r\n  const [errorMessages, setErrorMessages] = useState({\r\n    date: '',\r\n    consumerName: '',\r\n    baqaya: '',\r\n  });\r\n  const [isDataSaved, setIsDataSaved] = useState(false);\r\n  const [isUpdateMode, setIsUpdateMode] = useState(false);\r\n  const [isAddBaqayaVisible, setIsAddBaqayaVisible] = useState(false);\r\n  const [baqayaToAdd, setBaqayaToAdd] = useState('');\r\n  const [baqayaError, setBaqayaError] = useState('');\r\n  const [consumers, setConsumers] = useState([]);\r\n  const [selectedConsumerId, setSelectedConsumerId] = useState(null);\r\n  const [isConfirmModalVisible, setIsConfirmModalVisible] = useState(false);\r\n  const [isAlertVisible, setIsAlertVisible] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n  const [currentManaging, setCurrentManaging] = useState(null);\r\n  const [monthVisibility, setMonthVisibility] = useState({})\r\n  const [language, setLanguage] = useState('English');\r\n  const [monthYearButtonsVisibility, setMonthYearButtonsVisibility] = useState({});\r\n  const [isWasooliVisible, setIsWasooliVisible] = useState(false);\r\n  const [wasooliData, setWasooliData] = useState({\r\n    date: getTodayDate(),\r\n    source: '',\r\n    wasooli: '',\r\n  });\r\n  // Update this state to also include the wasooliId\r\n  const [deleteConfirmationData, setDeleteConfirmationData] = useState({\r\n    consumerId: null,\r\n    wasooliId: null, // Add this line\r\n    index: null,\r\n  });\r\n  const [editingTransaction, setEditingTransaction] = useState(null);\r\n\r\n  const [wasooliErrorMessages, setWasooliErrorMessages] = useState({\r\n    date: '',\r\n    source: '',\r\n    wasooli: '',\r\n  });\r\n\r\n  const translations = {\r\n    English: {\r\n      date: 'Date',\r\n      consumerName: 'Employee Name',\r\n      baqaya: 'Employee Baqaya',\r\n      employeekhata: \"Employee Khata\",\r\n      pleaseEnterDate: 'Please enter a date',\r\n      pleaseEnterConsumerName: 'Please enter employee name',\r\n      pleaseEnterBaqaya: 'Please enter employee baqaya amount',\r\n      save: 'Save',\r\n      Khata: \"Khata\",\r\n      addEmployee: 'Add Employee',\r\n      manage: 'Manage',\r\n      addBaqaya: 'Add Baqaya',\r\n      update: 'Update',\r\n      toggleVisibility: 'Toggle Visibility',\r\n      hideAll: 'Hide All',\r\n      showAll: 'Show All',\r\n      sourceOfKharcha: 'Source',\r\n      kharcha: 'Kharcha',\r\n      saveKharcha: 'Save Kharcha',\r\n      close: 'Close',\r\n      addMoreEmployeeBaqaya: 'Add more Employee Baqaya',\r\n      confirmAddConsumer: \"Are you sure you want to add a new consumer?\",\r\n      yes: \"Yes\",\r\n      no: \"No\",\r\n      deleteWasooliConfirm: \"Are you sure you want to delete this kharcha?\",\r\n      close: \"Close\",\r\n      Show: \"Show\",\r\n      Hide: \"Hide\",\r\n      delete: \"Delete\",\r\n      datee: \"Please enter a date\",\r\n      consumerNamee: \"Please enter employee name\",\r\n      baqayaa: \"Please enter baqaya amount\",\r\n      baqayaNumberr: \"Baqaya must be a number\",\r\n      wasooliAmountt: \"Please fill up the khatcha amount\",\r\n      baqayaerror: \"Please fill up the baqaya amount\",\r\n      \r\n    },\r\n    Urdu: {\r\n      date: 'تاریخ',\r\n      consumerName: 'ملازم کا نام',\r\n      baqaya: 'ملازم کا باقیہ',\r\n      consumerKhata: \"صارف خاتہ \",\r\n      employeekhata: \"خاتہ ملازم \",\r\n      pleaseEnterDate: 'براہ کرم تاریخ درج کریں',\r\n      pleaseEnterConsumerName: 'براہ کرم ملازم کا نام درج کریں',\r\n      pleaseEnterBaqaya: 'براہ کرم ملازم کا باقیہ معلومات درج کریں',\r\n      save: 'محفوظ کریں',\r\n      delete: \"حذف کریں\",\r\n      addEmployee: 'ملازم شامل کریں',\r\n      manage: 'انتظام کریں',\r\n      addBaqaya: 'باقیہ شامل کریں',\r\n      update: 'اپ ڈیٹ',\r\n      toggleVisibility: 'دکھائیں یا چھپائیں',\r\n      hideAll: 'سب چھپائیں',\r\n      showAll: 'سب دکھائیں',\r\n      sourceOfKharcha: 'خرچے کا ذریعہ',\r\n      kharcha: 'خرچہ',\r\n      saveKharcha: 'خرچہ محفوظ کریں',\r\n      close: 'بند کریں',\r\n      addMoreEmployeeBaqaya: 'مزید ملازم کا باقیہ شامل کریں',\r\n      delete: \"حذف کریں\",\r\n      Khata: \"خاتہ\",\r\n      confirmAddConsumer: \"کیا آپ واقعی نیا صارف شامل کرنا چاہتے ہیں؟\",\r\n      yes: \"جی ہاں\",\r\n      no: \"نہیں\",\r\n      Khata: \"خاتہ\",\r\n      Show: \"دکھائیں\",\r\n      Hide: \"چھپائیں\",\r\n      deleteWasooliConfirm: \"کیا آپ واقعی اس وصولی کو حذف کرنا چاہتے ہیں؟\",\r\n      close: \"بند کریں\",\r\n      datee: \"براہ کرم تاریخ درج کریں\",\r\n      consumerNamee: \"براہ کرم صارف کا نام درج کریں\",\r\n      baqayaa: \"براہ کرم باقیہ مقدار درج کریں\",\r\n      baqayaNumberr: \"باقیہ کو نمبر ہونا چاہئے\",\r\n      wasooliAmountt: \"براہ کرم وصولی کی رقم بھریں\",\r\n      wasooliDatee: \"تاریخ ضروری ہے\",\r\n      baqayaerror: \"برائے مہربانی باقیہ رقم بھریں\",\r\n    }\r\n\r\n  };\r\n  const monthTranslations = {\r\n    January: \"جنوری\",\r\n    February: \"فروری\",\r\n    March: \"مارچ\",\r\n    April: \"اپریل\",\r\n    May: \"مئی\",\r\n    June: \"جون\",\r\n    July: \"جولائی\",\r\n    August: \"اگست\",\r\n    September: \"ستمبر\",\r\n    October: \"اکتوبر\",\r\n    November: \"نومبر\",\r\n    December: \"دسمبر\",\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/employeekhata');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const consumersData = await response.json();\r\n\r\n      // Check the fetched data\r\n      console.log(\"Fetched consumers data:\", consumersData);\r\n\r\n      const updatedConsumersData = await Promise.all(consumersData.map(async (consumer) => {\r\n        const wasooliResponse = await fetch(`http://localhost:3001/kharchay/${consumer.idEmployeekhata}`);\r\n        if (!wasooliResponse.ok) {\r\n          console.log(`Failed to fetch wasooli data for consumer ID: ${consumer.idEmployeekhata}`);\r\n          return consumer; // Return the consumer without wasooli data if fetch fails\r\n        }\r\n        const wasooliData = await wasooliResponse.json();\r\n        return { ...consumer, wasooliTransactions: wasooliData };\r\n      }));\r\n\r\n      // Check the updated consumers data\r\n      console.log(\"Updated consumers data:\", updatedConsumersData);\r\n\r\n      // Update state with the processed and fetched data\r\n      setConsumers(updatedConsumersData);\r\n    } catch (error) {\r\n      console.error('Fetch error:', error);\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(consumers); // Log the state to see if it includes the dates correctly\r\n  }, [consumers]);\r\n\r\n  const toggleMonthYearButtonsVisibility = (consumerId) => {\r\n\r\n    setMonthYearButtonsVisibility(prevState => {\r\n      const newState = {\r\n        ...prevState,\r\n        [consumerId]: !prevState[consumerId],\r\n      };\r\n\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    let newValue = value;\r\n\r\n    // If the input is for baqaya, ensure it's handled as a number\r\n    if (name === 'baqaya') {\r\n      newValue = value !== '' ? parseInt(value, 10) : 0;\r\n      if (isNaN(newValue)) {\r\n        setErrorMessages((prevErrors) => ({\r\n          ...prevErrors,\r\n          baqaya: 'Baqaya must be a number',\r\n        }));\r\n        return; // Don't set the consumer data if the input is not a number\r\n      }\r\n    }\r\n\r\n    setConsumerData((prevData) => ({\r\n      ...prevData,\r\n      [name]: newValue,\r\n    }));\r\n\r\n    // Clear any error messages for this input\r\n    setErrorMessages((prevErrors) => ({\r\n      ...prevErrors,\r\n      [name]: '',\r\n    }));\r\n  };\r\n\r\n  const handleSaveClick = async () => {\r\n    const { date, consumerName, baqaya, idEmployeekhata } = consumerData;\r\n    console.log('Data before sending:', { date, consumerName, baqaya, idEmployeekhata }); // Debug log\r\n\r\n    if (!date.trim() || !consumerName.trim() || isNaN(parseInt(baqaya)) || parseInt(baqaya) < 0) {\r\n      let errors = {\r\n        ...(date.trim() ? null : { date: \"Please enter a date\" }),\r\n        ...(consumerName.trim() ? null : { consumerName: \"Please enter consumer name\" }),\r\n        ...(!isNaN(parseInt(baqaya)) && parseInt(baqaya) >= 0 ? null : { baqaya: \"Please enter a valid non-negative baqaya amount\" }),\r\n      };\r\n      setErrorMessages(errors);\r\n      return;\r\n    }\r\n\r\n    const endpoint = idEmployeekhata ? `http://localhost:3001/employeekhata/${idEmployeekhata}` : 'http://localhost:3001/employeekhata';\r\n    const method = idEmployeekhata ? 'PUT' : 'POST';\r\n    const body = JSON.stringify({\r\n      Date: date,  // Ensure this key matches the server's expectation (case-sensitive)\r\n      name: consumerName,\r\n      baqaya: parseInt(baqaya),\r\n    });\r\n\r\n    try {\r\n      const response = await fetch(endpoint, {\r\n        method,\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: body,\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n      console.log('Update successful', await response.json()); // Debug success\r\n      await fetchData();\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('Error during fetch:', error);\r\n    }\r\n};\r\n\r\n\r\n  const resetForm = () => {\r\n    setConsumerData({\r\n      date: '',\r\n      consumerName: '',\r\n      baqaya: '',\r\n    });\r\n    setIsFormVisible(false);\r\n    setErrorMessages({});\r\n  };\r\n\r\n  const handleCancelClick = () => {\r\n    setIsFormVisible(false);\r\n    setIsUpdateMode(false);\r\n  };\r\n\r\n  const handleUpdateClick = (id) => {\r\n    const consumerToUpdate = consumers.find(consumer => consumer.idEmployeekhata === id);\r\n    if (consumerToUpdate) {\r\n      setConsumerData({\r\n        date: consumerToUpdate.Date || '',\r\n        consumerName: consumerToUpdate.name || '',\r\n        baqaya: consumerToUpdate.baqaya || '',\r\n        idEmployeekhata: consumerToUpdate.idEmployeekhata, // Store the id in the state\r\n      });\r\n      setIsUpdateMode(true);\r\n      setIsFormVisible(true);\r\n    } else {\r\n      console.error(\"No consumer found with ID:\", id);\r\n    }\r\n  };\r\n\r\n  const handleAddBaqayaClick = () => {\r\n    setIsAddBaqayaVisible(true);\r\n  };\r\n\r\n  const handleBaqayaInputChange = (e) => {\r\n    const { value } = e.target;\r\n    setBaqayaToAdd(value);\r\n    setBaqayaError('');\r\n  };\r\n\r\n  const handleSaveBaqayaClick = async () => {\r\n    if (!baqayaToAdd) {\r\n      setBaqayaError('Please fill the Baqaya field');\r\n      return;\r\n    }\r\n    const newBaqayaAmount = parseInt(baqayaToAdd);\r\n    if (isNaN(newBaqayaAmount)) {\r\n      setBaqayaError('Invalid Baqaya amount');\r\n      return;\r\n    }\r\n\r\n    // Find the consumer to update\r\n    const consumerToUpdate = consumers.find(consumer => consumer.idEmployeekhata === selectedConsumerId);\r\n    if (!consumerToUpdate) {\r\n      console.error(\"Consumer not found\");\r\n      return;\r\n    }\r\n\r\n    // Ensure consumerToUpdate.baqaya is a number\r\n    const currentBaqaya = parseInt(consumerToUpdate.baqaya) || 0;\r\n\r\n    // Calculate updated baqaya\r\n    const updatedBaqaya = currentBaqaya + newBaqayaAmount;\r\n\r\n    // Corrected URL in the fetch request\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/employeekhata/${selectedConsumerId}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          Date: consumerToUpdate.Date, // Make sure to include other fields required by your server\r\n          name: consumerToUpdate.name,\r\n          baqaya: updatedBaqaya,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Update local state and UI\r\n      const updatedConsumers = consumers.map(consumer =>\r\n        consumer.idEmployeekhata === selectedConsumerId ? {\r\n          ...consumer,\r\n          baqaya: updatedBaqaya.toString(),\r\n        } : consumer\r\n      );\r\n\r\n      setConsumers(updatedConsumers);\r\n      setIsDataSaved(true);\r\n      setBaqayaToAdd('');\r\n      setIsAddBaqayaVisible(false);\r\n      setBaqayaError('');\r\n      fetchData(); // Refresh data\r\n    } catch (error) {\r\n      console.error('Error updating baqaya:', error);\r\n      setBaqayaError('Failed to update baqaya');\r\n    }\r\n  };\r\n\r\n  const handleUpdateWasooliClick = (consumerId, transactionId) => {\r\n    if (!consumerId || !transactionId) {\r\n      console.error('Missing consumer ID or transaction ID');\r\n      return;\r\n    }\r\n\r\n    const consumer = consumers.find(consumer => consumer.idEmployeekhata === consumerId);\r\n    if (!consumer) {\r\n      console.error('Consumer not found for ID:', consumerId);\r\n      setIsAlertVisible(true);\r\n      setAlertMessage(\"Error: Consumer not found\");\r\n      return;\r\n    }\r\n    console.log(\"Consumer found:\", consumer.name);\r\n\r\n    if (!consumer.wasooliTransactions || consumer.wasooliTransactions.length === 0) {\r\n      console.error('No transactions found for consumer:', consumer.name);\r\n      return;\r\n    }\r\n\r\n    console.log(\"Consumer's Wasooli Transactions:\", consumer.wasooliTransactions);\r\n\r\n    const selectedWasooliCard = consumer.wasooliTransactions.find(txn => txn.idkharchay.toString() === transactionId.toString());\r\n    if (!selectedWasooliCard) {\r\n      console.error('Wasooli transaction not found for ID:', transactionId, \"in consumer:\", consumer.name);\r\n      return;\r\n    }\r\n    console.log(\"Selected Wasooli Card:\", selectedWasooliCard);\r\n\r\n    // Update the form data and editing transaction state asynchronously\r\n    setWasooliData({\r\n      date: selectedWasooliCard.date,\r\n      source: selectedWasooliCard.source,\r\n      wasooli: selectedWasooliCard.Wasooli.toString(),\r\n    });\r\n\r\n    setEditingTransaction({\r\n      consumerId: consumerId,\r\n      transactionId: transactionId,\r\n    });\r\n\r\n    setIsWasooliVisible(true);\r\n  };\r\n\r\n\r\n\r\n  const handleManageClick = (consumerId) => {\r\n    setSelectedConsumerId(consumerId);\r\n    setIsWasooliVisible(true);\r\n    setCurrentManaging(consumerId);\r\n    // Reset Wasooli form data\r\n    setWasooliData({ date: '', source: '', Wasooli: '' });\r\n  };\r\n\r\n  const handleWasooliInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setWasooliData({ ...wasooliData, [name]: value });\r\n    setWasooliErrorMessages({ ...wasooliErrorMessages, [name]: '' });\r\n  };\r\n\r\n\r\n  const handleConfirmDeletion = async () => {\r\n    const { consumerId, wasooliId, index } = deleteConfirmationData;\r\n\r\n    if (!wasooliId) {\r\n      console.error(\"Wasooli ID is missing.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Delete the Wasooli transaction\r\n      const deleteResponse = await fetch(`http://localhost:3001/kharchay/${wasooliId}`, { method: 'DELETE' });\r\n\r\n      if (!deleteResponse.ok) {\r\n        const errorData = await deleteResponse.json();\r\n        throw new Error(errorData.message || 'Failed to delete Wasooli transaction.');\r\n      }\r\n\r\n      console.log(\"Wasooli transaction deleted successfully.\");\r\n\r\n      // Re-fetch updated consumer data to refresh local state\r\n      await fetchData();\r\n\r\n      console.log(\"Consumer data refreshed after Wasooli deletion.\");\r\n\r\n      // Reset the delete confirmation data and close the modal\r\n      setDeleteConfirmationData({ consumerId: null, wasooliId: null, index: null });\r\n      setIsConfirmModalVisible(false);\r\n    } catch (error) {\r\n      console.error('Error during Wasooli deletion:', error);\r\n    }\r\n  };\r\n\r\n\r\n  const handleCancelDeletion = () => {\r\n    setIsConfirmModalVisible(false); // Hide the modal\r\n  };\r\n\r\n  const handleDeleteWasooliClick = (consumerId, wasooliId, index) => {\r\n    // Log the parameters to ensure they are being passed correctly\r\n    console.log(`Preparing to delete Wasooli with ID: ${wasooliId}, for Consumer ID: ${consumerId}, at Index: ${index}`);\r\n\r\n\r\n    // Set the deleteConfirmationData with the correct values\r\n    setDeleteConfirmationData({ consumerId, wasooliId, index });\r\n    setIsConfirmModalVisible(true);\r\n  };\r\n\r\n  const AlertModal = ({ isOpen, message, onClose }) => {\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n      <div className=\"alert-modal-overlay\">\r\n        <div className=\"alert-modal\">\r\n          <p>{message}</p>\r\n          <button onClick={onClose}>OK</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const ConfirmationModal = ({ onConfirm, onCancel }) => (\r\n    <div className=\"confirmation-modal-overlay\">\r\n      <div className=\"confirmation-modal\">\r\n        <p>Are you sure you want to delete this kharcha?</p>\r\n        <button className=\"yes-button\" onClick={onConfirm}>Yes</button>\r\n        <button className=\"no-button\" onClick={onCancel}>No</button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const handleSaveWasooliClick = async () => {\r\n    try {\r\n    \r\n\r\n      if (!wasooliData.date) {\r\n        throw new Error(\"Date is required\");\r\n      }\r\n\r\n      if (!wasooliData.source) {\r\n        throw new Error(\"source is required\");\r\n    }\r\n    \r\n    const wasooliAmount = parseInt(wasooliData.wasooli);\r\n    if (isNaN(wasooliAmount) || wasooliAmount <= 0) {\r\n      throw new Error(\"Invalid Kharcha amount\");\r\n    }\r\n      let payload = {\r\n        date: wasooliData.date,\r\n        source: wasooliData.source,\r\n        Wasooli: wasooliAmount,\r\n      };\r\n\r\n      let endpoint = 'http://localhost:3001/kharchay';\r\n      let method = 'POST';\r\n\r\n      // If we're editing an existing transaction, adjust the endpoint and method.\r\n      // Otherwise, ensure the consumer ID is included in the payload for new transactions.\r\n      if (editingTransaction && editingTransaction.transactionId) {\r\n        endpoint += `/${editingTransaction.transactionId}`;\r\n        method = 'PUT';\r\n      } else {\r\n        // For new transactions, include the consumerId in the payload\r\n        if (!selectedConsumerId) {\r\n          throw new Error(\"Consumer ID is missing for new Wasooli transaction\");\r\n        }\r\n        payload = { ...payload, consumerId: selectedConsumerId };\r\n      }\r\n\r\n      const response = await fetch(endpoint, {\r\n        method: method,\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Failed to save Wasooli transaction\");\r\n      }\r\n\r\n      console.log(\"Wasooli transaction saved:\", await response.json());\r\n\r\n      setIsWasooliVisible(false);\r\n      setWasooliData({ date: '', source: '', wasooli: '' });\r\n      setEditingTransaction(null);\r\n      await fetchData();\r\n\r\n    } catch (error) {\r\n      console.error(\"Error saving Wasooli transaction:\", error);\r\n      setIsAlertVisible(true);\r\n      setAlertMessage(error.toString());\r\n    }\r\n  };\r\n  const groupTransactionsByDate = (transactions) => {\r\n    const grouped = {};\r\n    transactions.forEach((transaction) => {\r\n      const yearMonth = new Date(transaction.date).toISOString().substring(0, 7); // e.g., \"2024-01\"\r\n      if (!grouped[yearMonth]) {\r\n        grouped[yearMonth] = {\r\n          transactions: [],\r\n          isVisible: false,\r\n        };\r\n      }\r\n      grouped[yearMonth].transactions.push(transaction);\r\n    });\r\n    return grouped;\r\n  };\r\n\r\n\r\n  const toggleMonthVisibility = (consumerId, monthYear) => {\r\n    setMonthVisibility(prevVisibility => ({\r\n      ...prevVisibility,\r\n      [consumerId]: {\r\n        ...prevVisibility[consumerId],\r\n        [monthYear]: !(prevVisibility[consumerId]?.[monthYear] ?? false),\r\n      },\r\n    }));\r\n  };\r\n\r\n  const renderWasooliTransactions = (consumer) => {\r\n    // Group Wasooli transactions by month and year\r\n    const transactionsByMonth = consumer.wasooliTransactions.reduce((acc, transaction) => {\r\n      const monthYear = new Date(transaction.date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n      if (!acc[monthYear]) {\r\n        acc[monthYear] = [];\r\n      }\r\n      acc[monthYear].push(transaction);\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.entries(transactionsByMonth).map(([monthYear, transactions]) => {\r\n      const isButtonVisible = monthYearButtonsVisibility[consumer.idEmployeekhata];\r\n      const isDataVisible = monthVisibility[consumer.idEmployeekhata]?.[monthYear] ?? false;\r\n\r\n      return (\r\n        <div key={monthYear}>\r\n          {isButtonVisible && (\r\n            <button className=\"toggle-visibility-button\" onClick={() => toggleMonthVisibility(consumer.idEmployeekhata, monthYear)}>\r\n              {isDataVisible ? translations[language].Hide : translations[language].Show} {monthYear}\r\n            </button>\r\n          )}\r\n          {isDataVisible && transactions.map((transaction, index) => (\r\n            <div className=\"wasooli-card-horizontal\" key={index}>\r\n              <span> {translations[language].date}  {transaction.date}</span>\r\n              <span>  {translations[language].sourceOfKharcha} {transaction.source}</span>\r\n              <span>   {translations[language].kharcha}  {transaction.Wasooli}</span>\r\n              <button className=\"updatee-button\" onClick={() => handleUpdateWasooliClick(consumer.idEmployeekhata, transaction.idkharchay)}>\r\n              {translations[language].update}\r\n              </button>\r\n              <button className=\"deletee-button\" onClick={() => handleDeleteWasooliClick(consumer.idEmployeekhata, transaction.idkharchay)}>\r\n              {translations[language].delete}\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"consumer-khata-container\">\r\n      <h1 className=\"header\"> {translations[language].employeekhata}</h1>\r\n      <button onClick={() => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English')} className=\"language-toggle\">\r\n        {language === 'English' ? 'اردو' : 'English'}\r\n      </button>\r\n      {isConfirmModalVisible && (\r\n        <ConfirmationModal onConfirm={handleConfirmDeletion} onCancel={handleCancelDeletion} />\r\n      )}\r\n      <AlertModal\r\n        isOpen={isAlertVisible}\r\n        message={alertMessage}\r\n        onClose={() => setIsAlertVisible(false)}\r\n      />\r\n      {\r\n        consumers.map((consumer) => (\r\n          <div className=\"consumer-card\" key={consumer.idEmployeekhata}>\r\n            <h2 className=\"consumer-name\">{consumer.name} {translations[language].Khata}</h2>\r\n            <p>{translations[language].date} : {consumer.Date ? consumer.Date : 'No date available'}</p>\r\n\r\n            <p>{translations[language].consumerName} : {consumer.name}</p>\r\n            <p> {translations[language].baqaya} : {consumer.baqaya}</p>\r\n            <div className=\"action-buttons\">\r\n              <button className=\"manage-buttonn\" onClick={() => handleManageClick(consumer.idEmployeekhata)}>\r\n              {translations[language].manage}\r\n              </button>\r\n              <button className=\"add-baqaya-buttonn\" onClick={() => {\r\n                setIsAddBaqayaVisible(true);\r\n                setSelectedConsumerId(consumer.idEmployeekhata); // Ensure this is set when opening the Baqaya add form\r\n              }}>\r\n               {translations[language].addBaqaya}\r\n              </button>\r\n              <button className=\"update-buttonn\" onClick={() => handleUpdateClick(consumer.idEmployeekhata)}>\r\n              {translations[language].update}\r\n              </button>\r\n\r\n              <button className=\"global-toggle-buttonnn\" onClick={() => toggleMonthYearButtonsVisibility(consumer.idEmployeekhata)}>\r\n                {monthYearButtonsVisibility[consumer.idEmployeekhata] ? translations[language].hideAll : translations[language].showAll}\r\n              </button>\r\n\r\n            </div>\r\n            {renderWasooliTransactions(consumer)}\r\n\r\n            {currentManaging === consumer.idEmployeekhata && isWasooliVisible && (\r\n              <div className=\"form-container wasooli-card\">\r\n                <h2> {translations[language].kharcha}</h2>\r\n                <button className=\"close-button\" onClick={() => setIsWasooliVisible(false)}>\r\n                  &#10005;\r\n                </button>\r\n                <span className=\"error-message\">{wasooliErrorMessages.date}</span>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date\"\r\n                  placeholder= {translations[language].date}\r\n                  value={wasooliData.date || ''}\r\n                  onChange={handleWasooliInputChange}\r\n                />\r\n                <span className=\"error-message\">{wasooliErrorMessages.source}</span>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"source\"\r\n                  placeholder= {translations[language].sourceOfKharcha}\r\n                  value={wasooliData.source || ''}\r\n                  onChange={handleWasooliInputChange}\r\n                />\r\n\r\n                <span className=\"error-message\">{wasooliErrorMessages.wasooli}</span>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"wasooli\"\r\n                  placeholder= {translations[language].kharcha}\r\n                  value={wasooliData.wasooli}\r\n                  onChange={handleWasooliInputChange}\r\n                />\r\n\r\n                <button className=\"save-button\" onClick={(e) => {\r\n                  e.preventDefault();\r\n                  handleSaveWasooliClick();\r\n                }}>\r\n                  {translations[language].saveKharcha}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n            {selectedConsumerId === consumer.idEmployeekhata && isAddBaqayaVisible && (\r\n              <div className=\"add-baqaya-card\">\r\n                <button className=\"close-button\" onClick={() => setIsAddBaqayaVisible(false)} >\r\n                  &#10005;\r\n                </button>\r\n                <span className=\"error-message\">{baqayaError}</span>\r\n                <input\r\n                  type=\"number\"\r\n                  placeholder= {translations[language].addMoreEmployeeBaqaya}\r\n                  value={baqayaToAdd}\r\n                  onChange={handleBaqayaInputChange}\r\n                />\r\n\r\n                <button className=\"save-baqaya-button\" onClick={handleSaveBaqayaClick}>\r\n                {translations[language].save}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n\r\n          </div>\r\n        ))\r\n      }\r\n\r\n      {isFormVisible && (\r\n        <div className=\"form-container\">\r\n          <button className=\"close-button\" onClick={handleCancelClick}>\r\n            &#10005;\r\n          </button>\r\n          <span className=\"error-message\">{errorMessages.date}</span>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            placeholder=\"Enter Date\"\r\n            value={consumerData.date || ''}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <span className=\"error-message\">{errorMessages.consumerName}</span>\r\n          <input\r\n            type=\"text\"\r\n            name=\"consumerName\"\r\n            placeholder=\"Employee Name\"\r\n            value={consumerData.consumerName}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <span className=\"error-message\">{errorMessages.baqaya}</span>\r\n          <input\r\n            type=\"text\"\r\n            name=\"baqaya\"\r\n            placeholder=\"Employee Baqaya\"\r\n            value={consumerData.baqaya}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <button className=\"save-button\" onClick={handleSaveClick}>\r\n          {translations[language].save}\r\n          </button>\r\n        </div>\r\n      )}\r\n      <button className=\"add-button\" onClick={() => setIsFormVisible(true)}>\r\n      {translations[language].addEmployee}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Employee;"]},"metadata":{},"sourceType":"module"}