{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Faisal\\\\Desktop\\\\fullstack Projects\\\\Diary Software\\\\my-frontend\\\\src\\\\ConsumerKhata.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './ConsumerKhata.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConsumerKhata = () => {\n  _s();\n\n  const getTodayDate = () => {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Pad single digit months with a leading 0\n\n    const day = String(today.getDate()).padStart(2, '0'); // Pad single digit days with a leading 0\n\n    return `${year}-${month}-${day}`; // Format must be YYYY-MM-DD\n  };\n\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const [consumerData, setConsumerData] = useState({\n    date: getTodayDate(),\n    consumerName: '',\n    baqaya: '' // Initialize as a number\n\n  });\n  const [wasooliData, setWasooliData] = useState({\n    date: getTodayDate(),\n    wasooli: ''\n  });\n  const [errorMessages, setErrorMessages] = useState({\n    date: '',\n    consumerName: '',\n    baqaya: ''\n  });\n  const [isDataSaved, setIsDataSaved] = useState(false);\n  const [isUpdateMode, setIsUpdateMode] = useState(false);\n  const [isAddBaqayaVisible, setIsAddBaqayaVisible] = useState(false);\n  const [baqayaToAdd, setBaqayaToAdd] = useState('');\n  const [baqayaError, setBaqayaError] = useState('');\n  const [consumers, setConsumers] = useState([]);\n  const [selectedConsumerId, setSelectedConsumerId] = useState(null);\n  const [isConfirmModalVisible, setIsConfirmModalVisible] = useState(false);\n  const [isAlertVisible, setIsAlertVisible] = useState(false);\n  const [alertMessage, setAlertMessage] = useState('');\n  const [isAddConsumerConfirmVisible, setIsAddConsumerConfirmVisible] = useState(false);\n  const [monthVisibility, setMonthVisibility] = useState({});\n  const [isWasooliVisible, setIsWasooliVisible] = useState(false);\n  const [currentManaging, setCurrentManaging] = useState(null); // Update this state to also include the wasooliId\n\n  const [monthYearButtonsVisibility, setMonthYearButtonsVisibility] = useState({});\n  const [language, setLanguage] = useState('English');\n  const [deleteConfirmationData, setDeleteConfirmationData] = useState({\n    consumerId: null,\n    wasooliId: null,\n    // Add this line\n    index: null\n  });\n  const [editingTransaction, setEditingTransaction] = useState(null);\n  const [wasooliErrorMessages, setWasooliErrorMessages] = useState({\n    date: '',\n    wasooli: ''\n  });\n  const translations = {\n    English: {\n      consumerKhata: \"Consumer Khata\",\n      addConsumer: \"Add Consumer\",\n      date: \"Date\",\n      consumerName: \"Consumer Name\",\n      baqaya: \"Baqaya\",\n      save: \"Save\",\n      update: \"Update\",\n      manage: \"Manage\",\n      addBaqaya: \"Add Baqaya\",\n      showAll: \"Show All\",\n      hideAll: \"Hide All\",\n      wasooli: \"Wasooli\",\n      saveWasooli: \"Save Wasooli\",\n      delete: \"Delete\",\n      Khata: \"Khata\",\n      confirmAddConsumer: \"Are you sure you want to add a new consumer?\",\n      yes: \"Yes\",\n      no: \"No\",\n      deleteWasooliConfirm: \"Are you sure you want to delete this Wasooli?\",\n      close: \"Close\",\n      Show: \"Show\",\n      Hide: \"Hide\",\n      datee: \"Please enter a date\",\n      consumerNamee: \"Please enter consumer name\",\n      baqayaa: \"Please enter baqaya amount\",\n      baqayaNumberr: \"Baqaya must be a number\",\n      wasooliAmountt: \"Please fill up the Wasooli amount\",\n      baqayaerror: \"Please fill up the baqaya amount\",\n      wasooliDatee: \"Date is required\"\n    },\n    Urdu: {\n      consumerKhata: \"صارف خاتہ \",\n      addConsumer: \"صارف شامل کریں\",\n      date: \"تاریخ\",\n      consumerName: \"صارف کا نام\",\n      baqaya: \"باقیہ\",\n      save: \"محفوظ کریں\",\n      update: \"اپ ڈیٹ\",\n      manage: \"انتظام کریں\",\n      addBaqaya: \"باقیہ شامل کریں\",\n      showAll: \"سب دکھائیں\",\n      hideAll: \"پوشیدہ کریں\",\n      wasooli: \"وصولی\",\n      saveWasooli: \"وصولی محفوظ کریں\",\n      delete: \"حذف کریں\",\n      confirmAddConsumer: \"کیا آپ واقعی نیا صارف شامل کرنا چاہتے ہیں؟\",\n      yes: \"جی ہاں\",\n      no: \"نہیں\",\n      Khata: \"خاتہ\",\n      Show: \"دکھائیں\",\n      Hide: \"چھپائیں\",\n      deleteWasooliConfirm: \"کیا آپ واقعی اس وصولی کو حذف کرنا چاہتے ہیں؟\",\n      close: \"بند کریں\",\n      datee: \"براہ کرم تاریخ درج کریں\",\n      consumerNamee: \"براہ کرم صارف کا نام درج کریں\",\n      baqayaa: \"براہ کرم باقیہ مقدار درج کریں\",\n      baqayaNumberr: \"باقیہ کو نمبر ہونا چاہئے\",\n      wasooliAmountt: \"براہ کرم وصولی کی رقم بھریں\",\n      wasooliDatee: \"تاریخ ضروری ہے\",\n      baqayaerror: \"برائے مہربانی باقیہ رقم بھریں\"\n    }\n  };\n  const monthTranslations = {\n    January: \"جنوری\",\n    February: \"فروری\",\n    March: \"مارچ\",\n    April: \"اپریل\",\n    May: \"مئی\",\n    June: \"جون\",\n    July: \"جولائی\",\n    August: \"اگست\",\n    September: \"ستمبر\",\n    October: \"اکتوبر\",\n    November: \"نومبر\",\n    December: \"دسمبر\"\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/consumerkhata');\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const consumersData = await response.json(); // Process the data if necessary and update the state\n      // For each consumer, fetch their Wasooli transactions and update the state accordingly\n\n      const updatedConsumersData = await Promise.all(consumersData.map(async consumer => {\n        const wasooliResponse = await fetch(`http://localhost:3001/wasooli/${consumer.idconsumerkhata}`);\n\n        if (!wasooliResponse.ok) {\n          console.log(`Failed to fetch wasooli data for consumer ID: ${consumer.idconsumerkhata}`);\n          return consumer; // Return the consumer without wasooli data if fetch fails\n        }\n\n        const wasooliData = await wasooliResponse.json();\n        return { ...consumer,\n          wasooliTransactions: wasooliData\n        };\n      })); // Update state with the processed and fetched data\n\n      setConsumers(updatedConsumersData);\n    } catch (error) {\n      console.error('Fetch error:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const CustomModal = _ref => {\n    let {\n      message,\n      onClose\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-modal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this);\n  };\n\n  const toggleMonthYearButtonsVisibility = consumerId => {\n    setMonthYearButtonsVisibility(prevState => {\n      const newState = { ...prevState,\n        [consumerId]: !prevState[consumerId]\n      };\n      return newState;\n    });\n  };\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    let newValue = value; // If the input is for baqaya, ensure it's handled as a number\n\n    if (name === 'baqaya') {\n      newValue = value !== '' ? parseInt(value, 10) : 0;\n\n      if (isNaN(newValue)) {\n        setErrorMessages(prevErrors => ({ ...prevErrors,\n          baqaya: 'Baqaya must be a number'\n        }));\n        return; // Don't set the consumer data if the input is not a number\n      }\n    }\n\n    setConsumerData(prevData => ({ ...prevData,\n      [name]: newValue\n    })); // Clear any error messages for this input\n\n    setErrorMessages(prevErrors => ({ ...prevErrors,\n      [name]: ''\n    }));\n  };\n\n  const handleSaveClick = async () => {\n    const {\n      date,\n      consumerName,\n      baqaya,\n      idconsumerkhata\n    } = consumerData;\n    let errors = {};\n\n    if (!date || !consumerName || !baqaya) {\n      errors = { ...(!date && {\n          date: \"Please enter a date\"\n        }),\n        ...(!consumerName && {\n          consumerName: \"Please enter consumer name\"\n        }),\n        ...(!baqaya && {\n          baqaya: \"Please enter baqaya amount\"\n        })\n      };\n      setErrorMessages(errors);\n      return;\n    }\n\n    const endpoint = idconsumerkhata ? `http://localhost:3001/consumerkhata/${idconsumerkhata}` : 'http://localhost:3001/consumerkhata';\n    const method = idconsumerkhata ? 'PUT' : 'POST';\n\n    try {\n      const response = await fetch(endpoint, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Date: date,\n          name: consumerName,\n          baqaya: parseInt(baqaya)\n        })\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      await fetchData();\n      resetForm();\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const resetForm = () => {\n    setConsumerData({\n      date: '',\n      consumerName: '',\n      baqaya: ''\n    });\n    setIsFormVisible(false);\n    setErrorMessages({});\n  };\n\n  const handleCancelClick = () => {\n    setIsFormVisible(false);\n    setIsUpdateMode(false);\n  };\n\n  const handleUpdateClick = id => {\n    const consumerToUpdate = consumers.find(consumer => consumer.idconsumerkhata === id);\n\n    if (consumerToUpdate) {\n      setConsumerData({\n        date: consumerToUpdate.Date || '',\n        consumerName: consumerToUpdate.name || '',\n        baqaya: consumerToUpdate.baqaya || '',\n        idconsumerkhata: consumerToUpdate.idconsumerkhata // Store the id in the state\n\n      });\n      setIsUpdateMode(true);\n      setIsFormVisible(true);\n    } else {\n      console.error(\"No consumer found with ID:\", id);\n    }\n  };\n\n  const handleAddBaqayaClick = () => {\n    setIsAddBaqayaVisible(true);\n  };\n\n  const handleBaqayaInputChange = e => {\n    const {\n      value\n    } = e.target;\n    setBaqayaToAdd(value);\n    setBaqayaError('');\n  };\n\n  const handleSaveBaqayaClick = async () => {\n    if (!baqayaToAdd) {\n      setBaqayaError('Please fill the Baqaya field');\n      return;\n    }\n\n    const newBaqayaAmount = parseInt(baqayaToAdd);\n\n    if (isNaN(newBaqayaAmount)) {\n      setBaqayaError('Invalid Baqaya amount');\n      return;\n    } // Find the consumer to update\n\n\n    const consumerToUpdate = consumers.find(consumer => consumer.idconsumerkhata === selectedConsumerId);\n\n    if (!consumerToUpdate) {\n      console.error(\"Consumer not found\");\n      return;\n    } // Ensure consumerToUpdate.baqaya is a number\n\n\n    const currentBaqaya = parseInt(consumerToUpdate.baqaya) || 0; // Calculate updated baqaya\n\n    const updatedBaqaya = currentBaqaya + newBaqayaAmount; // Send the update request to the server\n\n    try {\n      const response = await fetch(`http://localhost:3001/consumerkhata/${selectedConsumerId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ ...consumerToUpdate,\n          baqaya: updatedBaqaya // Update with the calculated baqaya\n\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      } // Update the local state to reflect the change\n\n\n      const updatedConsumers = consumers.map(consumer => consumer.idconsumerkhata === selectedConsumerId ? { ...consumer,\n        baqaya: updatedBaqaya.toString()\n      } : consumer);\n      setConsumers(updatedConsumers);\n      setIsDataSaved(true);\n      setBaqayaToAdd('');\n      setIsAddBaqayaVisible(false);\n      setBaqayaError(''); // Optionally, refresh the data from the server to ensure UI consistency\n\n      fetchData();\n    } catch (error) {\n      console.error('Error updating baqaya:', error);\n      setBaqayaError('Failed to update baqaya');\n    }\n  };\n\n  const toggleMonthVisibility = (consumerId, monthYear) => {\n    setMonthVisibility(prevVisibility => {\n      var _prevVisibility$consu, _prevVisibility$consu2;\n\n      return { ...prevVisibility,\n        [consumerId]: { ...prevVisibility[consumerId],\n          [monthYear]: !((_prevVisibility$consu = (_prevVisibility$consu2 = prevVisibility[consumerId]) === null || _prevVisibility$consu2 === void 0 ? void 0 : _prevVisibility$consu2[monthYear]) !== null && _prevVisibility$consu !== void 0 ? _prevVisibility$consu : false)\n        }\n      };\n    });\n  }; // Adjust handleSaveClick or create a new function to send the updated consumer data to the server\n  // This involves crafting a PUT request with the consumer's updated data\n\n\n  const ConfirmAddModal = _ref2 => {\n    let {\n      isOpen,\n      onConfirm,\n      onCancel\n    } = _ref2;\n    if (!isOpen) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirm-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirm-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", translations[language].confirmAddConsumer]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"confirm-modal-button confirm-modal-button-yes\",\n          onClick: onConfirm,\n          children: [\" \", translations[language].yes]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"confirm-modal-button confirm-modal-button-no\",\n          onClick: onCancel,\n          children: [\" \", translations[language].no]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleAddConsumerClick = () => {\n    setIsAddConsumerConfirmVisible(true);\n  };\n\n  const handleUpdateWasooliClick = (consumerId, transactionId) => {\n    if (!consumerId || !transactionId) {\n      console.error('Missing consumer ID or transaction ID');\n      return;\n    }\n\n    const consumer = consumers.find(consumer => consumer.idconsumerkhata === consumerId);\n\n    if (!consumer) {\n      console.error('Consumer not found for ID:', consumerId);\n      setIsAlertVisible(true);\n      setAlertMessage(\"Error: Consumer not found\");\n      return;\n    }\n\n    console.log(\"Consumer found:\", consumer.name);\n\n    if (!consumer.wasooliTransactions || consumer.wasooliTransactions.length === 0) {\n      console.error('No transactions found for consumer:', consumer.name);\n      return;\n    }\n\n    console.log(\"Consumer's Wasooli Transactions:\", consumer.wasooliTransactions);\n    const selectedWasooliCard = consumer.wasooliTransactions.find(txn => txn.idwasooli.toString() === transactionId.toString());\n\n    if (!selectedWasooliCard) {\n      console.error('Wasooli transaction not found for ID:', transactionId, \"in consumer:\", consumer.name);\n      return;\n    }\n\n    console.log(\"Selected Wasooli Card:\", selectedWasooliCard); // Update the form data and editing transaction state asynchronously\n\n    setWasooliData({\n      date: selectedWasooliCard.date,\n      wasooli: selectedWasooliCard.Wasooli.toString()\n    });\n    setEditingTransaction({\n      consumerId: consumerId,\n      transactionId: transactionId\n    });\n    setIsWasooliVisible(true);\n  };\n\n  const handleManageClick = consumerId => {\n    setSelectedConsumerId(consumerId);\n    setIsWasooliVisible(true);\n    setCurrentManaging(consumerId); // Reset Wasooli form data\n\n    setWasooliData({\n      date: '',\n      Wasooli: ''\n    });\n  };\n\n  const handleWasooliInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setWasooliData(prevState => ({ ...prevState,\n      [name]: value // Ensure this never sets `date` or `wasooli` to undefined\n\n    }));\n  };\n\n  const handleConfirmDeletion = async () => {\n    const {\n      consumerId,\n      wasooliId,\n      index\n    } = deleteConfirmationData;\n\n    if (!wasooliId) {\n      console.error(\"Wasooli ID is missing.\");\n      return;\n    }\n\n    try {\n      // Delete the Wasooli transaction\n      const deleteResponse = await fetch(`http://localhost:3001/wasooli/${wasooliId}`, {\n        method: 'DELETE'\n      });\n\n      if (!deleteResponse.ok) {\n        const errorData = await deleteResponse.json();\n        throw new Error(errorData.message || 'Failed to delete Wasooli transaction.');\n      }\n\n      console.log(\"Wasooli transaction deleted successfully.\"); // Re-fetch updated consumer data to refresh local state\n\n      await fetchData();\n      console.log(\"Consumer data refreshed after Wasooli deletion.\"); // Reset the delete confirmation data and close the modal\n\n      setDeleteConfirmationData({\n        consumerId: null,\n        wasooliId: null,\n        index: null\n      });\n      setIsConfirmModalVisible(false);\n    } catch (error) {\n      console.error('Error during Wasooli deletion:', error);\n    }\n  };\n\n  const handleCancelDeletion = () => {\n    setIsConfirmModalVisible(false); // Hide the modal\n  };\n\n  const handleDeleteWasooliClick = (consumerId, wasooliId, index) => {\n    // Log the parameters to ensure they are being passed correctly\n    console.log(`Preparing to delete Wasooli with ID: ${wasooliId}, for Consumer ID: ${consumerId}, at Index: ${index}`); // Set the deleteConfirmationData with the correct values\n\n    setDeleteConfirmationData({\n      consumerId,\n      wasooliId,\n      index\n    });\n    setIsConfirmModalVisible(true);\n  };\n\n  const AlertModal = _ref3 => {\n    let {\n      isOpen,\n      message,\n      onClose\n    } = _ref3;\n    if (!isOpen) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          children: \"OK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this);\n  };\n\n  const ConfirmationModal = _ref4 => {\n    let {\n      onConfirm,\n      onCancel\n    } = _ref4;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", translations[language].deleteWasooliConfirm]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"yes-button\",\n          onClick: onConfirm,\n          children: [\" \", translations[language].yes]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"no-button\",\n          onClick: onCancel,\n          children: [\" \", translations[language].no]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleSaveWasooliClick = async () => {\n    try {\n      const wasooliAmount = parseInt(wasooliData.wasooli);\n\n      if (wasooliAmount <= 0) {\n        throw new Error(\"invalid Wasooli amount\");\n      }\n\n      if (isNaN(wasooliAmount)) {\n        throw new Error(\"Please fill up the Wasooli amount\");\n      }\n\n      if (!wasooliData.date) {\n        throw new Error(\"Date is required\");\n      }\n\n      let payload = {\n        date: wasooliData.date,\n        Wasooli: wasooliAmount\n      };\n      let endpoint = 'http://localhost:3001/wasooli';\n      let method = 'POST'; // If we're editing an existing transaction, adjust the endpoint and method.\n      // Otherwise, ensure the consumer ID is included in the payload for new transactions.\n\n      if (editingTransaction && editingTransaction.transactionId) {\n        endpoint += `/${editingTransaction.transactionId}`;\n        method = 'PUT';\n      } else {\n        // For new transactions, include the consumerId in the payload\n        if (!selectedConsumerId) {\n          throw new Error(\"Consumer ID is missing for new Wasooli transaction\");\n        }\n\n        payload = { ...payload,\n          consumerId: selectedConsumerId\n        };\n      }\n\n      const response = await fetch(endpoint, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to save Wasooli transaction\");\n      }\n\n      console.log(\"Wasooli transaction saved:\", await response.json());\n      setIsWasooliVisible(false);\n      setWasooliData({\n        date: '',\n        wasooli: ''\n      });\n      setEditingTransaction(null);\n      await fetchData();\n    } catch (error) {\n      console.error(\"Error saving Wasooli transaction:\", error);\n      setIsAlertVisible(true);\n      setAlertMessage(error.toString());\n    }\n  }; // Toggle visibility for an individual month (optional, if you need finer control)\n\n\n  const renderWasooliTransactions = consumer => {\n    // Ensure consumer.wasooliTransactions is an array.\n    const transactions = consumer.wasooliTransactions || [];\n    const transactionsByMonth = transactions.reduce((acc, transaction) => {\n      const monthYear = new Date(transaction.date).toLocaleString('default', {\n        month: 'long',\n        year: 'numeric'\n      });\n      if (!acc[monthYear]) acc[monthYear] = [];\n      acc[monthYear].push(transaction);\n      return acc;\n    }, {});\n    return Object.entries(transactionsByMonth).map(_ref5 => {\n      var _monthVisibility$cons, _monthVisibility$cons2;\n\n      let [monthYear, transactions] = _ref5;\n      // Check if the monthYear is visible based on the state.\n      const isButtonVisible = monthYearButtonsVisibility[consumer.idconsumerkhata];\n      const isDataVisible = (_monthVisibility$cons = (_monthVisibility$cons2 = monthVisibility[consumer.idconsumerkhata]) === null || _monthVisibility$cons2 === void 0 ? void 0 : _monthVisibility$cons2[monthYear]) !== null && _monthVisibility$cons !== void 0 ? _monthVisibility$cons : false;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [isButtonVisible && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"toggle-visibility-button\",\n          onClick: () => toggleMonthVisibility(consumer.idconsumerkhata, monthYear),\n          children: [isDataVisible ? translations[language].Hide : translations[language].Show, \" \", monthYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 13\n        }, this), isDataVisible && transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wasooli-card-horizontal\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [translations[language].date, \" : \", transaction.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [translations[language].wasooli, \" : \", transaction.Wasooli]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"updatee-button\",\n            onClick: () => handleUpdateWasooliClick(consumer.idconsumerkhata, transaction.idwasooli),\n            children: translations[language].update\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"deletee-button\",\n            onClick: () => handleDeleteWasooliClick(consumer.idconsumerkhata, transaction.idwasooli, index),\n            children: translations[language].delete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 13\n        }, this))]\n      }, monthYear, true, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"consumer-khata-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: translations[language].consumerKhata\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English'),\n      className: \"language-toggle\",\n      children: language === 'English' ? 'اردو' : 'English'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 7\n    }, this), isConfirmModalVisible && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      onConfirm: handleConfirmDeletion,\n      onCancel: handleCancelDeletion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AlertModal, {\n      isOpen: isAlertVisible,\n      message: alertMessage,\n      onClose: () => setIsAlertVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 7\n    }, this), consumers.map(consumer => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consumer-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"consumer-name\",\n        children: [consumer.name, \" \", translations[language].Khata]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [translations[language].date, \" : \", consumer.Date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [translations[language].consumerName, \" : \", consumer.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [translations[language].baqaya, \" : \", consumer.baqaya]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"manage-buttonn\",\n          onClick: () => handleManageClick(consumer.idconsumerkhata),\n          children: translations[language].manage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-baqaya-buttonn\",\n          onClick: () => {\n            setIsAddBaqayaVisible(true);\n            setSelectedConsumerId(consumer.idconsumerkhata); // Ensure this is set when opening the Baqaya add form\n          },\n          children: translations[language].addBaqaya\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"update-buttonn\",\n          onClick: () => handleUpdateClick(consumer.idconsumerkhata),\n          children: translations[language].update\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"global-toggle-buttonn\",\n        onClick: () => toggleMonthYearButtonsVisibility(consumer.idconsumerkhata),\n        children: monthYearButtonsVisibility[consumer.idconsumerkhata] ? translations[language].hideAll : translations[language].showAll\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 13\n      }, this), renderWasooliTransactions(consumer), currentManaging === consumer.idconsumerkhata && isWasooliVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container wasooli-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: translations[language].wasooli\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setIsWasooliVisible(false),\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error-message\",\n          children: wasooliErrorMessages.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"date\",\n          placeholder: translations[language].datee,\n          value: wasooliData.date || '',\n          onChange: handleWasooliInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error-message\",\n          children: wasooliErrorMessages.wasooli\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"wasooli\",\n          placeholder: translations[language].wasooliAmountt,\n          value: wasooliData.wasooli || '' // Fallback to empty string if undefined\n          ,\n          onChange: handleWasooliInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 700,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: e => {\n            e.preventDefault();\n            handleSaveWasooliClick();\n          },\n          children: translations[language].saveWasooli\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 15\n      }, this), selectedConsumerId === consumer.idconsumerkhata && isAddBaqayaVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-baqaya-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setIsAddBaqayaVisible(false),\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error-message\",\n          children: baqayaError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: translations[language].baqayaa,\n          value: baqayaToAdd,\n          onChange: handleBaqayaInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-baqaya-button\",\n          onClick: handleSaveBaqayaClick,\n          children: translations[language].save\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 15\n      }, this)]\n    }, consumer.idconsumerkhata, true, {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(ConfirmAddModal, {\n      isOpen: isAddConsumerConfirmVisible,\n      onConfirm: () => {\n        setIsAddConsumerConfirmVisible(false);\n        setIsFormVisible(true); // Show the form if the user confirms\n      },\n      onCancel: () => setIsAddConsumerConfirmVisible(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 7\n    }, this), isFormVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: handleCancelClick,\n        children: \"\\u2715\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-message\",\n        children: errorMessages.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"date\",\n        placeholder: translations[language].datee,\n        value: consumerData.date,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-message\",\n        children: errorMessages.consumerName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 762,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"consumerName\",\n        placeholder: translations[language].consumerNamee,\n        value: consumerData.consumerName,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-message\",\n        children: errorMessages.baqaya\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"baqaya\",\n        placeholder: translations[language].baqayaa,\n        value: consumerData.baqaya,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-button\",\n        onClick: handleSaveClick,\n        children: translations[language].save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-button\",\n      onClick: handleAddConsumerClick,\n      children: translations[language].addConsumer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 642,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConsumerKhata, \"UdXmwjGlF7Bt72rnIsY+wzP6bds=\");\n\n_c = ConsumerKhata;\nexport default ConsumerKhata;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConsumerKhata\");","map":{"version":3,"sources":["C:/Users/Faisal/Desktop/fullstack Projects/Diary Software/my-frontend/src/ConsumerKhata.jsx"],"names":["React","useState","useEffect","ConsumerKhata","getTodayDate","today","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","isFormVisible","setIsFormVisible","consumerData","setConsumerData","date","consumerName","baqaya","wasooliData","setWasooliData","wasooli","errorMessages","setErrorMessages","isDataSaved","setIsDataSaved","isUpdateMode","setIsUpdateMode","isAddBaqayaVisible","setIsAddBaqayaVisible","baqayaToAdd","setBaqayaToAdd","baqayaError","setBaqayaError","consumers","setConsumers","selectedConsumerId","setSelectedConsumerId","isConfirmModalVisible","setIsConfirmModalVisible","isAlertVisible","setIsAlertVisible","alertMessage","setAlertMessage","isAddConsumerConfirmVisible","setIsAddConsumerConfirmVisible","monthVisibility","setMonthVisibility","isWasooliVisible","setIsWasooliVisible","currentManaging","setCurrentManaging","monthYearButtonsVisibility","setMonthYearButtonsVisibility","language","setLanguage","deleteConfirmationData","setDeleteConfirmationData","consumerId","wasooliId","index","editingTransaction","setEditingTransaction","wasooliErrorMessages","setWasooliErrorMessages","translations","English","consumerKhata","addConsumer","save","update","manage","addBaqaya","showAll","hideAll","saveWasooli","delete","Khata","confirmAddConsumer","yes","no","deleteWasooliConfirm","close","Show","Hide","datee","consumerNamee","baqayaa","baqayaNumberr","wasooliAmountt","baqayaerror","wasooliDatee","Urdu","monthTranslations","January","February","March","April","May","June","July","August","September","October","November","December","fetchData","response","fetch","ok","Error","status","consumersData","json","updatedConsumersData","Promise","all","map","consumer","wasooliResponse","idconsumerkhata","console","log","wasooliTransactions","error","CustomModal","message","onClose","toggleMonthYearButtonsVisibility","prevState","newState","handleInputChange","e","name","value","target","newValue","parseInt","isNaN","prevErrors","prevData","handleSaveClick","errors","endpoint","method","headers","body","JSON","stringify","resetForm","handleCancelClick","handleUpdateClick","id","consumerToUpdate","find","handleAddBaqayaClick","handleBaqayaInputChange","handleSaveBaqayaClick","newBaqayaAmount","currentBaqaya","updatedBaqaya","updatedConsumers","toString","toggleMonthVisibility","monthYear","prevVisibility","ConfirmAddModal","isOpen","onConfirm","onCancel","handleAddConsumerClick","handleUpdateWasooliClick","transactionId","length","selectedWasooliCard","txn","idwasooli","Wasooli","handleManageClick","handleWasooliInputChange","handleConfirmDeletion","deleteResponse","errorData","handleCancelDeletion","handleDeleteWasooliClick","AlertModal","ConfirmationModal","handleSaveWasooliClick","wasooliAmount","payload","renderWasooliTransactions","transactions","transactionsByMonth","reduce","acc","transaction","toLocaleString","push","Object","entries","isButtonVisible","isDataVisible","lang","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './ConsumerKhata.css';\r\n\r\nconst ConsumerKhata = () => {\r\n\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Pad single digit months with a leading 0\r\n    const day = String(today.getDate()).padStart(2, '0'); // Pad single digit days with a leading 0\r\n    return `${year}-${month}-${day}`; // Format must be YYYY-MM-DD\r\n  };\r\n\r\n  const [isFormVisible, setIsFormVisible] = useState(false);\r\n  const [consumerData, setConsumerData] = useState({\r\n    date: getTodayDate(),\r\n    consumerName: '',\r\n    baqaya: '', // Initialize as a number\r\n  });\r\n  const [wasooliData, setWasooliData] = useState({\r\n    date: getTodayDate(),\r\n    wasooli: '',\r\n  });\r\n\r\n  const [errorMessages, setErrorMessages] = useState({\r\n    date: '',\r\n    consumerName: '',\r\n    baqaya: '',\r\n  });\r\n  const [isDataSaved, setIsDataSaved] = useState(false);\r\n  const [isUpdateMode, setIsUpdateMode] = useState(false);\r\n  const [isAddBaqayaVisible, setIsAddBaqayaVisible] = useState(false);\r\n  const [baqayaToAdd, setBaqayaToAdd] = useState('');\r\n  const [baqayaError, setBaqayaError] = useState('');\r\n  const [consumers, setConsumers] = useState([]);\r\n  const [selectedConsumerId, setSelectedConsumerId] = useState(null);\r\n  const [isConfirmModalVisible, setIsConfirmModalVisible] = useState(false);\r\n  const [isAlertVisible, setIsAlertVisible] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n  const [isAddConsumerConfirmVisible, setIsAddConsumerConfirmVisible] = useState(false);\r\n  const [monthVisibility, setMonthVisibility] = useState({})\r\n  const [isWasooliVisible, setIsWasooliVisible] = useState(false);\r\n  const [currentManaging, setCurrentManaging] = useState(null);\r\n  // Update this state to also include the wasooliId\r\n  const [monthYearButtonsVisibility, setMonthYearButtonsVisibility] = useState({});\r\n  const [language, setLanguage] = useState('English');\r\n  const [deleteConfirmationData, setDeleteConfirmationData] = useState({\r\n    consumerId: null,\r\n    wasooliId: null, // Add this line\r\n    index: null,\r\n  });\r\n  const [editingTransaction, setEditingTransaction] = useState(null);\r\n\r\n  const [wasooliErrorMessages, setWasooliErrorMessages] = useState({\r\n    date: '',\r\n    wasooli: '',\r\n  });\r\n\r\n  const translations = {\r\n    English: {\r\n      consumerKhata: \"Consumer Khata\",\r\n      addConsumer: \"Add Consumer\",\r\n      date: \"Date\",\r\n      consumerName: \"Consumer Name\",\r\n      baqaya: \"Baqaya\",\r\n      save: \"Save\",\r\n      update: \"Update\",\r\n      manage: \"Manage\",\r\n      addBaqaya: \"Add Baqaya\",\r\n      showAll: \"Show All\",\r\n      hideAll: \"Hide All\",\r\n      wasooli: \"Wasooli\",\r\n      saveWasooli: \"Save Wasooli\",\r\n      delete: \"Delete\",\r\n      Khata: \"Khata\",\r\n      confirmAddConsumer: \"Are you sure you want to add a new consumer?\",\r\n      yes: \"Yes\",\r\n      no: \"No\",\r\n      deleteWasooliConfirm: \"Are you sure you want to delete this Wasooli?\",\r\n      close: \"Close\",\r\n      Show: \"Show\",\r\n      Hide: \"Hide\",\r\n      datee: \"Please enter a date\",\r\n      consumerNamee: \"Please enter consumer name\",\r\n      baqayaa: \"Please enter baqaya amount\",\r\n      baqayaNumberr: \"Baqaya must be a number\",\r\n      wasooliAmountt: \"Please fill up the Wasooli amount\",\r\n      baqayaerror: \"Please fill up the baqaya amount\",\r\n      wasooliDatee: \"Date is required\"\r\n    },\r\n    Urdu: {\r\n      consumerKhata: \"صارف خاتہ \",\r\n      addConsumer: \"صارف شامل کریں\",\r\n      date: \"تاریخ\",\r\n      consumerName: \"صارف کا نام\",\r\n      baqaya: \"باقیہ\",\r\n      save: \"محفوظ کریں\",\r\n      update: \"اپ ڈیٹ\",\r\n      manage: \"انتظام کریں\",\r\n      addBaqaya: \"باقیہ شامل کریں\",\r\n      showAll: \"سب دکھائیں\",\r\n      hideAll: \"پوشیدہ کریں\",\r\n      wasooli: \"وصولی\",\r\n      saveWasooli: \"وصولی محفوظ کریں\",\r\n      delete: \"حذف کریں\",\r\n      confirmAddConsumer: \"کیا آپ واقعی نیا صارف شامل کرنا چاہتے ہیں؟\",\r\n      yes: \"جی ہاں\",\r\n      no: \"نہیں\",\r\n      Khata: \"خاتہ\",\r\n      Show: \"دکھائیں\",\r\n      Hide: \"چھپائیں\",\r\n      deleteWasooliConfirm: \"کیا آپ واقعی اس وصولی کو حذف کرنا چاہتے ہیں؟\",\r\n      close: \"بند کریں\",\r\n      datee: \"براہ کرم تاریخ درج کریں\",\r\n      consumerNamee: \"براہ کرم صارف کا نام درج کریں\",\r\n      baqayaa: \"براہ کرم باقیہ مقدار درج کریں\",\r\n      baqayaNumberr: \"باقیہ کو نمبر ہونا چاہئے\",\r\n      wasooliAmountt: \"براہ کرم وصولی کی رقم بھریں\",\r\n      wasooliDatee: \"تاریخ ضروری ہے\",\r\n      baqayaerror: \"برائے مہربانی باقیہ رقم بھریں\",\r\n    }\r\n\r\n  };\r\n  const monthTranslations = {\r\n    January: \"جنوری\",\r\n    February: \"فروری\",\r\n    March: \"مارچ\",\r\n    April: \"اپریل\",\r\n    May: \"مئی\",\r\n    June: \"جون\",\r\n    July: \"جولائی\",\r\n    August: \"اگست\",\r\n    September: \"ستمبر\",\r\n    October: \"اکتوبر\",\r\n    November: \"نومبر\",\r\n    December: \"دسمبر\",\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/consumerkhata');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const consumersData = await response.json();\r\n\r\n      // Process the data if necessary and update the state\r\n      // For each consumer, fetch their Wasooli transactions and update the state accordingly\r\n      const updatedConsumersData = await Promise.all(consumersData.map(async (consumer) => {\r\n        const wasooliResponse = await fetch(`http://localhost:3001/wasooli/${consumer.idconsumerkhata}`);\r\n        if (!wasooliResponse.ok) {\r\n          console.log(`Failed to fetch wasooli data for consumer ID: ${consumer.idconsumerkhata}`);\r\n          return consumer; // Return the consumer without wasooli data if fetch fails\r\n        }\r\n        const wasooliData = await wasooliResponse.json();\r\n        return { ...consumer, wasooliTransactions: wasooliData };\r\n      }));\r\n\r\n      // Update state with the processed and fetched data\r\n      setConsumers(updatedConsumersData);\r\n    } catch (error) {\r\n      console.error('Fetch error:', error);\r\n    }\r\n  };\r\n\r\n \r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n  const CustomModal = ({ message, onClose }) => {\r\n    return (\r\n      <div className=\"custom-modal-overlay\">\r\n        <div className=\"custom-modal\">\r\n          <div className=\"custom-modal-content\">\r\n            <p>{message}</p>\r\n            <button onClick={onClose}>Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const toggleMonthYearButtonsVisibility = (consumerId) => {\r\n\r\n    setMonthYearButtonsVisibility(prevState => {\r\n      const newState = {\r\n        ...prevState,\r\n        [consumerId]: !prevState[consumerId],\r\n      };\r\n\r\n      return newState;\r\n    });\r\n  };\r\n\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    let newValue = value;\r\n\r\n    // If the input is for baqaya, ensure it's handled as a number\r\n    if (name === 'baqaya') {\r\n      newValue = value !== '' ? parseInt(value, 10) : 0;\r\n      if (isNaN(newValue)) {\r\n        setErrorMessages((prevErrors) => ({\r\n          ...prevErrors,\r\n          baqaya: 'Baqaya must be a number',\r\n        }));\r\n        return; // Don't set the consumer data if the input is not a number\r\n      }\r\n    }\r\n\r\n    setConsumerData((prevData) => ({\r\n      ...prevData,\r\n      [name]: newValue,\r\n    }));\r\n\r\n    // Clear any error messages for this input\r\n    setErrorMessages((prevErrors) => ({\r\n      ...prevErrors,\r\n      [name]: '',\r\n    }));\r\n  };\r\n\r\n  const handleSaveClick = async () => {\r\n    const { date, consumerName, baqaya, idconsumerkhata } = consumerData;\r\n    let errors = {};\r\n\r\n    if (!date || !consumerName || !baqaya) {\r\n      errors = {\r\n        ...!date && { date: \"Please enter a date\" },\r\n        ...!consumerName && { consumerName: \"Please enter consumer name\" },\r\n        ...!baqaya && { baqaya: \"Please enter baqaya amount\" },\r\n      };\r\n      setErrorMessages(errors);\r\n      return;\r\n    }\r\n\r\n    const endpoint = idconsumerkhata ? `http://localhost:3001/consumerkhata/${idconsumerkhata}` : 'http://localhost:3001/consumerkhata';\r\n    const method = idconsumerkhata ? 'PUT' : 'POST';\r\n\r\n    try {\r\n      const response = await fetch(endpoint, {\r\n        method,\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          Date: date,\r\n          name: consumerName,\r\n          baqaya: parseInt(baqaya),\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n\r\n      await fetchData();\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setConsumerData({\r\n      date: '',\r\n      consumerName: '',\r\n      baqaya: '',\r\n    });\r\n    setIsFormVisible(false);\r\n    setErrorMessages({});\r\n  };\r\n\r\n\r\n  const handleCancelClick = () => {\r\n    setIsFormVisible(false);\r\n    setIsUpdateMode(false);\r\n  };\r\n\r\n  const handleUpdateClick = (id) => {\r\n    const consumerToUpdate = consumers.find(consumer => consumer.idconsumerkhata === id);\r\n    if (consumerToUpdate) {\r\n      setConsumerData({\r\n        date: consumerToUpdate.Date || '',\r\n        consumerName: consumerToUpdate.name || '',\r\n        baqaya: consumerToUpdate.baqaya || '',\r\n        idconsumerkhata: consumerToUpdate.idconsumerkhata, // Store the id in the state\r\n      });\r\n      setIsUpdateMode(true);\r\n      setIsFormVisible(true);\r\n    } else {\r\n      console.error(\"No consumer found with ID:\", id);\r\n    }\r\n  };\r\n\r\n\r\n  const handleAddBaqayaClick = () => {\r\n    setIsAddBaqayaVisible(true);\r\n  };\r\n\r\n  const handleBaqayaInputChange = (e) => {\r\n    const { value } = e.target;\r\n    setBaqayaToAdd(value);\r\n    setBaqayaError('');\r\n  };\r\n\r\n  const handleSaveBaqayaClick = async () => {\r\n    if (!baqayaToAdd) {\r\n      setBaqayaError('Please fill the Baqaya field');\r\n      return;\r\n    }\r\n    const newBaqayaAmount = parseInt(baqayaToAdd);\r\n    if (isNaN(newBaqayaAmount)) {\r\n      setBaqayaError('Invalid Baqaya amount');\r\n      return;\r\n    }\r\n\r\n    // Find the consumer to update\r\n    const consumerToUpdate = consumers.find(consumer => consumer.idconsumerkhata === selectedConsumerId);\r\n    if (!consumerToUpdate) {\r\n      console.error(\"Consumer not found\");\r\n      return;\r\n    }\r\n\r\n    // Ensure consumerToUpdate.baqaya is a number\r\n    const currentBaqaya = parseInt(consumerToUpdate.baqaya) || 0;\r\n\r\n    // Calculate updated baqaya\r\n    const updatedBaqaya = currentBaqaya + newBaqayaAmount;\r\n\r\n    // Send the update request to the server\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/consumerkhata/${selectedConsumerId}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          ...consumerToUpdate,\r\n          baqaya: updatedBaqaya, // Update with the calculated baqaya\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Update the local state to reflect the change\r\n      const updatedConsumers = consumers.map(consumer =>\r\n        consumer.idconsumerkhata === selectedConsumerId ? {\r\n          ...consumer,\r\n          baqaya: updatedBaqaya.toString(),\r\n        } : consumer\r\n      );\r\n\r\n      setConsumers(updatedConsumers);\r\n\r\n      setIsDataSaved(true);\r\n      setBaqayaToAdd('');\r\n      setIsAddBaqayaVisible(false);\r\n      setBaqayaError('');\r\n\r\n      // Optionally, refresh the data from the server to ensure UI consistency\r\n      fetchData();\r\n    } catch (error) {\r\n      console.error('Error updating baqaya:', error);\r\n      setBaqayaError('Failed to update baqaya');\r\n    }\r\n  };\r\n\r\n  const toggleMonthVisibility = (consumerId, monthYear) => {\r\n    setMonthVisibility(prevVisibility => ({\r\n      ...prevVisibility,\r\n      [consumerId]: {\r\n        ...prevVisibility[consumerId],\r\n        [monthYear]: !(prevVisibility[consumerId]?.[monthYear] ?? false),\r\n      },\r\n    }));\r\n  };\r\n  // Adjust handleSaveClick or create a new function to send the updated consumer data to the server\r\n  // This involves crafting a PUT request with the consumer's updated data\r\n\r\n\r\n  const ConfirmAddModal = ({ isOpen, onConfirm, onCancel }) => {\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n      <div className=\"confirm-modal-overlay\">\r\n        <div className=\"confirm-modal\">\r\n          <p> {translations[language].confirmAddConsumer}</p>\r\n          {/* Check these class names match your CSS */}\r\n          <button className=\"confirm-modal-button confirm-modal-button-yes\" onClick={onConfirm}> {translations[language].yes}</button>\r\n          <button className=\"confirm-modal-button confirm-modal-button-no\" onClick={onCancel}> {translations[language].no}</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  const handleAddConsumerClick = () => {\r\n    setIsAddConsumerConfirmVisible(true);\r\n  };\r\n\r\n  const handleUpdateWasooliClick = (consumerId, transactionId) => {\r\n    if (!consumerId || !transactionId) {\r\n      console.error('Missing consumer ID or transaction ID');\r\n      return;\r\n    }\r\n\r\n    const consumer = consumers.find(consumer => consumer.idconsumerkhata === consumerId);\r\n    if (!consumer) {\r\n      console.error('Consumer not found for ID:', consumerId);\r\n      setIsAlertVisible(true);\r\n      setAlertMessage(\"Error: Consumer not found\");\r\n      return;\r\n    }\r\n    console.log(\"Consumer found:\", consumer.name);\r\n\r\n    if (!consumer.wasooliTransactions || consumer.wasooliTransactions.length === 0) {\r\n      console.error('No transactions found for consumer:', consumer.name);\r\n      return;\r\n    }\r\n\r\n    console.log(\"Consumer's Wasooli Transactions:\", consumer.wasooliTransactions);\r\n\r\n    const selectedWasooliCard = consumer.wasooliTransactions.find(txn => txn.idwasooli.toString() === transactionId.toString());\r\n    if (!selectedWasooliCard) {\r\n      console.error('Wasooli transaction not found for ID:', transactionId, \"in consumer:\", consumer.name);\r\n      return;\r\n    }\r\n    console.log(\"Selected Wasooli Card:\", selectedWasooliCard);\r\n\r\n    // Update the form data and editing transaction state asynchronously\r\n    setWasooliData({\r\n      date: selectedWasooliCard.date,\r\n      wasooli: selectedWasooliCard.Wasooli.toString(),\r\n    });\r\n\r\n    setEditingTransaction({\r\n      consumerId: consumerId,\r\n      transactionId: transactionId,\r\n    });\r\n\r\n    setIsWasooliVisible(true);\r\n  };\r\n\r\n\r\n  const handleManageClick = (consumerId) => {\r\n    setSelectedConsumerId(consumerId);\r\n    setIsWasooliVisible(true);\r\n    setCurrentManaging(consumerId); // Reset Wasooli form data\r\n    setWasooliData({ date: '', Wasooli: '' });\r\n  };\r\n\r\n  const handleWasooliInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setWasooliData(prevState => ({\r\n      ...prevState,\r\n      [name]: value // Ensure this never sets `date` or `wasooli` to undefined\r\n    }));\r\n  };\r\n\r\n  const handleConfirmDeletion = async () => {\r\n    const { consumerId, wasooliId, index } = deleteConfirmationData;\r\n\r\n    if (!wasooliId) {\r\n      console.error(\"Wasooli ID is missing.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Delete the Wasooli transaction\r\n      const deleteResponse = await fetch(`http://localhost:3001/wasooli/${wasooliId}`, { method: 'DELETE' });\r\n\r\n      if (!deleteResponse.ok) {\r\n        const errorData = await deleteResponse.json();\r\n        throw new Error(errorData.message || 'Failed to delete Wasooli transaction.');\r\n      }\r\n\r\n      console.log(\"Wasooli transaction deleted successfully.\");\r\n\r\n      // Re-fetch updated consumer data to refresh local state\r\n      await fetchData();\r\n\r\n      console.log(\"Consumer data refreshed after Wasooli deletion.\");\r\n\r\n      // Reset the delete confirmation data and close the modal\r\n      setDeleteConfirmationData({ consumerId: null, wasooliId: null, index: null });\r\n      setIsConfirmModalVisible(false);\r\n    } catch (error) {\r\n      console.error('Error during Wasooli deletion:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleCancelDeletion = () => {\r\n    setIsConfirmModalVisible(false); // Hide the modal\r\n  };\r\n\r\n  const handleDeleteWasooliClick = (consumerId, wasooliId, index) => {\r\n    // Log the parameters to ensure they are being passed correctly\r\n    console.log(`Preparing to delete Wasooli with ID: ${wasooliId}, for Consumer ID: ${consumerId}, at Index: ${index}`);\r\n\r\n\r\n    // Set the deleteConfirmationData with the correct values\r\n    setDeleteConfirmationData({ consumerId, wasooliId, index });\r\n    setIsConfirmModalVisible(true);\r\n  };\r\n\r\n\r\n\r\n  const AlertModal = ({ isOpen, message, onClose }) => {\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n      <div className=\"alert-modal-overlay\">\r\n        <div className=\"alert-modal\">\r\n          <p>{message}</p>\r\n          <button onClick={onClose}>OK</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const ConfirmationModal = ({ onConfirm, onCancel }) => {\r\n    return (\r\n      <div className=\"confirmation-modal-overlay\">\r\n        <div className=\"confirmation-modal\">\r\n          <p> {translations[language].deleteWasooliConfirm}</p>\r\n          <button className=\"yes-button\" onClick={onConfirm}> {translations[language].yes}</button>\r\n          <button className=\"no-button\" onClick={onCancel}> {translations[language].no}</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleSaveWasooliClick = async () => {\r\n    try {\r\n      const wasooliAmount = parseInt(wasooliData.wasooli);\r\n\r\n      if (wasooliAmount <= 0) {\r\n        throw new Error(\"invalid Wasooli amount\");\r\n      }\r\n\r\n      if (isNaN(wasooliAmount) ) {\r\n        throw new Error(\"Please fill up the Wasooli amount\");\r\n      }\r\n\r\n      if (!wasooliData.date) {\r\n        throw new Error(\"Date is required\");\r\n      }\r\n\r\n      let payload = {\r\n        date: wasooliData.date,\r\n        Wasooli: wasooliAmount,\r\n      };\r\n\r\n      let endpoint = 'http://localhost:3001/wasooli';\r\n      let method = 'POST';\r\n\r\n      // If we're editing an existing transaction, adjust the endpoint and method.\r\n      // Otherwise, ensure the consumer ID is included in the payload for new transactions.\r\n      if (editingTransaction && editingTransaction.transactionId) {\r\n        endpoint += `/${editingTransaction.transactionId}`;\r\n        method = 'PUT';\r\n      } else {\r\n        // For new transactions, include the consumerId in the payload\r\n        if (!selectedConsumerId) {\r\n          throw new Error(\"Consumer ID is missing for new Wasooli transaction\");\r\n        }\r\n        payload = { ...payload, consumerId: selectedConsumerId };\r\n      }\r\n\r\n      const response = await fetch(endpoint, {\r\n        method: method,\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Failed to save Wasooli transaction\");\r\n      }\r\n\r\n      console.log(\"Wasooli transaction saved:\", await response.json());\r\n\r\n      setIsWasooliVisible(false);\r\n      setWasooliData({ date: '', wasooli: '' });\r\n      setEditingTransaction(null);\r\n      await fetchData();\r\n\r\n    } catch (error) {\r\n      console.error(\"Error saving Wasooli transaction:\", error);\r\n      setIsAlertVisible(true);\r\n      setAlertMessage(error.toString());\r\n    }\r\n  };\r\n\r\n  // Toggle visibility for an individual month (optional, if you need finer control)\r\n\r\n  const renderWasooliTransactions = (consumer) => {\r\n    // Ensure consumer.wasooliTransactions is an array.\r\n    const transactions = consumer.wasooliTransactions || [];\r\n    const transactionsByMonth = transactions.reduce((acc, transaction) => {\r\n      const monthYear = new Date(transaction.date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n      if (!acc[monthYear]) acc[monthYear] = [];\r\n      acc[monthYear].push(transaction);\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.entries(transactionsByMonth).map(([monthYear, transactions]) => {\r\n      // Check if the monthYear is visible based on the state.\r\n      const isButtonVisible = monthYearButtonsVisibility[consumer.idconsumerkhata];\r\n      const isDataVisible = monthVisibility[consumer.idconsumerkhata]?.[monthYear] ?? false;\r\n      return (\r\n\r\n        <div key={monthYear}>\r\n         {isButtonVisible && (\r\n            <button className=\"toggle-visibility-button\" onClick={() => toggleMonthVisibility(consumer.idconsumerkhata, monthYear)}>\r\n              {isDataVisible ? translations[language].Hide : translations[language].Show} {monthYear}\r\n            </button>\r\n          )} \r\n          {isDataVisible && transactions.map((transaction, index) => (\r\n            <div className=\"wasooli-card-horizontal\" key={index}>\r\n              {/* Ensure the property names match what's returned from the database. */}\r\n              <span>{translations[language].date} : {transaction.date}</span> {/* If your database returns 'date' in lowercase */}\r\n              <span>{translations[language].wasooli} : {transaction.Wasooli}</span> {/* If your database returns 'wasooli' in lowercase */}\r\n              <button className=\"updatee-button\" onClick={() => handleUpdateWasooliClick(consumer.idconsumerkhata, transaction.idwasooli)}>\r\n                {translations[language].update}\r\n              </button>\r\n              <button className=\"deletee-button\" onClick={() => handleDeleteWasooliClick(consumer.idconsumerkhata, transaction.idwasooli, index)}>\r\n                {translations[language].delete}\r\n              </button>\r\n\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"consumer-khata-container\">\r\n      <h1 className=\"header\">{translations[language].consumerKhata}</h1>\r\n      <button onClick={() => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English')} className=\"language-toggle\">\r\n        {language === 'English' ? 'اردو' : 'English'}\r\n      </button>\r\n      {isConfirmModalVisible && (\r\n        <ConfirmationModal onConfirm={handleConfirmDeletion} onCancel={handleCancelDeletion} />\r\n\r\n      )}\r\n      <AlertModal\r\n        isOpen={isAlertVisible}\r\n        message={alertMessage}\r\n        onClose={() => setIsAlertVisible(false)}\r\n      />\r\n      {\r\n        consumers.map((consumer) => (\r\n          <div className=\"consumer-card\" key={consumer.idconsumerkhata}>\r\n            <h2 className=\"consumer-name\">{consumer.name} {translations[language].Khata}</h2>\r\n            <p>{translations[language].date} : {consumer.Date}</p>\r\n            <p>{translations[language].consumerName} : {consumer.name}</p>\r\n            <p>{translations[language].baqaya} : {consumer.baqaya}</p>\r\n            <div className=\"action-buttons\">\r\n              <button className=\"manage-buttonn\" onClick={() => handleManageClick(consumer.idconsumerkhata)}>\r\n                {translations[language].manage}\r\n              </button>\r\n              <button className=\"add-baqaya-buttonn\" onClick={() => {\r\n                setIsAddBaqayaVisible(true);\r\n                setSelectedConsumerId(consumer.idconsumerkhata); // Ensure this is set when opening the Baqaya add form\r\n              }}>\r\n                {translations[language].addBaqaya}\r\n              </button>\r\n              <button className=\"update-buttonn\" onClick={() => handleUpdateClick(consumer.idconsumerkhata)}>\r\n                {translations[language].update}\r\n              </button>\r\n\r\n            </div>\r\n            <button className=\"global-toggle-buttonn\" onClick={() => toggleMonthYearButtonsVisibility(consumer.idconsumerkhata)}>\r\n              {monthYearButtonsVisibility[consumer.idconsumerkhata] ? translations[language].hideAll : translations[language].showAll}\r\n            </button>\r\n\r\n            {renderWasooliTransactions(consumer)}\r\n\r\n            {currentManaging === consumer.idconsumerkhata && isWasooliVisible && (\r\n              <div className=\"form-container wasooli-card\">\r\n                <h2>{translations[language].wasooli}</h2>\r\n                <button className=\"close-button\" onClick={() => setIsWasooliVisible(false)}>\r\n                  &#10005;\r\n                </button>\r\n                <span className=\"error-message\">{wasooliErrorMessages.date}</span>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date\"\r\n                  placeholder={translations[language].datee}\r\n                  value={wasooliData.date || ''}\r\n                  onChange={handleWasooliInputChange}\r\n                />\r\n\r\n                <span className=\"error-message\">{wasooliErrorMessages.wasooli}</span>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"wasooli\"\r\n                  placeholder={translations[language].wasooliAmountt}\r\n                  value={wasooliData.wasooli || ''} // Fallback to empty string if undefined\r\n                  onChange={handleWasooliInputChange}\r\n                />\r\n\r\n                <button className=\"save-button\" onClick={(e) => {\r\n                  e.preventDefault();\r\n                  handleSaveWasooliClick();\r\n                }}>\r\n                  {translations[language].saveWasooli}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n            {selectedConsumerId === consumer.idconsumerkhata && isAddBaqayaVisible && (\r\n              <div className=\"add-baqaya-card\">\r\n                <button className=\"close-button\" onClick={() => setIsAddBaqayaVisible(false)} >\r\n                  &#10005;\r\n                </button>\r\n                <span className=\"error-message\">{baqayaError}</span>\r\n                <input\r\n                  type=\"number\"\r\n                  placeholder={translations[language].baqayaa}\r\n                  value={baqayaToAdd}\r\n                  onChange={handleBaqayaInputChange}\r\n                />\r\n\r\n                <button className=\"save-baqaya-button\" onClick={handleSaveBaqayaClick}>\r\n                  {translations[language].save}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n          </div>\r\n\r\n        ))\r\n      }\r\n      <ConfirmAddModal\r\n        isOpen={isAddConsumerConfirmVisible}\r\n        onConfirm={() => {\r\n          setIsAddConsumerConfirmVisible(false);\r\n          setIsFormVisible(true); // Show the form if the user confirms\r\n        }}\r\n        onCancel={() => setIsAddConsumerConfirmVisible(false)}\r\n      />\r\n      {isFormVisible && (\r\n        <div className=\"form-container\">\r\n          <button className=\"close-button\" onClick={handleCancelClick}>\r\n            &#10005;\r\n          </button>\r\n          <span className=\"error-message\">{errorMessages.date}</span>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            placeholder={translations[language].datee}\r\n            value={consumerData.date}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <span className=\"error-message\">{errorMessages.consumerName}</span>\r\n          <input\r\n            type=\"text\"\r\n            name=\"consumerName\"\r\n            placeholder={translations[language].consumerNamee}\r\n            value={consumerData.consumerName}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <span className=\"error-message\">{errorMessages.baqaya}</span>\r\n          <input\r\n            type=\"text\"\r\n            name=\"baqaya\"\r\n            placeholder={translations[language].baqayaa}\r\n            value={consumerData.baqaya}\r\n            onChange={handleInputChange}\r\n          />\r\n\r\n          <button className=\"save-button\" onClick={handleSaveClick}>\r\n            {translations[language].save}\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      <button className=\"add-button\" onClick={handleAddConsumerClick}>\r\n        {translations[language].addConsumer}\r\n      </button>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConsumerKhata;"]},"metadata":{},"sourceType":"module"}