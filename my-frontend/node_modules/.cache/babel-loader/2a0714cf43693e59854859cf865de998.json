{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Faisal\\\\Desktop\\\\fullstack Projects\\\\Diary Software\\\\my-frontend\\\\src\\\\ConsumersDales.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './ConsumersDales.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConsumersDales = () => {\n  _s();\n\n  const [source, setSource] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [amount, setAmount] = useState('');\n  const [expenses, setExpenses] = useState([]);\n  const [editIndex, setEditIndex] = useState(-1);\n  const [showAlert, setShowAlert] = useState(false);\n  const [deleteIndex, setDeleteIndex] = useState(null);\n  const [groupVisibility, setGroupVisibility] = useState({});\n  const [globalVisibility, setGlobalVisibility] = useState(false);\n  const [showMonthlySales, setShowMonthlySales] = useState(false);\n  const [language, setLanguage] = useState('English'); // Default to English\n  // Define fetchData outside of useEffect\n\n  const [showModal, setShowModal] = useState(false); // You already have this for controlling the visibility of the modal\n\n  const [modalMessage, setModalMessage] = useState(''); // Add this line to manage the modal message\n\n  const translations = {\n    English: {\n      title: \"Consumer Sales\",\n      date: \"Date\",\n      name: \"Name\",\n      quantity: \"Quantity\",\n      pricePerKilo: \"Price per kilo\",\n      save: \"Save\",\n      monthlyConsumerSale: \"Monthly Consumer Sale\",\n      overallConsumerSale: \"Overall Consumers Sale\",\n      showAll: \"Show\",\n      hideAll: \"Hide \",\n      show: \"Show \",\n      hide: \"Hide \",\n      show1: \"Show All\",\n      hide1: \"Hide All\",\n      delete: \"Delete\",\n      update: \"Update\",\n      deletePrompt: \"Are you sure you want to delete this?\",\n      yes: \"Yes\",\n      no: \"No\",\n      consumerName: \"Consumer Name\",\n      total: \"Total\",\n      ConsumerName: \"Enter Consumer name \",\n      Quantity: \"Enter Milk Quantity\",\n      price: \"Enter price per kilo \",\n      KiloMilk: \"Kilo Milk\",\n      kaa: \"of\",\n      added: \"has been added\",\n      In: \"In\",\n      record: \"Record has been updated\"\n    },\n    Urdu: {\n      title: \"صارفین کی فروخت\",\n      date: \"تاریخ\",\n      name: \"نام\",\n      quantity: \"مقدار\",\n      pricePerKilo: \"فی کلو قیمت\",\n      save: \"محفوظ کریں\",\n      monthlyConsumerSale: \"ماہانہ صارفین کی فروخت\",\n      overallConsumerSale: \"کل صارفین کی فروخت\",\n      showAll: \" دیکھیں\",\n      hideAll: \" چھپائیں\",\n      show: \" دیکھیں\",\n      hide: \" چھپائیں\",\n      show1: \"سب دیکھیں\",\n      hide1: \"سب چھپائیں\",\n      delete: \"حذف کریں\",\n      update: \"اپ ڈیٹ\",\n      deletePrompt: \"کیا آپ واقعی اس  کو حذف کرنا چاہتے ہیں؟\",\n      yes: \"ہاں\",\n      no: \"نہیں\",\n      consumerName: \"صارف کا نام\",\n      total: \"کل\",\n      ConsumerName: \"صارف کا نام درج کریں \",\n      Quantity: \"دودھ کی مقدار درج کریں \",\n      price: \"فی کلو قیمت درج کریں \",\n      KiloMilk: \"کلو دودھ\",\n      kaa: \"کا\",\n      added: \" شامل ہوگیا ہے\",\n      In: \"میں\",\n      record: \"ریکارڈ اپ ڈیٹ ہو گیا ہے\"\n    }\n  };\n  const monthTranslations = {\n    January: \"جنوری\",\n    February: \"فروری\",\n    March: \"مارچ\",\n    April: \"اپریل\",\n    May: \"مئی\",\n    June: \"جون\",\n    July: \"جولائی\",\n    August: \"اگست\",\n    September: \"ستمبر\",\n    October: \"اکتوبر\",\n    November: \"نومبر\",\n    December: \"دسمبر\"\n  };\n\n  const fetchData = async () => {\n    try {\n      // Updated fetch request with explicit Accept header for JSON responses\n      const response = await fetch('http://localhost:3001/consumerssale', {\n        headers: {\n          'Accept': 'application/json' // Explicitly expect JSON responses\n\n        }\n      }); // Check if the response was successful\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      } // Validate content type to be JSON\n\n\n      const contentType = response.headers.get('content-type');\n\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('Expected JSON response, but received unexpected content type');\n      } // Parse the JSON response and process data\n\n\n      const data = await response.json();\n      const processedData = data.map(expense => ({ ...expense,\n        Quantity: parseFloat(expense.Quantity),\n        UnitPrice: parseFloat(expense.UnitPrice),\n        Total: expense.Total ? parseFloat(expense.Total).toFixed(2) : undefined\n      })); // Log processed data for debugging\n\n      console.log(\"Processed data:\", processedData); // Assuming setExpenses is a state setter from useState hook\n      // Update your component's state with the processed data\n\n      setExpenses(processedData);\n    } catch (error) {\n      // Log the error and optionally handle it by setting some error state\n      console.error('There was an error fetching the sales data:', error); // Assuming setError is a state setter for holding error information\n      // setError(error.message) or similar could be used here\n    }\n  };\n\n  useEffect(() => {\n    // Now you can call fetchData inside useEffect\n    fetchData();\n  }, []); // The empty dependency array ensures this runs only on mount\n  // ... rest of your component\n\n  const [date, setDate] = useState(() => {\n    const today = new Date();\n    const day = String(today.getDate()).padStart(2, '0');\n    const month = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\n    const year = today.getFullYear();\n    return `${year}-${month}-${day}`;\n  });\n\n  const toggleMonthlySalesVisibility = () => {\n    setShowMonthlySales(prevShow => !prevShow); // Toggle the visibility state\n  };\n\n  const toggleGroupVisibility = monthYear => {\n    setGlobalVisibility(prevGlobalState => {\n      if (!prevGlobalState) {\n        // If global visibility is off, ensure it stays off and don't toggle individual groups\n        console.warn(\"Global visibility is off. Can't toggle individual group visibility.\");\n        return prevGlobalState;\n      } // If global visibility is on, toggle the specific month/year group\n\n\n      setGroupVisibility(prevGroupVisibility => ({ ...prevGroupVisibility,\n        [monthYear]: !prevGroupVisibility[monthYear]\n      }));\n      return prevGlobalState; // Return the unchanged global state\n    });\n  };\n\n  const CustomModal = _ref => {\n    let {\n      message,\n      onClose\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-modal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this);\n  }; // Group expenses by month and year\n\n\n  const groupedExpenses = expenses.reduce((acc, expense) => {\n    // Ensure the date string is in the correct format (YYYY-MM-DD)\n    const expenseDate = expense.Date; // Adjust if the API gives a different property name for the date\n\n    const date = new Date(expenseDate);\n\n    if (isNaN(date.getTime())) {\n      console.error('Invalid date for expense:', expense);\n      return acc; // Skip this expense if the date is invalid\n    }\n\n    const monthYear = `${date.toLocaleString('default', {\n      month: 'long',\n      year: 'numeric'\n    })}`;\n\n    if (!acc[monthYear]) {\n      acc[monthYear] = [];\n    }\n\n    acc[monthYear].push(expense);\n    return acc;\n  }, {});\n\n  const handleSave = async e => {\n    e.preventDefault();\n    const expensePayload = {\n      Date: date,\n      Name: source,\n      Quantity: parseFloat(quantity),\n      UnitPrice: parseFloat(amount)\n    };\n\n    try {\n      let response;\n\n      if (editIndex >= 0) {\n        // Assuming your expense objects use 'idConsumersSale' as the key for ID\n        const expenseId = expenses[editIndex].idConsumersSale; // Adjust this line accordingly\n\n        response = await fetch(`http://localhost:3001/consumerssale/${expenseId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(expensePayload)\n        });\n        const monthYear = new Date(date).toLocaleString('default', {\n          month: 'long',\n          year: 'numeric'\n        });\n        const alertMessage = `${translations[language].record} `; // Replace alert(alertMessage); with:\n\n        setModalMessage(alertMessage);\n        setShowModal(true);\n      } else {\n        // Adding a new expense\n        response = await fetch('http://localhost:3001/consumerssale', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(expensePayload)\n        });\n        const monthYear = new Date(date).toLocaleString('default', {\n          month: 'long',\n          year: 'numeric'\n        });\n        const alertMessage = `${quantity} ${translations[language].KiloMilk} ${translations[language].added}`; // Replace alert(alertMessage); with:\n\n        setModalMessage(alertMessage);\n        setShowModal(true);\n      }\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      await fetchData(); // Refresh data\n      // Reset form fields and editIndex\n      //setDate('');\n\n      setSource('');\n      setQuantity('');\n      setAmount('');\n      setEditIndex(-1);\n    } catch (error) {\n      console.error('There was an error saving the sale:', error);\n    }\n  }; // This function is called when the delete button is clicked.\n  // It sets up the alert and marks which item should be deleted if confirmed.\n\n\n  const handleDelete = index => {\n    setShowAlert(true);\n    setDeleteIndex(index);\n  }; // This function is called when the user confirms the deletion.\n\n\n  const handleAlertConfirm = async isConfirmed => {\n    if (isConfirmed && deleteIndex != null) {\n      const expense = expenses[deleteIndex];\n\n      if (expense && expense.idConsumersSale) {\n        // Make sure the ID field matches your data structure\n        try {\n          const response = await fetch(`http://localhost:3001/consumerssale/${expense.idConsumersSale}`, {\n            method: 'DELETE',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n\n          const result = await response.json();\n          console.log(result.message); // Log the message from the backend\n          // Refresh the expenses list after deleting an expense\n\n          await fetchData();\n        } catch (error) {\n          console.error('There was an error deleting the sale:', error);\n        }\n      } else {\n        console.error('Attempted to delete an expense without a valid ID');\n      }\n    } // Reset the state regardless of whether the delete was successful or not\n\n\n    setDeleteIndex(null);\n    setShowAlert(false);\n  };\n\n  const getMonthlyExpenses = () => {\n    const monthlyExpenses = expenses.reduce((acc, expense) => {\n      // Check if the date is valid\n      const date = new Date(expense.Date);\n\n      if (isNaN(date.getTime())) {\n        console.error('Invalid date for expense:', expense);\n        return acc; // Skip this expense if the date is invalid\n      }\n\n      const monthYear = `${date.toLocaleString('default', {\n        month: 'long'\n      })} ${date.getFullYear()}`;\n      const expenseQuantity = parseFloat(expense.Quantity);\n      const expenseUnitPrice = parseFloat(expense.UnitPrice);\n      const monthlyTotal = !isNaN(expenseQuantity) && !isNaN(expenseUnitPrice) ? expenseQuantity * expenseUnitPrice : 0;\n\n      if (!acc[monthYear]) {\n        acc[monthYear] = 0;\n      }\n\n      acc[monthYear] += monthlyTotal;\n      return acc;\n    }, {});\n    return monthlyExpenses;\n  };\n\n  const getOverallExpenses = () => {\n    return expenses.reduce((acc, expense) => {\n      const expenseQuantity = parseFloat(expense.Quantity);\n      const expenseUnitPrice = parseFloat(expense.UnitPrice);\n      const total = expenseQuantity && expenseUnitPrice ? expenseQuantity * expenseUnitPrice : 0;\n      return acc + total;\n    }, 0);\n  };\n\n  const handleUpdate = index => {\n    const expense = expenses[index]; // Adjust these property names to match your actual expense object structure\n\n    setDate(expense.Date); // Assuming the date property is named \"Date\"\n\n    setSource(expense.Name); // Assuming the consumer name property is named \"Name\"\n\n    setQuantity(expense.Quantity.toString()); // Assuming the quantity property is named \"Quantity\"\n\n    setAmount(expense.UnitPrice.toString()); // Assuming the unit price property is named \"UnitPrice\"\n\n    setEditIndex(index);\n  };\n\n  const toggleGlobalVisibility = () => {\n    setGlobalVisibility(prevState => {\n      const newState = !prevState; // Update all group visibilities based on the new global state\n\n      const newGroupVisibility = Object.keys(groupVisibility).reduce((acc, key) => {\n        acc[key] = newState; // Show or hide all based on the new global state\n\n        return acc;\n      }, {});\n      setGroupVisibility(newGroupVisibility);\n      return newState;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expenditure-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"expenditure-title\",\n      children: translations[language].title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English'),\n      className: \"language-toggle\",\n      children: language === 'English' ? 'اردو' : 'English'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"expenditure-form\",\n      onSubmit: handleSave,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"date\",\n        className: \"expenditure-label\",\n        children: [translations[language].date, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"date\",\n        value: date,\n        onChange: e => setDate(e.target.value),\n        className: \"expenditure-input date-input\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"source\",\n        className: \"expenditure-label\",\n        children: [translations[language].name, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"source\",\n        value: source,\n        onChange: e => setSource(e.target.value),\n        className: \"expenditure-input\",\n        placeholder: translations[language].ConsumerName,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"quantity\",\n        className: \"expenditure-label\",\n        children: [translations[language].quantity, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"quantity\",\n        value: quantity,\n        onChange: e => setQuantity(e.target.value),\n        className: \"expenditure-input\",\n        placeholder: translations[language].Quantity,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"amount\",\n        className: \"expenditure-label\",\n        children: [translations[language].pricePerKilo, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"amount\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        className: \"expenditure-input\",\n        placeholder: translations[language].price,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"save-button\",\n        children: translations[language].save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), showModal && /*#__PURE__*/_jsxDEV(CustomModal, {\n      message: modalMessage,\n      onClose: () => setShowModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expenses-report\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [translations[language].monthlyConsumerSale, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleMonthlySalesVisibility,\n        className: \"toggle-all-button\",\n        children: showMonthlySales ? translations[language].hideAll : translations[language].showAll\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), showMonthlySales && Object.entries(getMonthlyExpenses()).map(_ref2 => {\n        let [monthYear, total] = _ref2;\n        // Split month and year\n        const [month, year] = monthYear.split(' '); // Translate the month name if available, otherwise, use the original name\n\n        const translatedMonth = language === 'Urdu' ? monthTranslations[month] || month : month; // Combine translated month and year\n\n        const translatedMonthYear = `${translatedMonth} ${year}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: 'green'\n          },\n          children: [translations[language].monthlySales, \" \", translatedMonthYear, \" : \", total]\n        }, monthYear, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [translations[language].overallConsumerSale, \":\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 58\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'green'\n          },\n          children: getOverallExpenses()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 64\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleGlobalVisibility,\n      className: \"global-toggle-button\",\n      children: globalVisibility ? translations[language].hide1 : translations[language].show1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 7\n    }, this), globalVisibility && Object.entries(groupedExpenses).map(_ref3 => {\n      let [monthYear, expensesList] = _ref3;\n      return (// Your existing map function\n        (() => {\n          // Move the statements outside of JSX\n          const monthYearArray = monthYear.split(' ');\n          const month = monthYearArray[0];\n          const year = monthYearArray[1]; // Translate the month name if the current language is Urdu\n\n          const translatedMonthName = language === 'Urdu' ? monthTranslations[month] || month : month; // Reconstruct the monthYear string with the possibly translated month name\n\n          const displayMonthYear = `${translatedMonthName} ${year}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                marginTop: 15\n              },\n              children: [displayMonthYear, /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => toggleGroupVisibility(monthYear),\n                className: \"toggle-button\",\n                children: groupVisibility[monthYear] ? translations[language].hide : translations[language].show\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 15\n            }, this), groupVisibility[monthYear] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"expenses-display\",\n              children: expensesList.map((expense, index) => {\n                const actualIndex = expenses.findIndex(e => e === expense);\n                const total = !isNaN(expense.Quantity) && !isNaN(expense.UnitPrice) ? (expense.Quantity * expense.UnitPrice).toFixed(2) : 'N/A';\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"expense-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [translations[language].date, \": \", expense.Date]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 504,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [translations[language].consumerName, \": \", expense.Name]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 505,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [translations[language].quantity, \": \", Number.isFinite(expense.Quantity) ? expense.Quantity : 'N/A']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 506,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [translations[language].pricePerKilo, \": \", Number.isFinite(expense.UnitPrice) ? expense.UnitPrice : 'N/A']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 507,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [translations[language].total, \": \", expense.Total]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 508,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleDelete(actualIndex),\n                    className: \"delete-button1\",\n                    children: translations[language].delete\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 510,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleUpdate(actualIndex),\n                    className: \"update-button\",\n                    children: translations[language].update\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 511,\n                    columnNumber: 25\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 503,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 17\n            }, this)]\n          }, monthYear, true, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 13\n          }, this);\n        })()\n      );\n    }), showAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert-dialog\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: translations[language].deletePrompt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAlertConfirm(true),\n        className: \"confirm-yes\",\n        children: translations[language].yes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAlertConfirm(false),\n        className: \"confirm-no\",\n        children: translations[language].no\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConsumersDales, \"9bx4JhzCFcfeY092lwf2yef4S8w=\");\n\n_c = ConsumersDales;\nexport default ConsumersDales;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConsumersDales\");","map":{"version":3,"sources":["C:/Users/Faisal/Desktop/fullstack Projects/Diary Software/my-frontend/src/ConsumersDales.jsx"],"names":["React","useState","useEffect","ConsumersDales","source","setSource","quantity","setQuantity","amount","setAmount","expenses","setExpenses","editIndex","setEditIndex","showAlert","setShowAlert","deleteIndex","setDeleteIndex","groupVisibility","setGroupVisibility","globalVisibility","setGlobalVisibility","showMonthlySales","setShowMonthlySales","language","setLanguage","showModal","setShowModal","modalMessage","setModalMessage","translations","English","title","date","name","pricePerKilo","save","monthlyConsumerSale","overallConsumerSale","showAll","hideAll","show","hide","show1","hide1","delete","update","deletePrompt","yes","no","consumerName","total","ConsumerName","Quantity","price","KiloMilk","kaa","added","In","record","Urdu","monthTranslations","January","February","March","April","May","June","July","August","September","October","November","December","fetchData","response","fetch","headers","ok","Error","status","contentType","get","includes","data","json","processedData","map","expense","parseFloat","UnitPrice","Total","toFixed","undefined","console","log","error","setDate","today","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","toggleMonthlySalesVisibility","prevShow","toggleGroupVisibility","monthYear","prevGlobalState","warn","prevGroupVisibility","CustomModal","message","onClose","groupedExpenses","reduce","acc","expenseDate","isNaN","getTime","toLocaleString","push","handleSave","e","preventDefault","expensePayload","Name","expenseId","idConsumersSale","method","body","JSON","stringify","alertMessage","handleDelete","index","handleAlertConfirm","isConfirmed","result","getMonthlyExpenses","monthlyExpenses","expenseQuantity","expenseUnitPrice","monthlyTotal","getOverallExpenses","handleUpdate","toString","toggleGlobalVisibility","prevState","newState","newGroupVisibility","Object","keys","key","lang","target","value","entries","split","translatedMonth","translatedMonthYear","color","monthlySales","expensesList","monthYearArray","translatedMonthName","displayMonthYear","marginTop","actualIndex","findIndex","Number","isFinite"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './ConsumersDales.css';\r\n\r\nconst ConsumersDales = () => {\r\n\r\n  const [source, setSource] = useState('');\r\n  const [quantity, setQuantity] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [editIndex, setEditIndex] = useState(-1);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [deleteIndex, setDeleteIndex] = useState(null);\r\n  const [groupVisibility, setGroupVisibility] = useState({});\r\n  const [globalVisibility, setGlobalVisibility] = useState(false);\r\n  const [showMonthlySales, setShowMonthlySales] = useState(false);\r\n  const [language, setLanguage] = useState('English'); // Default to English\r\n  // Define fetchData outside of useEffect\r\n  const [showModal, setShowModal] = useState(false); // You already have this for controlling the visibility of the modal\r\n  const [modalMessage, setModalMessage] = useState(''); // Add this line to manage the modal message\r\n\r\n  const translations = {\r\n    English: {\r\n      title: \"Consumer Sales\",\r\n      date: \"Date\",\r\n      name: \"Name\",\r\n      quantity: \"Quantity\",\r\n      pricePerKilo: \"Price per kilo\",\r\n      save: \"Save\",\r\n      monthlyConsumerSale: \"Monthly Consumer Sale\",\r\n      overallConsumerSale: \"Overall Consumers Sale\",\r\n      showAll: \"Show\",\r\n      hideAll: \"Hide \",\r\n      show: \"Show \",\r\n      hide: \"Hide \",\r\n      show1: \"Show All\",\r\n      hide1: \"Hide All\",\r\n      delete: \"Delete\",\r\n      update: \"Update\",\r\n      deletePrompt: \"Are you sure you want to delete this?\",\r\n      yes: \"Yes\",\r\n      no: \"No\",\r\n      consumerName: \"Consumer Name\",\r\n      total: \"Total\",\r\n      ConsumerName: \"Enter Consumer name \",\r\n      Quantity: \"Enter Milk Quantity\",\r\n      price: \"Enter price per kilo \",\r\n      KiloMilk: \"Kilo Milk\",\r\n      kaa: \"of\",\r\n      added: \"has been added\",\r\n      In: \"In\",\r\n      record: \"Record has been updated\",\r\n    },\r\n    Urdu: {\r\n      title: \"صارفین کی فروخت\",\r\n      date: \"تاریخ\",\r\n      name: \"نام\",\r\n      quantity: \"مقدار\",\r\n      pricePerKilo: \"فی کلو قیمت\",\r\n      save: \"محفوظ کریں\",\r\n      monthlyConsumerSale: \"ماہانہ صارفین کی فروخت\",\r\n      overallConsumerSale: \"کل صارفین کی فروخت\",\r\n      showAll: \" دیکھیں\",\r\n      hideAll: \" چھپائیں\",\r\n      show: \" دیکھیں\",\r\n      hide: \" چھپائیں\",\r\n      show1: \"سب دیکھیں\",\r\n      hide1: \"سب چھپائیں\",\r\n      delete: \"حذف کریں\",\r\n      update: \"اپ ڈیٹ\",\r\n      deletePrompt: \"کیا آپ واقعی اس  کو حذف کرنا چاہتے ہیں؟\",\r\n      yes: \"ہاں\",\r\n      no: \"نہیں\",\r\n      consumerName: \"صارف کا نام\",\r\n      total: \"کل\",\r\n      ConsumerName: \"صارف کا نام درج کریں \",\r\n      Quantity: \"دودھ کی مقدار درج کریں \",\r\n      price: \"فی کلو قیمت درج کریں \",\r\n      KiloMilk: \"کلو دودھ\",\r\n      kaa: \"کا\",\r\n      added: \" شامل ہوگیا ہے\",\r\n      In: \"میں\",\r\n      record: \"ریکارڈ اپ ڈیٹ ہو گیا ہے\",\r\n    }\r\n  };\r\n\r\n  const monthTranslations = {\r\n    January: \"جنوری\",\r\n    February: \"فروری\",\r\n    March: \"مارچ\",\r\n    April: \"اپریل\",\r\n    May: \"مئی\",\r\n    June: \"جون\",\r\n    July: \"جولائی\",\r\n    August: \"اگست\",\r\n    September: \"ستمبر\",\r\n    October: \"اکتوبر\",\r\n    November: \"نومبر\",\r\n    December: \"دسمبر\",\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n        // Updated fetch request with explicit Accept header for JSON responses\r\n        const response = await fetch('http://localhost:3001/consumerssale', {\r\n            headers: {\r\n                'Accept': 'application/json', // Explicitly expect JSON responses\r\n            },\r\n        });\r\n\r\n        // Check if the response was successful\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        // Validate content type to be JSON\r\n        const contentType = response.headers.get('content-type');\r\n        if (!contentType || !contentType.includes('application/json')) {\r\n            throw new Error('Expected JSON response, but received unexpected content type');\r\n        }\r\n\r\n        // Parse the JSON response and process data\r\n        const data = await response.json();\r\n        const processedData = data.map(expense => ({\r\n            ...expense,\r\n            Quantity: parseFloat(expense.Quantity),\r\n            UnitPrice: parseFloat(expense.UnitPrice),\r\n            Total: expense.Total ? parseFloat(expense.Total).toFixed(2) : undefined,\r\n        }));\r\n\r\n        // Log processed data for debugging\r\n        console.log(\"Processed data:\", processedData);\r\n\r\n        // Assuming setExpenses is a state setter from useState hook\r\n        // Update your component's state with the processed data\r\n        setExpenses(processedData);\r\n    } catch (error) {\r\n        // Log the error and optionally handle it by setting some error state\r\n        console.error('There was an error fetching the sales data:', error);\r\n\r\n        // Assuming setError is a state setter for holding error information\r\n        // setError(error.message) or similar could be used here\r\n    }\r\n};\r\n\r\n\r\n  useEffect(() => {\r\n    // Now you can call fetchData inside useEffect\r\n    fetchData();\r\n  }, []); // The empty dependency array ensures this runs only on mount\r\n\r\n  // ... rest of your component\r\n\r\n\r\n  const [date, setDate] = useState(() => {\r\n    const today = new Date();\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    const year = today.getFullYear();\r\n\r\n    return `${year}-${month}-${day}`;\r\n  });\r\n  const toggleMonthlySalesVisibility = () => {\r\n    setShowMonthlySales(prevShow => !prevShow); // Toggle the visibility state\r\n  };\r\n\r\n  const toggleGroupVisibility = (monthYear) => {\r\n    setGlobalVisibility(prevGlobalState => {\r\n      if (!prevGlobalState) {\r\n        // If global visibility is off, ensure it stays off and don't toggle individual groups\r\n        console.warn(\"Global visibility is off. Can't toggle individual group visibility.\");\r\n        return prevGlobalState;\r\n      }\r\n\r\n      // If global visibility is on, toggle the specific month/year group\r\n      setGroupVisibility(prevGroupVisibility => ({\r\n        ...prevGroupVisibility,\r\n        [monthYear]: !prevGroupVisibility[monthYear]\r\n      }));\r\n\r\n      return prevGlobalState; // Return the unchanged global state\r\n    });\r\n  };\r\n  const CustomModal = ({ message, onClose }) => {\r\n    return (\r\n      <div className=\"custom-modal-overlay\">\r\n        <div className=\"custom-modal\">\r\n          <div className=\"custom-modal-content\">\r\n            <p>{message}</p>\r\n            <button onClick={onClose}>Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Group expenses by month and year\r\n  const groupedExpenses = expenses.reduce((acc, expense) => {\r\n    // Ensure the date string is in the correct format (YYYY-MM-DD)\r\n    const expenseDate = expense.Date; // Adjust if the API gives a different property name for the date\r\n    const date = new Date(expenseDate);\r\n\r\n    if (isNaN(date.getTime())) {\r\n      console.error('Invalid date for expense:', expense);\r\n      return acc; // Skip this expense if the date is invalid\r\n    }\r\n\r\n    const monthYear = `${date.toLocaleString('default', { month: 'long', year: 'numeric' })}`;\r\n    if (!acc[monthYear]) {\r\n      acc[monthYear] = [];\r\n    }\r\n    acc[monthYear].push(expense);\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const expensePayload = {\r\n      Date: date,\r\n      Name: source,\r\n      Quantity: parseFloat(quantity),\r\n      UnitPrice: parseFloat(amount),\r\n    };\r\n\r\n    try {\r\n      let response;\r\n      if (editIndex >= 0) {\r\n        // Assuming your expense objects use 'idConsumersSale' as the key for ID\r\n        const expenseId = expenses[editIndex].idConsumersSale; // Adjust this line accordingly\r\n        response = await fetch(`http://localhost:3001/consumerssale/${expenseId}`, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n        });\r\n\r\n        const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n        const alertMessage = `${translations[language].record} `;\r\n\r\n        // Replace alert(alertMessage); with:\r\n        setModalMessage(alertMessage);\r\n        setShowModal(true);\r\n\r\n      } else {\r\n        // Adding a new expense\r\n        response = await fetch('http://localhost:3001/consumerssale', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n        });\r\n\r\n        const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n        const alertMessage = `${quantity} ${translations[language].KiloMilk} ${translations[language].added}`;\r\n        // Replace alert(alertMessage); with:\r\n        setModalMessage(alertMessage);\r\n        setShowModal(true);\r\n      }\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      await fetchData(); // Refresh data\r\n\r\n      // Reset form fields and editIndex\r\n      //setDate('');\r\n      setSource('');\r\n      setQuantity('');\r\n      setAmount('');\r\n      setEditIndex(-1);\r\n\r\n\r\n    } catch (error) {\r\n      console.error('There was an error saving the sale:', error);\r\n    }\r\n  };\r\n\r\n  // This function is called when the delete button is clicked.\r\n  // It sets up the alert and marks which item should be deleted if confirmed.\r\n  const handleDelete = (index) => {\r\n    setShowAlert(true);\r\n    setDeleteIndex(index);\r\n  };\r\n\r\n  // This function is called when the user confirms the deletion.\r\n  const handleAlertConfirm = async (isConfirmed) => {\r\n    if (isConfirmed && deleteIndex != null) {\r\n      const expense = expenses[deleteIndex];\r\n      if (expense && expense.idConsumersSale) { // Make sure the ID field matches your data structure\r\n        try {\r\n          const response = await fetch(`http://localhost:3001/consumerssale/${expense.idConsumersSale}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n\r\n          const result = await response.json();\r\n          console.log(result.message); // Log the message from the backend\r\n\r\n          // Refresh the expenses list after deleting an expense\r\n          await fetchData();\r\n\r\n        } catch (error) {\r\n          console.error('There was an error deleting the sale:', error);\r\n        }\r\n      } else {\r\n        console.error('Attempted to delete an expense without a valid ID');\r\n      }\r\n    }\r\n\r\n    // Reset the state regardless of whether the delete was successful or not\r\n    setDeleteIndex(null);\r\n    setShowAlert(false);\r\n  };\r\n\r\n\r\n  const getMonthlyExpenses = () => {\r\n    const monthlyExpenses = expenses.reduce((acc, expense) => {\r\n      // Check if the date is valid\r\n      const date = new Date(expense.Date);\r\n      if (isNaN(date.getTime())) {\r\n        console.error('Invalid date for expense:', expense);\r\n        return acc; // Skip this expense if the date is invalid\r\n      }\r\n\r\n      const monthYear = `${date.toLocaleString('default', { month: 'long' })} ${date.getFullYear()}`;\r\n      const expenseQuantity = parseFloat(expense.Quantity);\r\n      const expenseUnitPrice = parseFloat(expense.UnitPrice);\r\n      const monthlyTotal = !isNaN(expenseQuantity) && !isNaN(expenseUnitPrice) ? expenseQuantity * expenseUnitPrice : 0;\r\n\r\n      if (!acc[monthYear]) {\r\n        acc[monthYear] = 0;\r\n      }\r\n\r\n      acc[monthYear] += monthlyTotal;\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return monthlyExpenses;\r\n  };\r\n\r\n\r\n  const getOverallExpenses = () => {\r\n    return expenses.reduce((acc, expense) => {\r\n      const expenseQuantity = parseFloat(expense.Quantity);\r\n      const expenseUnitPrice = parseFloat(expense.UnitPrice);\r\n      const total = expenseQuantity && expenseUnitPrice ? expenseQuantity * expenseUnitPrice : 0;\r\n      return acc + total;\r\n    }, 0);\r\n  };\r\n\r\n  const handleUpdate = (index) => {\r\n    const expense = expenses[index];\r\n    // Adjust these property names to match your actual expense object structure\r\n    setDate(expense.Date); // Assuming the date property is named \"Date\"\r\n    setSource(expense.Name); // Assuming the consumer name property is named \"Name\"\r\n    setQuantity(expense.Quantity.toString()); // Assuming the quantity property is named \"Quantity\"\r\n    setAmount(expense.UnitPrice.toString()); // Assuming the unit price property is named \"UnitPrice\"\r\n    setEditIndex(index);\r\n  };\r\n  const toggleGlobalVisibility = () => {\r\n    setGlobalVisibility(prevState => {\r\n      const newState = !prevState;\r\n      // Update all group visibilities based on the new global state\r\n      const newGroupVisibility = Object.keys(groupVisibility).reduce((acc, key) => {\r\n        acc[key] = newState; // Show or hide all based on the new global state\r\n        return acc;\r\n      }, {});\r\n\r\n      setGroupVisibility(newGroupVisibility);\r\n      return newState;\r\n    });\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"expenditure-container\">\r\n      <h1 className=\"expenditure-title\">{translations[language].title}</h1>\r\n      <button onClick={() => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English')} className=\"language-toggle\">\r\n        {language === 'English' ? 'اردو' : 'English'}\r\n      </button>\r\n      <form className=\"expenditure-form\" onSubmit={handleSave}>\r\n        <label htmlFor=\"date\" className=\"expenditure-label\">{translations[language].date}:</label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          className=\"expenditure-input date-input\"\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"source\" className=\"expenditure-label\">{translations[language].name}:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"source\"\r\n          value={source}\r\n          onChange={(e) => setSource(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].ConsumerName}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"quantity\" className=\"expenditure-label\">{translations[language].quantity}:</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"quantity\"\r\n          value={quantity}\r\n          onChange={(e) => setQuantity(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].Quantity}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"amount\" className=\"expenditure-label\">{translations[language].pricePerKilo}:</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"amount\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].price}\r\n          required\r\n        />\r\n\r\n        <button type=\"submit\" className=\"save-button\">{translations[language].save}</button>\r\n      </form>\r\n      {showModal && (\r\n        <CustomModal\r\n          message={modalMessage}\r\n          onClose={() => setShowModal(false)}\r\n        />\r\n      )}\r\n      <div className=\"expenses-report\">\r\n        <h4>{translations[language].monthlyConsumerSale}:</h4>\r\n\r\n        <button onClick={toggleMonthlySalesVisibility} className=\"toggle-all-button\">\r\n          {showMonthlySales ? translations[language].hideAll : translations[language].showAll}\r\n        </button>\r\n\r\n        {showMonthlySales && Object.entries(getMonthlyExpenses()).map(([monthYear, total]) => {\r\n          // Split month and year\r\n          const [month, year] = monthYear.split(' ');\r\n\r\n          // Translate the month name if available, otherwise, use the original name\r\n          const translatedMonth = language === 'Urdu' ? monthTranslations[month] || month : month;\r\n\r\n          // Combine translated month and year\r\n          const translatedMonthYear = `${translatedMonth} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear} style={{ color: 'green' }}>\r\n              {translations[language].monthlySales} {translatedMonthYear} : {total}\r\n            </div>\r\n          );\r\n        })}\r\n\r\n\r\n        <h4>{translations[language].overallConsumerSale}:<br /><span style={{ color: 'green' }}>{getOverallExpenses()}</span></h4>\r\n      </div>\r\n      <button onClick={toggleGlobalVisibility} className=\"global-toggle-button\">\r\n        {globalVisibility ? translations[language].hide1 : translations[language].show1}\r\n      </button>\r\n\r\n      {globalVisibility && Object.entries(groupedExpenses).map(([monthYear, expensesList]) => (\r\n        // Your existing map function\r\n        (() => {\r\n          // Move the statements outside of JSX\r\n          const monthYearArray = monthYear.split(' ');\r\n          const month = monthYearArray[0];\r\n          const year = monthYearArray[1];\r\n\r\n          // Translate the month name if the current language is Urdu\r\n          const translatedMonthName = language === 'Urdu' ? (monthTranslations[month] || month) : month;\r\n\r\n          // Reconstruct the monthYear string with the possibly translated month name\r\n          const displayMonthYear = `${translatedMonthName} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear}>\r\n              <h3 style={{ marginTop: 15 }}>\r\n                {displayMonthYear}\r\n                <button\r\n                  onClick={() => toggleGroupVisibility(monthYear)}\r\n                  className=\"toggle-button\"\r\n                >\r\n                  {groupVisibility[monthYear] ? translations[language].hide : translations[language].show}\r\n                </button>\r\n              </h3>\r\n              {groupVisibility[monthYear] && (\r\n                <div className=\"expenses-display\">\r\n                  {expensesList.map((expense, index) => {\r\n                    const actualIndex = expenses.findIndex(e => e === expense);\r\n                    const total = (!isNaN(expense.Quantity) && !isNaN(expense.UnitPrice))\r\n                      ? (expense.Quantity * expense.UnitPrice).toFixed(2)\r\n                      : 'N/A';\r\n                    return (\r\n                      <div key={index} className=\"expense-card\">\r\n                        <div>{translations[language].date}: {expense.Date}</div>\r\n                        <div>{translations[language].consumerName}: {expense.Name}</div>\r\n                        <div>{translations[language].quantity}: {Number.isFinite(expense.Quantity) ? expense.Quantity : 'N/A'}</div>\r\n                        <div>{translations[language].pricePerKilo}: {Number.isFinite(expense.UnitPrice) ? expense.UnitPrice : 'N/A'}</div>\r\n                        <div>{translations[language].total}: {expense.Total}</div>\r\n\r\n                        <button onClick={() => handleDelete(actualIndex)} className=\"delete-button1\">{translations[language].delete}</button>\r\n                        <button onClick={() => handleUpdate(actualIndex)} className=\"update-button\">{translations[language].update}</button>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })()\r\n      ))}\r\n\r\n      {showAlert && (\r\n        <div className=\"alert-dialog\">\r\n          <p>{translations[language].deletePrompt}</p>\r\n          <button onClick={() => handleAlertConfirm(true)} className=\"confirm-yes\">{translations[language].yes}</button>\r\n          <button onClick={() => handleAlertConfirm(false)} className=\"confirm-no\" >{translations[language].no}</button>\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default ConsumersDales;\r\n"]},"metadata":{},"sourceType":"module"}