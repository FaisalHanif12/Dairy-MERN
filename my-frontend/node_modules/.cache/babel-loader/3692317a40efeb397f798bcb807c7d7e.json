{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Faisal\\\\Desktop\\\\fullstack Projects\\\\Diary Software\\\\my-frontend\\\\src\\\\RelativesKhata.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './RelativesKhata.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RelativesKhata = () => {\n  _s();\n\n  const [date, setDate] = useState(() => {\n    const today = new Date();\n    const day = String(today.getDate()).padStart(2, '0');\n    const month = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\n    const year = today.getFullYear();\n    return `${year}-${month}-${day}`;\n  });\n  const [source, setSource] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [amount, setAmount] = useState('');\n  const [expenses, setExpenses] = useState([]);\n  const [editIndex, setEditIndex] = useState(-1);\n  const [showAlert, setShowAlert] = useState(false);\n  const [deleteIndex, setDeleteIndex] = useState(null);\n  const [groupVisibility, setGroupVisibility] = useState({});\n  const [showMonthlySales, setShowMonthlySales] = useState(false);\n  const [globalVisibility, setGlobalVisibility] = useState(false);\n  const [showModal, setShowModal] = useState(false); // You already have this for controlling the visibility of the modal\n\n  const [modalMessage, setModalMessage] = useState(''); // Add this line to manage the modal message\n\n  const [language, setLanguage] = useState('English');\n  const translations = {\n    English: {\n      date: \"Date\",\n      name: \"Name\",\n      quantity: \"Quantity\",\n      pricePerKilo: \"Price per kilo\",\n      save: \"Save\",\n      monthlyRelativesSale: \"Monthly Relatives Sale\",\n      overallRelativesSale: \"Overall Relatives Sale\",\n      showAll: \"Show All\",\n      hideAll: \"Hide All\",\n      show: \"Show \",\n      hide: \"Hide \",\n      delete: \"Delete\",\n      update: \"Update\",\n      deletePrompt: \"Are you sure you want to delete this?\",\n      yes: \"Yes\",\n      no: \"No\",\n      total: \"Total\",\n      relativeName: \"Relative Name\",\n      enterRelativeName: \"Enter Relative Name\",\n      enterQuantity: \"Enter Quantity\",\n      enterPricePerKilo: \"Enter Price per kilo\",\n      relativesKhata: \"Relatives Sales\",\n      KiloMilk: \"Kilo Milk\",\n      kaa: \"of\",\n      added: \"has been added\",\n      In: \"In\",\n      expens: \"Expense\",\n      record: \"Record has been updated\"\n    },\n    Urdu: {\n      date: \"تاریخ\",\n      name: \"نام\",\n      quantity: \"مقدار\",\n      pricePerKilo: \"فی کلو قیمت\",\n      save: \"محفوظ کریں\",\n      monthlyRelativesSale: \"ماہانہ رشتہ داروں کی فروخت\",\n      overallRelativesSale: \"کل رشتہ داروں کی فروخت\",\n      showAll: \"سب دیکھیں\",\n      hideAll: \"سب چھپائیں\",\n      show: \"دیکھیں\",\n      hide: \"چھپائیں\",\n      delete: \"حذف کریں\",\n      update: \"اپ ڈیٹ\",\n      deletePrompt: \"کیا آپ واقعی اس  کو حذف کرنا چاہتے ہیں؟\",\n      yes: \"ہاں\",\n      no: \"نہیں\",\n      relativeName: \"رشتہ دار کا نام\",\n      enterRelativeName: \"رشتہ دار کا نام درج کریں\",\n      enterQuantity: \"مقدار درج کریں\",\n      enterPricePerKilo: \"فی کلو قیمت درج کریں\",\n      relativesKhata: \"رشتہ داروں کی فروخت\",\n      total: \"کل\",\n      KiloMilk: \"کلو دودھ\",\n      kaa: \"کا\",\n      added: \" شامل ہوگیا ہے\",\n      In: \"میں\",\n      record: \"ریکارڈ اپ ڈیٹ ہو گیا ہے\"\n    }\n  };\n  const monthTranslations = {\n    January: \"جنوری\",\n    February: \"فروری\",\n    March: \"مارچ\",\n    April: \"اپریل\",\n    May: \"مئی\",\n    June: \"جون\",\n    July: \"جولائی\",\n    August: \"اگست\",\n    September: \"ستمبر\",\n    October: \"اکتوبر\",\n    November: \"نومبر\",\n    December: \"دسمبر\"\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/relatives');\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const processedData = data.map(expense => ({ ...expense,\n        Quantity: parseFloat(expense.Quantity),\n        RUnitPrice: parseFloat(expense.RUnitPrice),\n        RTotal: expense.RTotal ? parseFloat(expense.RTotal).toFixed(2) : undefined\n      }));\n      setExpenses(processedData);\n    } catch (error) {\n      console.error('There was an error fetching the sales data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const toggleGroupVisibility = monthYear => {\n    setGlobalVisibility(prevGlobalState => {\n      if (!prevGlobalState) {\n        // If global visibility is off, ensure it stays off and don't toggle individual groups\n        console.warn(\"Global visibility is off. Can't toggle individual group visibility.\");\n        return prevGlobalState;\n      } // If global visibility is on, toggle the specific month/year group\n\n\n      setGroupVisibility(prevGroupVisibility => ({ ...prevGroupVisibility,\n        [monthYear]: !prevGroupVisibility[monthYear]\n      }));\n      return prevGlobalState; // Return the unchanged global state\n    });\n  };\n\n  const CustomModal = _ref => {\n    let {\n      message,\n      onClose\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-modal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }; // Group expenses by month and year\n\n\n  const groupedExpenses = expenses.reduce((acc, expense) => {\n    // Ensure the date string is in the correct format (YYYY-MM-DD)\n    const expenseDate = expense.Date; // Adjust if the API gives a different property name for the date\n\n    const date = new Date(expenseDate);\n\n    if (isNaN(date.getTime())) {\n      console.error('Invalid date for expense:', expense);\n      return acc; // Skip this expense if the date is invalid\n    }\n\n    const monthYear = `${date.toLocaleString('default', {\n      month: 'long',\n      year: 'numeric'\n    })}`;\n\n    if (!acc[monthYear]) {\n      acc[monthYear] = [];\n    }\n\n    acc[monthYear].push(expense);\n    return acc;\n  }, {});\n\n  const handleSave = async e => {\n    e.preventDefault();\n    const expensePayload = {\n      Date: date,\n      Rname: source,\n      Quantity: parseFloat(quantity),\n      RUnitPrice: parseFloat(amount)\n    };\n\n    try {\n      let response;\n\n      if (editIndex >= 0) {\n        // Assuming your expense objects use 'idConsumersSale' as the key for ID\n        const expenseId = expenses[editIndex].idRelatives; // Adjust this line accordingly\n\n        response = await fetch(`http://localhost:3001/relatives/${expenseId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(expensePayload)\n        });\n        const monthYear = new Date(date).toLocaleString('default', {\n          month: 'long',\n          year: 'numeric'\n        });\n        const alertMessage = `${translations[language].record} `; // Replace alert(alertMessage); with:\n\n        setModalMessage(alertMessage);\n        setShowModal(true);\n      } else {\n        // Adding a new expense\n        response = await fetch('http://localhost:3001/relatives', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(expensePayload)\n        });\n        const monthYear = new Date(date).toLocaleString('default', {\n          month: 'long',\n          year: 'numeric'\n        });\n        const alertMessage = `${quantity} ${translations[language].KiloMilk} ${translations[language].added}`; // Replace alert(alertMessage); with:\n\n        setModalMessage(alertMessage);\n        setShowModal(true);\n      }\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      await fetchData(); // Refresh data\n      // Reset form fields and editIndex\n      //setDate('');\n\n      setSource('');\n      setQuantity('');\n      setAmount('');\n      setEditIndex(-1);\n    } catch (error) {\n      console.error('There was an error saving the sale:', error);\n    }\n  };\n\n  const handleDelete = index => {\n    setShowAlert(true);\n    setDeleteIndex(index);\n  };\n\n  const handleAlertConfirm = async isConfirmed => {\n    if (isConfirmed && deleteIndex != null) {\n      const expense = expenses[deleteIndex];\n\n      if (expense && expense.idRelatives) {\n        // Make sure the ID field matches your data structure\n        try {\n          const response = await fetch(`http://localhost:3001/relatives/${expense.idRelatives}`, {\n            method: 'DELETE',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n\n          const result = await response.json();\n          console.log(result.message); // Log the message from the backend\n          // Refresh the expenses list after deleting an expense\n\n          await fetchData();\n        } catch (error) {\n          console.error('There was an error deleting the sale:', error);\n        }\n      } else {\n        console.error('Attempted to delete an expense without a valid ID');\n      }\n    } // Reset the state regardless of whether the delete was successful or not\n\n\n    setDeleteIndex(null);\n    setShowAlert(false);\n  };\n\n  const getMonthlyExpenses = () => {\n    const monthlyExpenses = expenses.reduce((acc, expense) => {\n      // Check if the date is valid\n      const date = new Date(expense.Date);\n\n      if (isNaN(date.getTime())) {\n        console.error('Invalid date for expense:', expense);\n        return acc; // Skip this expense if the date is invalid\n      }\n\n      const monthYear = `${date.toLocaleString('default', {\n        month: 'long'\n      })} ${date.getFullYear()}`;\n      const expenseQuantity = parseFloat(expense.Quantity);\n      const expenseUnitPrice = parseFloat(expense.RUnitPrice);\n      const monthlyTotal = !isNaN(expenseQuantity) && !isNaN(expenseUnitPrice) ? expenseQuantity * expenseUnitPrice : 0;\n\n      if (!acc[monthYear]) {\n        acc[monthYear] = 0;\n      }\n\n      acc[monthYear] += monthlyTotal;\n      return acc;\n    }, {});\n    return monthlyExpenses;\n  };\n\n  const getOverallExpenses = () => {\n    return expenses.reduce((acc, expense) => {\n      const expenseQuantity = parseFloat(expense.Quantity);\n      const expenseUnitPrice = parseFloat(expense.RUnitPrice);\n      const total = expenseQuantity && expenseUnitPrice ? expenseQuantity * expenseUnitPrice : 0;\n      return acc + total;\n    }, 0);\n  };\n\n  const handleUpdate = index => {\n    const expense = expenses[index];\n    setDate(expense.Date);\n    setSource(expense.Rname); // Corrected: ensure this matches your data structure\n\n    setQuantity(expense.Quantity.toString());\n    setAmount(expense.RUnitPrice.toString());\n    setEditIndex(index);\n  };\n\n  const toggleGlobalVisibility = () => {\n    setGlobalVisibility(prevState => {\n      const newState = !prevState; // Update all group visibilities based on the new global state\n\n      const newGroupVisibility = Object.keys(groupVisibility).reduce((acc, key) => {\n        acc[key] = newState; // Show or hide all based on the new global state\n\n        return acc;\n      }, {});\n      setGroupVisibility(newGroupVisibility);\n      return newState;\n    });\n  };\n\n  const toggleMonthlySalesVisibility = () => {\n    setShowMonthlySales(prevShow => !prevShow); // Toggle the visibility state\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expenditure-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"expenditure-title\",\n      children: translations[language].relativesKhata\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English'),\n      className: \"language-toggle\",\n      children: language === 'English' ? 'اردو' : 'English'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"expenditure-form\",\n      onSubmit: handleSave,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"date\",\n        className: \"expenditure-label\",\n        children: translations[language].date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"date\",\n        value: date,\n        onChange: e => setDate(e.target.value),\n        className: \"expenditure-input date-input\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"source\",\n        className: \"expenditure-label\",\n        children: translations[language].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"source\",\n        value: source,\n        onChange: e => setSource(e.target.value),\n        className: \"expenditure-input\",\n        placeholder: translations[language].relativeName,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"quantity\",\n        className: \"expenditure-label\",\n        children: translations[language].quantity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"quantity\",\n        value: quantity,\n        onChange: e => setQuantity(e.target.value),\n        className: \"expenditure-input\",\n        placeholder: translations[language].enterQuantity,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"amount\",\n        className: \"expenditure-label\",\n        children: translations[language].pricePerKilo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"amount\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        className: \"expenditure-input\",\n        placeholder: translations[language].enterPricePerKilo,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"save-button\",\n        children: translations[language].save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), showModal && /*#__PURE__*/_jsxDEV(CustomModal, {\n      message: modalMessage,\n      onClose: () => setShowModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expenses-report\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: translations[language].monthlyRelativesSale\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleMonthlySalesVisibility,\n        className: \"toggle-all-button\",\n        children: showMonthlySales ? translations[language].hideAll : translations[language].showAll\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), showMonthlySales && Object.entries(getMonthlyExpenses()).map(_ref2 => {\n        let [monthYear, total] = _ref2;\n        // Split month and year\n        const [month, year] = monthYear.split(' '); // Translate the month name if available, otherwise, use the original name\n\n        const translatedMonth = language === 'Urdu' ? monthTranslations[month] || month : month; // Combine translated month and year\n\n        const translatedMonthYear = `${translatedMonth} ${year}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: 'green'\n          },\n          children: [translations[language].monthlySales, \" \", translatedMonthYear, \" : \", total]\n        }, monthYear, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [translations[language].overallRelativesSale, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 58\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'green'\n          },\n          children: getOverallExpenses()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 64\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleGlobalVisibility,\n      className: \"global-toggle-button\",\n      children: globalVisibility ? translations[language].hideAll : translations[language].showAll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), globalVisibility && Object.entries(groupedExpenses).map(_ref3 => {\n      let [monthYear, expensesList] = _ref3;\n      return (// Move the statements outside of JSX\n        (() => {\n          const monthYearArray = monthYear.split(' ');\n          const month = monthYearArray[0];\n          const year = monthYearArray[1]; // Translate the month name if the current language is Urdu\n\n          const translatedMonthName = language === 'Urdu' ? monthTranslations[month] || month : month; // Reconstruct the monthYear string with the possibly translated month name\n\n          const displayMonthYear = `${translatedMonthName} ${year}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                marginTop: 15\n              },\n              children: [displayMonthYear, /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => toggleGroupVisibility(monthYear),\n                className: \"toggle-button\",\n                children: groupVisibility[monthYear] ? translations[language].hide : translations[language].show\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 15\n            }, this), groupVisibility[monthYear] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"expenses-display\",\n              children: expensesList.map((expense, index) => {\n                const actualIndex = expenses.findIndex(e => e === expense);\n                const total = expense.quantity * expense.amount;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"expense-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [translations[language].date, \" : \", expense.Date]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 456,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [translations[language].name, \" : \", expense.Rname]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 457,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [translations[language].quantity, \" : \", expense.Quantity]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 458,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [translations[language].pricePerKilo, \" : \", expense.RUnitPrice]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 459,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [translations[language].total, \" :  \", expense.RTotal]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 460,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleDelete(actualIndex),\n                    className: \"delete-button1\",\n                    children: [translations[language].delete, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 461,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleUpdate(actualIndex),\n                    className: \"update-button\",\n                    children: [translations[language].update, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 462,\n                    columnNumber: 25\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 17\n            }, this)]\n          }, monthYear, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this);\n        })()\n      );\n    }), showAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert-dialog\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [translations[language].deletePrompt, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAlertConfirm(true),\n        className: \"confirm-yes\",\n        children: [translations[language].yes, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAlertConfirm(false),\n        className: \"confirm-no\",\n        children: [translations[language].no, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 338,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RelativesKhata, \"N8z+aAFZ+oQ1trOGHaxrk8ozTy0=\");\n\n_c = RelativesKhata;\nexport default RelativesKhata;\n\nvar _c;\n\n$RefreshReg$(_c, \"RelativesKhata\");","map":{"version":3,"sources":["C:/Users/Faisal/Desktop/fullstack Projects/Diary Software/my-frontend/src/RelativesKhata.jsx"],"names":["React","useState","useEffect","RelativesKhata","date","setDate","today","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","source","setSource","quantity","setQuantity","amount","setAmount","expenses","setExpenses","editIndex","setEditIndex","showAlert","setShowAlert","deleteIndex","setDeleteIndex","groupVisibility","setGroupVisibility","showMonthlySales","setShowMonthlySales","globalVisibility","setGlobalVisibility","showModal","setShowModal","modalMessage","setModalMessage","language","setLanguage","translations","English","name","pricePerKilo","save","monthlyRelativesSale","overallRelativesSale","showAll","hideAll","show","hide","delete","update","deletePrompt","yes","no","total","relativeName","enterRelativeName","enterQuantity","enterPricePerKilo","relativesKhata","KiloMilk","kaa","added","In","expens","record","Urdu","monthTranslations","January","February","March","April","May","June","July","August","September","October","November","December","fetchData","response","fetch","ok","Error","status","data","json","processedData","map","expense","Quantity","parseFloat","RUnitPrice","RTotal","toFixed","undefined","error","console","toggleGroupVisibility","monthYear","prevGlobalState","warn","prevGroupVisibility","CustomModal","message","onClose","groupedExpenses","reduce","acc","expenseDate","isNaN","getTime","toLocaleString","push","handleSave","e","preventDefault","expensePayload","Rname","expenseId","idRelatives","method","headers","body","JSON","stringify","alertMessage","handleDelete","index","handleAlertConfirm","isConfirmed","result","log","getMonthlyExpenses","monthlyExpenses","expenseQuantity","expenseUnitPrice","monthlyTotal","getOverallExpenses","handleUpdate","toString","toggleGlobalVisibility","prevState","newState","newGroupVisibility","Object","keys","key","toggleMonthlySalesVisibility","prevShow","lang","target","value","entries","split","translatedMonth","translatedMonthYear","color","monthlySales","expensesList","monthYearArray","translatedMonthName","displayMonthYear","marginTop","actualIndex","findIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './RelativesKhata.css';\r\n\r\nconst RelativesKhata = () => {\r\n  const [date, setDate] = useState(() => {\r\n    const today = new Date();\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    const year = today.getFullYear();\r\n\r\n    return `${year}-${month}-${day}`;\r\n  });\r\n  const [source, setSource] = useState('');\r\n  const [quantity, setQuantity] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [editIndex, setEditIndex] = useState(-1);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [deleteIndex, setDeleteIndex] = useState(null);\r\n  const [groupVisibility, setGroupVisibility] = useState({});\r\n  const [showMonthlySales, setShowMonthlySales] = useState(false);\r\n  const [globalVisibility, setGlobalVisibility] = useState(false);\r\n  const [showModal, setShowModal] = useState(false); // You already have this for controlling the visibility of the modal\r\n  const [modalMessage, setModalMessage] = useState(''); // Add this line to manage the modal message\r\n  const [language, setLanguage] = useState('English');\r\n  const translations = {\r\n    English: {\r\n      date: \"Date\",\r\n      name: \"Name\",\r\n      quantity: \"Quantity\",\r\n      pricePerKilo: \"Price per kilo\",\r\n      save: \"Save\",\r\n      monthlyRelativesSale: \"Monthly Relatives Sale\",\r\n      overallRelativesSale: \"Overall Relatives Sale\",\r\n      showAll: \"Show All\",\r\n      hideAll: \"Hide All\",\r\n      show: \"Show \",\r\n      hide: \"Hide \",\r\n      delete: \"Delete\",\r\n      update: \"Update\",\r\n      deletePrompt: \"Are you sure you want to delete this?\",\r\n      yes: \"Yes\",\r\n      no: \"No\",\r\n      total: \"Total\",\r\n      relativeName: \"Relative Name\",\r\n      enterRelativeName: \"Enter Relative Name\",\r\n      enterQuantity: \"Enter Quantity\",\r\n      enterPricePerKilo: \"Enter Price per kilo\",\r\n      relativesKhata: \"Relatives Sales\",\r\n      KiloMilk:  \"Kilo Milk\", \r\n      kaa: \"of\",\r\n      added: \"has been added\",\r\n      In: \"In\", \r\n      expens : \"Expense\",\r\n      record: \"Record has been updated\",\r\n    },\r\n    Urdu: {\r\n      date: \"تاریخ\",\r\n      name: \"نام\",\r\n      quantity: \"مقدار\",\r\n      pricePerKilo: \"فی کلو قیمت\",\r\n      save: \"محفوظ کریں\",\r\n      monthlyRelativesSale: \"ماہانہ رشتہ داروں کی فروخت\",\r\n      overallRelativesSale: \"کل رشتہ داروں کی فروخت\",\r\n      showAll: \"سب دیکھیں\",\r\n      hideAll: \"سب چھپائیں\",\r\n      show: \"دیکھیں\",\r\n      hide: \"چھپائیں\",\r\n      delete: \"حذف کریں\",\r\n      update: \"اپ ڈیٹ\",\r\n      deletePrompt: \"کیا آپ واقعی اس  کو حذف کرنا چاہتے ہیں؟\",\r\n      yes: \"ہاں\",\r\n      no: \"نہیں\",\r\n      relativeName: \"رشتہ دار کا نام\",\r\n      enterRelativeName: \"رشتہ دار کا نام درج کریں\",\r\n      enterQuantity: \"مقدار درج کریں\",\r\n      enterPricePerKilo: \"فی کلو قیمت درج کریں\",\r\n      relativesKhata:   \"رشتہ داروں کی فروخت\",\r\n      total: \"کل\",\r\n      KiloMilk: \"کلو دودھ\",\r\n      kaa: \"کا\",\r\n      added: \" شامل ہوگیا ہے\",\r\n      In: \"میں\",\r\n      record: \"ریکارڈ اپ ڈیٹ ہو گیا ہے\",\r\n    }\r\n  };\r\n  const monthTranslations = {\r\n    January: \"جنوری\",\r\n    February: \"فروری\",\r\n    March: \"مارچ\",\r\n    April: \"اپریل\",\r\n    May: \"مئی\",\r\n    June: \"جون\",\r\n    July: \"جولائی\",\r\n    August: \"اگست\",\r\n    September: \"ستمبر\",\r\n    October: \"اکتوبر\",\r\n    November: \"نومبر\",\r\n    December: \"دسمبر\",\r\n  };\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/relatives');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      const processedData = data.map(expense => ({\r\n        ...expense,\r\n        Quantity: parseFloat(expense.Quantity),\r\n        RUnitPrice: parseFloat(expense.RUnitPrice),\r\n        RTotal: expense.RTotal ? parseFloat(expense.RTotal).toFixed(2) : undefined\r\n      }));\r\n      setExpenses(processedData);\r\n    } catch (error) {\r\n      console.error('There was an error fetching the sales data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const toggleGroupVisibility = (monthYear) => {\r\n    setGlobalVisibility(prevGlobalState => {\r\n      if (!prevGlobalState) {\r\n        // If global visibility is off, ensure it stays off and don't toggle individual groups\r\n        console.warn(\"Global visibility is off. Can't toggle individual group visibility.\");\r\n        return prevGlobalState;\r\n      }\r\n\r\n      // If global visibility is on, toggle the specific month/year group\r\n      setGroupVisibility(prevGroupVisibility => ({\r\n        ...prevGroupVisibility,\r\n        [monthYear]: !prevGroupVisibility[monthYear]\r\n      }));\r\n\r\n      return prevGlobalState; // Return the unchanged global state\r\n    });\r\n  };\r\n  const CustomModal = ({ message, onClose }) => {\r\n    return (\r\n      <div className=\"custom-modal-overlay\">\r\n        <div className=\"custom-modal\">\r\n           <div className=\"custom-modal-content\">\r\n            <p>{message}</p>\r\n            <button onClick={onClose}>Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  // Group expenses by month and year\r\n  const groupedExpenses = expenses.reduce((acc, expense) => {\r\n    // Ensure the date string is in the correct format (YYYY-MM-DD)\r\n    const expenseDate = expense.Date; // Adjust if the API gives a different property name for the date\r\n    const date = new Date(expenseDate);\r\n\r\n    if (isNaN(date.getTime())) {\r\n      console.error('Invalid date for expense:', expense);\r\n      return acc; // Skip this expense if the date is invalid\r\n    }\r\n\r\n    const monthYear = `${date.toLocaleString('default', { month: 'long', year: 'numeric' })}`;\r\n    if (!acc[monthYear]) {\r\n      acc[monthYear] = [];\r\n    }\r\n    acc[monthYear].push(expense);\r\n\r\n    return acc;\r\n  }, {});\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const expensePayload = {\r\n      Date: date,\r\n      Rname: source,\r\n      Quantity: parseFloat(quantity),\r\n      RUnitPrice: parseFloat(amount),\r\n    };\r\n\r\n    try {\r\n      let response;\r\n      if (editIndex >= 0) {\r\n        // Assuming your expense objects use 'idConsumersSale' as the key for ID\r\n        const expenseId = expenses[editIndex].idRelatives; // Adjust this line accordingly\r\n        response = await fetch(`http://localhost:3001/relatives/${expenseId}`, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n        });\r\n\r\n        const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n        const alertMessage = `${translations[language].record} `;\r\n  \r\n        // Replace alert(alertMessage); with:\r\n        setModalMessage(alertMessage);\r\n        setShowModal(true);\r\n\r\n      } else {\r\n        // Adding a new expense\r\n        response = await fetch('http://localhost:3001/relatives', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n        });\r\n\r\n      const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n      const alertMessage = `${quantity} ${translations[language].KiloMilk} ${translations[language].added}`;\r\n\r\n      // Replace alert(alertMessage); with:\r\n      setModalMessage(alertMessage);\r\n      setShowModal(true);\r\n\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      await fetchData(); // Refresh data\r\n\r\n      // Reset form fields and editIndex\r\n      //setDate('');\r\n      setSource('');\r\n      setQuantity('');\r\n      setAmount('');\r\n      setEditIndex(-1);\r\n      \r\n    } catch (error) {\r\n      console.error('There was an error saving the sale:', error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = (index) => {\r\n    setShowAlert(true);\r\n    setDeleteIndex(index);\r\n  };\r\n\r\n  const handleAlertConfirm = async (isConfirmed) => {\r\n    if (isConfirmed && deleteIndex != null) {\r\n      const expense = expenses[deleteIndex];\r\n      if (expense && expense.idRelatives) { // Make sure the ID field matches your data structure\r\n        try {\r\n          const response = await fetch(`http://localhost:3001/relatives/${expense.idRelatives}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n\r\n          const result = await response.json();\r\n          console.log(result.message); // Log the message from the backend\r\n\r\n          // Refresh the expenses list after deleting an expense\r\n          await fetchData();\r\n\r\n        } catch (error) {\r\n          console.error('There was an error deleting the sale:', error);\r\n        }\r\n      } else {\r\n        console.error('Attempted to delete an expense without a valid ID');\r\n      }\r\n    }\r\n\r\n    // Reset the state regardless of whether the delete was successful or not\r\n    setDeleteIndex(null);\r\n    setShowAlert(false);\r\n  };\r\n\r\n  const getMonthlyExpenses = () => {\r\n    const monthlyExpenses = expenses.reduce((acc, expense) => {\r\n      // Check if the date is valid\r\n      const date = new Date(expense.Date);\r\n      if (isNaN(date.getTime())) {\r\n        console.error('Invalid date for expense:', expense);\r\n        return acc; // Skip this expense if the date is invalid\r\n      }\r\n\r\n      const monthYear = `${date.toLocaleString('default', { month: 'long' })} ${date.getFullYear()}`;\r\n      const expenseQuantity = parseFloat(expense.Quantity);\r\n      const expenseUnitPrice = parseFloat(expense.RUnitPrice);\r\n      const monthlyTotal = !isNaN(expenseQuantity) && !isNaN(expenseUnitPrice) ? expenseQuantity * expenseUnitPrice : 0;\r\n\r\n      if (!acc[monthYear]) {\r\n        acc[monthYear] = 0;\r\n      }\r\n\r\n      acc[monthYear] += monthlyTotal;\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return monthlyExpenses;\r\n  };\r\n\r\n  const getOverallExpenses = () => {\r\n    return expenses.reduce((acc, expense) => {\r\n      const expenseQuantity = parseFloat(expense.Quantity);\r\n      const expenseUnitPrice = parseFloat(expense.RUnitPrice);\r\n      const total = expenseQuantity && expenseUnitPrice ? expenseQuantity * expenseUnitPrice : 0;\r\n      return acc + total;\r\n    }, 0);\r\n  };\r\n\r\n  const handleUpdate = (index) => {\r\n    const expense = expenses[index];\r\n    setDate(expense.Date);\r\n    setSource(expense.Rname); // Corrected: ensure this matches your data structure\r\n    setQuantity(expense.Quantity.toString());\r\n    setAmount(expense.RUnitPrice.toString());\r\n    setEditIndex(index);\r\n  };\r\n  const toggleGlobalVisibility = () => {\r\n    setGlobalVisibility(prevState => {\r\n      const newState = !prevState;\r\n      // Update all group visibilities based on the new global state\r\n      const newGroupVisibility = Object.keys(groupVisibility).reduce((acc, key) => {\r\n        acc[key] = newState; // Show or hide all based on the new global state\r\n        return acc;\r\n      }, {});\r\n\r\n      setGroupVisibility(newGroupVisibility);\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const toggleMonthlySalesVisibility = () => {\r\n    setShowMonthlySales(prevShow => !prevShow); // Toggle the visibility state\r\n\r\n\r\n  };\r\n  return (\r\n    <div className=\"expenditure-container\">\r\n      <h1 className=\"expenditure-title\">{translations[language].relativesKhata}</h1>\r\n      <button onClick={() => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English')} className=\"language-toggle\">\r\n        {language === 'English' ? 'اردو' : 'English'}\r\n      </button>\r\n      <form className=\"expenditure-form\" onSubmit={handleSave}>\r\n        <label htmlFor=\"date\" className=\"expenditure-label\">{translations[language].date}</label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          className=\"expenditure-input date-input\"\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"source\" className=\"expenditure-label\">{translations[language].name}</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"source\"\r\n          value={source}\r\n          onChange={(e) => setSource(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].relativeName}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"quantity\" className=\"expenditure-label\">{translations[language].quantity}</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"quantity\"\r\n          value={quantity}\r\n          onChange={(e) => setQuantity(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].enterQuantity}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"amount\" className=\"expenditure-label\">{translations[language].pricePerKilo}</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"amount\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].enterPricePerKilo}\r\n          required\r\n        />\r\n\r\n        <button type=\"submit\" className=\"save-button\">{translations[language].save}</button>\r\n      </form>\r\n      {showModal && (\r\n        <CustomModal\r\n          message={modalMessage}\r\n          onClose={() => setShowModal(false)}\r\n        />\r\n      )}\r\n      <div className=\"expenses-report\">\r\n        <h4>{translations[language].monthlyRelativesSale}</h4>\r\n\r\n        <button onClick={toggleMonthlySalesVisibility} className=\"toggle-all-button\">\r\n          {showMonthlySales ? translations[language].hideAll : translations[language].showAll}\r\n        </button>\r\n\r\n        {showMonthlySales && Object.entries(getMonthlyExpenses()).map(([monthYear, total]) => {\r\n          // Split month and year\r\n          const [month, year] = monthYear.split(' ');\r\n\r\n          // Translate the month name if available, otherwise, use the original name\r\n          const translatedMonth = language === 'Urdu' ? monthTranslations[month] || month : month;\r\n\r\n          // Combine translated month and year\r\n          const translatedMonthYear = `${translatedMonth} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear} style={{ color: 'green' }}>\r\n              {translations[language].monthlySales} {translatedMonthYear} : {total}\r\n            </div>\r\n          );\r\n        })}\r\n\r\n        <h4>{translations[language].overallRelativesSale}<br /><span style={{ color: 'green' }}>{getOverallExpenses()}</span></h4>\r\n      </div>\r\n      <button onClick={toggleGlobalVisibility} className=\"global-toggle-button\">\r\n        {globalVisibility ? translations[language].hideAll : translations[language].showAll}\r\n      </button>\r\n\r\n      {globalVisibility && Object.entries(groupedExpenses).map(([monthYear, expensesList]) => (\r\n        // Move the statements outside of JSX\r\n        (() => {\r\n          const monthYearArray = monthYear.split(' ');\r\n          const month = monthYearArray[0];\r\n          const year = monthYearArray[1];\r\n\r\n          // Translate the month name if the current language is Urdu\r\n          const translatedMonthName = language === 'Urdu' ? (monthTranslations[month] || month) : month;\r\n\r\n          // Reconstruct the monthYear string with the possibly translated month name\r\n          const displayMonthYear = `${translatedMonthName} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear}>\r\n              <h3 style={{ marginTop: 15 }}>\r\n                {displayMonthYear}\r\n                <button\r\n                  onClick={() => toggleGroupVisibility(monthYear)}\r\n                  className=\"toggle-button\"\r\n                >\r\n                  {groupVisibility[monthYear] ? translations[language].hide : translations[language].show}\r\n                </button>\r\n              </h3>\r\n              {groupVisibility[monthYear] && (\r\n                <div className=\"expenses-display\">\r\n                  {expensesList.map((expense, index) => {\r\n                    const actualIndex = expenses.findIndex(e => e === expense);\r\n                    const total = expense.quantity * expense.amount;\r\n                    return (\r\n                      <div key={index} className=\"expense-card\">\r\n                        <div>{translations[language].date} : {expense.Date}</div>\r\n                        <div>{translations[language].name} : {expense.Rname}</div>\r\n                        <div>{translations[language].quantity} : {expense.Quantity}</div>\r\n                        <div>{translations[language].pricePerKilo} : {expense.RUnitPrice}</div>\r\n                        <div>{translations[language].total} :  {expense.RTotal}</div>\r\n                        <button onClick={() => handleDelete(actualIndex)} className=\"delete-button1\">{translations[language].delete} </button>\r\n                        <button onClick={() => handleUpdate(actualIndex)} className=\"update-button\">{translations[language].update} </button>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })()\r\n      ))}\r\n\r\n\r\n      {showAlert && (\r\n        <div className=\"alert-dialog\">\r\n          <p>{translations[language].deletePrompt} </p>\r\n          <button onClick={() => handleAlertConfirm(true)} className=\"confirm-yes\">{translations[language].yes} </button>\r\n          <button onClick={() => handleAlertConfirm(false)} className=\"confirm-no\" >{translations[language].no} </button>\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default RelativesKhata;\r\n"]},"metadata":{},"sourceType":"module"}