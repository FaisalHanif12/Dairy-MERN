{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Faisal\\\\Desktop\\\\fullstack Projects\\\\Diary Software\\\\my-frontend\\\\src\\\\Sales.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Sales.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sales = () => {\n  _s();\n\n  const [salesSummary, setSalesSummary] = useState({});\n  const [language, setLanguage] = useState('English');\n  const [error, setError] = useState('');\n  useEffect(() => {\n    fetchSalesSummary();\n  }, []);\n\n  const fetchSalesSummary = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/sales_summary');\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      const data = await response.json();\n      setSalesSummary(data);\n    } catch (error) {\n      setError('Failed to fetch sales data');\n      console.error('There was an issue fetching sales data:', error);\n    }\n  };\n\n  const translations = {\n    English: {\n      title: \"Sales Summary\",\n      error: \"Error fetching data\",\n      totalSalesLabel: \"Sales before Expenditure\",\n      netSalesLabel: \"Sales after Expenditure\",\n      totalSales: \"Total Sales\",\n      netSales: \"Net Sales\"\n    },\n    Urdu: {\n      title: \"خلاصہ فروخت\",\n      error: \"ڈیٹا حاصل کرنے میں خرابی\",\n      totalSalesLabel: \"اخراجات سے پہلے فروخت\",\n      netSalesLabel: \"اخراجات کے بعد فروخت\",\n      totalSales: \"کل فروخت\",\n      netSales: \"خالص فروخت\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sales-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"sales-title\",\n      children: translations[language].title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"language-toggle\",\n      onClick: () => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English'),\n      children: language === 'English' ? 'اردو' : 'English'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: translations[language].error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sales-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sales-label\",\n        children: translations[language].totalSalesLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${translations[language].totalSales}: ${salesSummary.total_sales || 0}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sales-label\",\n        children: translations[language].netSalesLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${translations[language].netSales}: ${salesSummary.net_sales || 0}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Sales, \"Rk7rU9C/eAQYFqVIpvojwXRATTU=\");\n\n_c = Sales;\nexport default Sales;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sales\");","map":{"version":3,"sources":["C:/Users/Faisal/Desktop/fullstack Projects/Diary Software/my-frontend/src/Sales.jsx"],"names":["React","useState","useEffect","Sales","salesSummary","setSalesSummary","language","setLanguage","error","setError","fetchSalesSummary","response","fetch","ok","Error","data","json","console","translations","English","title","totalSalesLabel","netSalesLabel","totalSales","netSales","Urdu","lang","total_sales","net_sales"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Sales.css';\r\n\r\nconst Sales = () => {\r\n  const [salesSummary, setSalesSummary] = useState({});\r\n  const [language, setLanguage] = useState('English');\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchSalesSummary();\r\n  }, []);\r\n\r\n  const fetchSalesSummary = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/sales_summary');\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      setSalesSummary(data);\r\n    } catch (error) {\r\n      setError('Failed to fetch sales data');\r\n      console.error('There was an issue fetching sales data:', error);\r\n    }\r\n  };\r\n\r\n  const translations = {\r\n    English: {\r\n      title: \"Sales Summary\",\r\n      error: \"Error fetching data\",\r\n      totalSalesLabel: \"Sales before Expenditure\",\r\n      netSalesLabel: \"Sales after Expenditure\",\r\n      totalSales: \"Total Sales\",\r\n      netSales: \"Net Sales\"\r\n    },\r\n    Urdu: {\r\n      title: \"خلاصہ فروخت\",\r\n      error: \"ڈیٹا حاصل کرنے میں خرابی\",\r\n      totalSalesLabel: \"اخراجات سے پہلے فروخت\",\r\n      netSalesLabel: \"اخراجات کے بعد فروخت\",\r\n      totalSales: \"کل فروخت\",\r\n      netSales: \"خالص فروخت\"\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sales-container\">\r\n      <h1 className=\"sales-title\">{translations[language].title}</h1>\r\n      <button className=\"language-toggle\" onClick={() => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English')}>\r\n        {language === 'English' ? 'اردو' : 'English'}\r\n      </button>\r\n      {error && <p className=\"error\">{translations[language].error}</p>}\r\n      <div className=\"sales-summary\">\r\n        <p className=\"sales-label\">{translations[language].totalSalesLabel}</p>\r\n        <p>{`${translations[language].totalSales}: ${salesSummary.total_sales || 0}`}</p>\r\n        <p className=\"sales-label\">{translations[language].netSalesLabel}</p>\r\n        <p>{`${translations[language].netSales}: ${salesSummary.net_sales || 0}`}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sales;\r\n"]},"metadata":{},"sourceType":"module"}