{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Faisal\\\\Desktop\\\\fullstack Projects\\\\Diary Software\\\\my-frontend\\\\src\\\\Expenditure.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Expenditure.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenditure = () => {\n  _s();\n\n  const [date, setDate] = useState(() => {\n    const today = new Date();\n    const day = String(today.getDate()).padStart(2, '0');\n    const month = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\n    const year = today.getFullYear();\n    return `${year}-${month}-${day}`;\n  });\n  const [source, setSource] = useState('');\n  const [amount, setAmount] = useState('');\n  const [expenses, setExpenses] = useState([]);\n  const [editIndex, setEditIndex] = useState(-1);\n  const [showAlert, setShowAlert] = useState(false);\n  const [deleteIndex, setDeleteIndex] = useState(null);\n  const [groupVisibility, setGroupVisibility] = useState({});\n  const [showMonthlySales, setShowMonthlySales] = useState(false);\n  const [globalVisibility, setGlobalVisibility] = useState(false);\n  const [showModal, setShowModal] = useState(false); // You already have this for controlling the visibility of the modal\n\n  const [modalMessage, setModalMessage] = useState(''); // Add this line to manage the modal message\n\n  const [language, setLanguage] = useState('English');\n  const translations = {\n    English: {\n      title: \"Expenditure khata\",\n      date: \"Date\",\n      source: \"Source of Expense\",\n      amount: \"Amount\",\n      save: \"Save\",\n      monthlyExpenseReport: \"Monthly Expense Report:\",\n      overallExpenses: \"Overall Expenses:\",\n      showAll: \"Show All\",\n      hideAll: \"Hide All\",\n      delete: \"Delete\",\n      update: \"Update\",\n      deletePrompt: \"Are you sure you want to delete this expense?\",\n      yes: \"Yes\",\n      no: \"No\",\n      show: \"Show\",\n      hide: \"Hide\",\n      KiloMilk: \"Kilo Milk\",\n      kaa: \"of\",\n      added: \"has been added\",\n      In: \"In\",\n      enterSource: \"Enter source expense \",\n      enterAmount: \"Enter amount of Expense\",\n      expens: \"Expense\",\n      record: \"Record has been updated\"\n    },\n    Urdu: {\n      title: \"خرچے کا حساب\",\n      date: \"تاریخ\",\n      source: \"خرچے کا ذریعہ\",\n      amount: \"رقم\",\n      save: \"محفوظ کریں\",\n      monthlyExpenseReport: \"ماہانہ خرچہ رپورٹ:\",\n      overallExpenses: \"کل خرچے:\",\n      showAll: \"سب دیکھیں\",\n      hideAll: \"سب چھپائیں\",\n      delete: \"حذف کریں\",\n      update: \"اپ ڈیٹ\",\n      deletePrompt: \"کیا آپ واقعی اس خرچے کو حذف کرنا چاہتے ہیں؟\",\n      yes: \"ہاں\",\n      no: \"نہیں\",\n      show: \" دیکھیں\",\n      hide: \" چھپائیں\",\n      KiloMilk: \"کلو دودھ\",\n      kaa: \"کا\",\n      added: \" شامل ہوگیا ہے\",\n      In: \"میں\",\n      enterSource: \"خرچے کا ذریعہ درج کریں\",\n      enterAmount: \"خرچے کی رقم درج کریں\",\n      expens: 'اخراجات',\n      record: \"ریکارڈ اپ ڈیٹ ہو گیا ہے\"\n    }\n  };\n  const monthTranslations = {\n    January: \"جنوری\",\n    February: \"فروری\",\n    March: \"مارچ\",\n    April: \"اپریل\",\n    May: \"مئی\",\n    June: \"جون\",\n    July: \"جولائی\",\n    August: \"اگست\",\n    September: \"ستمبر\",\n    October: \"اکتوبر\",\n    November: \"نومبر\",\n    December: \"دسمبر\"\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/expenditure');\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const processedData = data.map(expense => ({ ...expense,\n        amount: parseFloat(expense.amount)\n      }));\n      setExpenses(processedData);\n    } catch (error) {\n      console.error('There was an error fetching the sales data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const toggleGroupVisibility = monthYear => {\n    setGlobalVisibility(prevGlobalState => {\n      if (!prevGlobalState) {\n        // If global visibility is off, ensure it stays off and don't toggle individual groups\n        console.warn(\"Global visibility is off. Can't toggle individual group visibility.\");\n        return prevGlobalState;\n      } // If global visibility is on, toggle the specific month/year group\n\n\n      setGroupVisibility(prevGroupVisibility => ({ ...prevGroupVisibility,\n        [monthYear]: !prevGroupVisibility[monthYear]\n      }));\n      return prevGlobalState; // Return the unchanged global state\n    });\n  };\n\n  const CustomModal = _ref => {\n    let {\n      message,\n      onClose\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-modal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  }; // Group expenses by month and year\n\n\n  const groupedExpenses = expenses.reduce((acc, expense) => {\n    // Ensure the date string is in the correct format (YYYY-MM-DD)\n    const expenseDate = expense.Date; // Adjust if the API gives a different property name for the date\n\n    const date = new Date(expenseDate);\n\n    if (isNaN(date.getTime())) {\n      console.error('Invalid date for expense:', expense);\n      return acc; // Skip this expense if the date is invalid\n    }\n\n    const monthYear = `${date.toLocaleString('default', {\n      month: 'long',\n      year: 'numeric'\n    })}`;\n\n    if (!acc[monthYear]) {\n      acc[monthYear] = [];\n    }\n\n    acc[monthYear].push(expense);\n    return acc;\n  }, {});\n\n  const handleSave = async e => {\n    e.preventDefault();\n    const expensePayload = {\n      Date: date,\n      source: source,\n      amount: parseFloat(amount)\n    };\n\n    try {\n      let response;\n\n      if (editIndex >= 0) {\n        // Assuming your expense objects use 'idConsumersSale' as the key for ID\n        const expenseId = expenses[editIndex].idexpenditure; // Adjust this line accordingly\n\n        response = await fetch(`http://localhost:3001/expenditure/${expenseId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(expensePayload)\n        });\n        const monthYear = new Date(date).toLocaleString('default', {\n          month: 'long',\n          year: 'numeric'\n        });\n        const alertMessage = `${translations[language].record} `; // Replace alert(alertMessage); with:\n\n        setModalMessage(alertMessage);\n        setShowModal(true);\n      } else {\n        // Adding a new expense\n        response = await fetch('http://localhost:3001/expenditure', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(expensePayload)\n        });\n        const monthYear = new Date(date).toLocaleString('default', {\n          month: 'long',\n          year: 'numeric'\n        });\n        const alertMessage = `${amount} ${translations[language].expens} ${translations[language].added} `; // Replace alert(alertMessage); with:\n\n        setModalMessage(alertMessage);\n        setShowModal(true);\n      }\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      await fetchData(); // Refresh data\n\n      setSource('');\n      setAmount('');\n      setEditIndex(-1);\n    } catch (error) {\n      console.error('There was an error saving the sale:', error);\n    }\n  };\n\n  const toggleGlobalVisibility = () => {\n    setGlobalVisibility(prevState => {\n      const newState = !prevState; // Update all group visibilities based on the new global state\n\n      const newGroupVisibility = Object.keys(groupVisibility).reduce((acc, key) => {\n        acc[key] = newState; // Show or hide all based on the new global state\n\n        return acc;\n      }, {});\n      setGroupVisibility(newGroupVisibility);\n      return newState;\n    });\n  };\n\n  const toggleMonthlySalesVisibility = () => {\n    setShowMonthlySales(prevShow => !prevShow); // Toggle the visibility state\n  };\n\n  const handleDelete = index => {\n    setShowAlert(true);\n    setDeleteIndex(index);\n  };\n\n  const handleAlertConfirm = async isConfirmed => {\n    if (isConfirmed && deleteIndex != null) {\n      const expense = expenses[deleteIndex];\n\n      if (expense && expense.idexpenditure) {\n        // Make sure the ID field matches your data structure\n        try {\n          const response = await fetch(`http://localhost:3001/expenditure/${expense.idexpenditure}`, {\n            method: 'DELETE',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n\n          const result = await response.json();\n          console.log(result.message); // Log the message from the backend\n          // Refresh the expenses list after deleting an expense\n\n          await fetchData();\n        } catch (error) {\n          console.error('There was an error deleting the sale:', error);\n        }\n      } else {\n        console.error('Attempted to delete an expense without a valid ID');\n      }\n    } // Reset the state regardless of whether the delete was successful or not\n\n\n    setDeleteIndex(null);\n    setShowAlert(false);\n  };\n\n  const getMonthlyExpenses = () => {\n    return expenses.reduce((acc, expense) => {\n      const expenseDate = new Date(expense.Date); // Adjust according to your actual data structure\n\n      const monthYear = `${expenseDate.toLocaleString('default', {\n        month: 'long'\n      })} ${expenseDate.getFullYear()}`;\n      const expenseAmount = isNaN(parseFloat(expense.amount)) ? 0 : parseFloat(expense.amount);\n      if (!acc[monthYear]) acc[monthYear] = 0;\n      acc[monthYear] += expenseAmount;\n      return acc;\n    }, {});\n  };\n\n  const getOverallExpenses = () => {\n    return expenses.reduce((acc, expense) => acc + expense.amount, 0);\n  };\n\n  const handleUpdate = index => {\n    const expense = expenses[index]; // Correctly assign values from the expense object\n\n    setDate(expense.Date); // Ensure the property names match your data structure\n\n    setSource(expense.source); // This should be the source, not the total or any other field\n\n    setAmount(expense.amount.toString());\n    setEditIndex(index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expenditure-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"expenditure-title\",\n      children: translations[language].title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English'),\n      className: \"language-toggle\",\n      children: language === 'English' ? 'اردو' : 'English'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"expenditure-form\",\n      onSubmit: handleSave,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"date\",\n        className: \"expenditure-label\",\n        children: translations[language].date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"date\",\n        value: date,\n        onChange: e => setDate(e.target.value),\n        className: \"expenditure-input date-input\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"source\",\n        className: \"expenditure-label\",\n        children: translations[language].source\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"source\",\n        value: source,\n        onChange: e => setSource(e.target.value),\n        className: \"expenditure-input\",\n        placeholder: translations[language].enterSource,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"amount\",\n        className: \"expenditure-label\",\n        children: translations[language].amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"amount\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        className: \"expenditure-input\",\n        placeholder: translations[language].enterAmount,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"save-button\",\n        children: translations[language].save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), showModal && /*#__PURE__*/_jsxDEV(CustomModal, {\n      message: modalMessage,\n      onClose: () => setShowModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expenses-report\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: translations[language].monthlyExpenseReport\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleMonthlySalesVisibility,\n        className: \"toggle-all-button\",\n        children: showMonthlySales ? translations[language].hideAll : translations[language].showAll\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), showMonthlySales && Object.entries(getMonthlyExpenses()).map(_ref2 => {\n        let [monthYear, total] = _ref2;\n        // Split month and year\n        const [month, year] = monthYear.split(' '); // Translate the month name if available, otherwise, use the original name\n\n        const translatedMonth = language === 'Urdu' ? monthTranslations[month] || month : month; // Combine translated month and year\n\n        const translatedMonthYear = `${translatedMonth} ${year}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: 'green'\n          },\n          children: [translations[language].monthlySales, \" \", translatedMonthYear, \" : \", total]\n        }, monthYear, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [translations[language].overallExpenses, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 53\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'green'\n          },\n          children: getOverallExpenses()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 59\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleGlobalVisibility,\n      className: \"global-toggle-button\",\n      children: globalVisibility ? translations[language].hideAll : translations[language].showAll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), globalVisibility && Object.entries(groupedExpenses).map(_ref3 => {\n      let [monthYear, expensesList] = _ref3;\n      return (() => {\n        const monthYearArray = monthYear.split(' ');\n        const month = monthYearArray[0];\n        const year = monthYearArray[1]; // Translate the month name if the current language is Urdu\n\n        const translatedMonthName = language === 'Urdu' ? monthTranslations[month] || month : month; // Reconstruct the monthYear string with the possibly translated month name\n\n        const displayMonthYear = `${translatedMonthName} ${year}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              marginTop: 15\n            },\n            children: [displayMonthYear, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleGroupVisibility(monthYear),\n              className: \"toggle-button\",\n              children: groupVisibility[monthYear] ? translations[language].hide : translations[language].show\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 15\n          }, this), groupVisibility[monthYear] && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"expenses-display\",\n            children: expensesList.map((expense, index) => {\n              const actualIndex = expenses.findIndex(e => e === expense);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"expense-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [translations[language].date, \" : \", expense.Date]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 423,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [translations[language].source, \" : \", expense.source]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 424,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [translations[language].amount, \" : \", expense.amount]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleDelete(actualIndex),\n                  className: \"delete-button1\",\n                  children: [translations[language].delete, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleUpdate(actualIndex),\n                  className: \"update-button\",\n                  children: [translations[language].update, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 427,\n                  columnNumber: 25\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 17\n          }, this)]\n        }, monthYear, true, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }, this);\n      })();\n    }), showAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert-dialog\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [translations[language].deletePrompt, \" :\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAlertConfirm(true),\n        className: \"confirm-yes\",\n        children: [translations[language].yes, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAlertConfirm(false),\n        className: \"confirm-no\",\n        children: [translations[language].no, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Expenditure, \"4Tmr85H++KiqIUc3Cnj2a8p+/Pw=\");\n\n_c = Expenditure;\nexport default Expenditure;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenditure\");","map":{"version":3,"sources":["C:/Users/Faisal/Desktop/fullstack Projects/Diary Software/my-frontend/src/Expenditure.jsx"],"names":["React","useState","useEffect","Expenditure","date","setDate","today","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","source","setSource","amount","setAmount","expenses","setExpenses","editIndex","setEditIndex","showAlert","setShowAlert","deleteIndex","setDeleteIndex","groupVisibility","setGroupVisibility","showMonthlySales","setShowMonthlySales","globalVisibility","setGlobalVisibility","showModal","setShowModal","modalMessage","setModalMessage","language","setLanguage","translations","English","title","save","monthlyExpenseReport","overallExpenses","showAll","hideAll","delete","update","deletePrompt","yes","no","show","hide","KiloMilk","kaa","added","In","enterSource","enterAmount","expens","record","Urdu","monthTranslations","January","February","March","April","May","June","July","August","September","October","November","December","fetchData","response","fetch","ok","Error","status","data","json","processedData","map","expense","parseFloat","error","console","toggleGroupVisibility","monthYear","prevGlobalState","warn","prevGroupVisibility","CustomModal","message","onClose","groupedExpenses","reduce","acc","expenseDate","isNaN","getTime","toLocaleString","push","handleSave","e","preventDefault","expensePayload","expenseId","idexpenditure","method","headers","body","JSON","stringify","alertMessage","toggleGlobalVisibility","prevState","newState","newGroupVisibility","Object","keys","key","toggleMonthlySalesVisibility","prevShow","handleDelete","index","handleAlertConfirm","isConfirmed","result","log","getMonthlyExpenses","expenseAmount","getOverallExpenses","handleUpdate","toString","lang","target","value","entries","total","split","translatedMonth","translatedMonthYear","color","monthlySales","expensesList","monthYearArray","translatedMonthName","displayMonthYear","marginTop","actualIndex","findIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Expenditure.css';\r\n\r\nconst Expenditure = () => {\r\n  const [date, setDate] = useState(() => {\r\n    const today = new Date();\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    const year = today.getFullYear();\r\n\r\n    return `${year}-${month}-${day}`;\r\n  });\r\n  const [source, setSource] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [editIndex, setEditIndex] = useState(-1);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [deleteIndex, setDeleteIndex] = useState(null);\r\n  const [groupVisibility, setGroupVisibility] = useState({});\r\n  const [showMonthlySales, setShowMonthlySales] = useState(false);\r\n  const [globalVisibility, setGlobalVisibility] = useState(false);\r\n  const [showModal, setShowModal] = useState(false); // You already have this for controlling the visibility of the modal\r\n  const [modalMessage, setModalMessage] = useState(''); // Add this line to manage the modal message\r\n  const [language, setLanguage] = useState('English');\r\n\r\n  const translations = {\r\n\r\n    English: {\r\n      title: \"Expenditure khata\",\r\n      date: \"Date\",\r\n      source: \"Source of Expense\",\r\n      amount: \"Amount\",\r\n      save: \"Save\",\r\n      monthlyExpenseReport: \"Monthly Expense Report:\",\r\n      overallExpenses: \"Overall Expenses:\",\r\n      showAll: \"Show All\",\r\n      hideAll: \"Hide All\",\r\n      delete: \"Delete\",\r\n      update: \"Update\",\r\n      deletePrompt: \"Are you sure you want to delete this expense?\",\r\n      yes: \"Yes\",\r\n      no: \"No\",\r\n      show: \"Show\",\r\n      hide: \"Hide\",\r\n      KiloMilk: \"Kilo Milk\",\r\n      kaa: \"of\",\r\n      added: \"has been added\",\r\n      In: \"In\",\r\n      enterSource :\"Enter source expense \",\r\n      enterAmount: \"Enter amount of Expense\",\r\n      expens : \"Expense\",\r\n   \r\n      record: \"Record has been updated\",\r\n    },\r\n    Urdu: {\r\n      title: \"خرچے کا حساب\",\r\n      date: \"تاریخ\",\r\n      source: \"خرچے کا ذریعہ\",\r\n      amount: \"رقم\",\r\n      save: \"محفوظ کریں\",\r\n      monthlyExpenseReport: \"ماہانہ خرچہ رپورٹ:\",\r\n      overallExpenses: \"کل خرچے:\",\r\n      showAll: \"سب دیکھیں\",\r\n      hideAll: \"سب چھپائیں\",\r\n      delete: \"حذف کریں\",\r\n      update: \"اپ ڈیٹ\",\r\n      deletePrompt: \"کیا آپ واقعی اس خرچے کو حذف کرنا چاہتے ہیں؟\",\r\n      yes: \"ہاں\",\r\n      no: \"نہیں\",\r\n      show: \" دیکھیں\",\r\n      hide: \" چھپائیں\",\r\n      KiloMilk: \"کلو دودھ\",\r\n      kaa: \"کا\",\r\n      added: \" شامل ہوگیا ہے\",\r\n      In: \"میں\",\r\n      enterSource: \"خرچے کا ذریعہ درج کریں\",\r\n      enterAmount: \"خرچے کی رقم درج کریں\",\r\n      expens : 'اخراجات',\r\n      record: \"ریکارڈ اپ ڈیٹ ہو گیا ہے\",\r\n    },\r\n\r\n  };\r\n\r\n  const monthTranslations = {\r\n    January: \"جنوری\",\r\n    February: \"فروری\",\r\n    March: \"مارچ\",\r\n    April: \"اپریل\",\r\n    May: \"مئی\",\r\n    June: \"جون\",\r\n    July: \"جولائی\",\r\n    August: \"اگست\",\r\n    September: \"ستمبر\",\r\n    October: \"اکتوبر\",\r\n    November: \"نومبر\",\r\n    December: \"دسمبر\",\r\n  };\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/expenditure');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      const processedData = data.map(expense => ({\r\n        ...expense,\r\n        amount: parseFloat(expense.amount),\r\n\r\n      }));\r\n      setExpenses(processedData);\r\n    } catch (error) {\r\n      console.error('There was an error fetching the sales data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const toggleGroupVisibility = (monthYear) => {\r\n    setGlobalVisibility(prevGlobalState => {\r\n      if (!prevGlobalState) {\r\n        // If global visibility is off, ensure it stays off and don't toggle individual groups\r\n        console.warn(\"Global visibility is off. Can't toggle individual group visibility.\");\r\n        return prevGlobalState;\r\n      }\r\n\r\n      // If global visibility is on, toggle the specific month/year group\r\n      setGroupVisibility(prevGroupVisibility => ({\r\n        ...prevGroupVisibility,\r\n        [monthYear]: !prevGroupVisibility[monthYear]\r\n      }));\r\n\r\n      return prevGlobalState; // Return the unchanged global state\r\n    });\r\n  };\r\n  const CustomModal = ({ message, onClose }) => {\r\n    return (\r\n      <div className=\"custom-modal-overlay\">\r\n        <div className=\"custom-modal\">\r\n          <div className=\"custom-modal-content\">\r\n            <p>{message}</p>\r\n            <button onClick={onClose}>Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  // Group expenses by month and year\r\n  const groupedExpenses = expenses.reduce((acc, expense) => {\r\n    // Ensure the date string is in the correct format (YYYY-MM-DD)\r\n    const expenseDate = expense.Date; // Adjust if the API gives a different property name for the date\r\n    const date = new Date(expenseDate);\r\n\r\n    if (isNaN(date.getTime())) {\r\n      console.error('Invalid date for expense:', expense);\r\n      return acc; // Skip this expense if the date is invalid\r\n    }\r\n\r\n    const monthYear = `${date.toLocaleString('default', { month: 'long', year: 'numeric' })}`;\r\n    if (!acc[monthYear]) {\r\n      acc[monthYear] = [];\r\n    }\r\n    acc[monthYear].push(expense);\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const expensePayload = {\r\n      Date: date,\r\n      source: source,\r\n\r\n      amount: parseFloat(amount),\r\n    };\r\n\r\n    try {\r\n      let response;\r\n      if (editIndex >= 0) {\r\n        // Assuming your expense objects use 'idConsumersSale' as the key for ID\r\n        const expenseId = expenses[editIndex].idexpenditure; // Adjust this line accordingly\r\n        response = await fetch(`http://localhost:3001/expenditure/${expenseId}`, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n        });\r\n\r\n        const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n        const alertMessage = `${translations[language].record} `;\r\n\r\n        // Replace alert(alertMessage); with:\r\n        setModalMessage(alertMessage);\r\n        setShowModal(true);\r\n\r\n\r\n      } else {\r\n        // Adding a new expense\r\n        response = await fetch('http://localhost:3001/expenditure', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(expensePayload),\r\n          \r\n        });\r\n\r\n        const monthYear = new Date(date).toLocaleString('default', { month: 'long', year: 'numeric' });\r\n        const alertMessage = `${amount} ${translations[language].expens} ${translations[language].added} `;\r\n        // Replace alert(alertMessage); with:\r\n        setModalMessage(alertMessage);\r\n        setShowModal(true);\r\n\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      await fetchData(); // Refresh data\r\n\r\n      setSource('');\r\n      setAmount('');\r\n      setEditIndex(-1);\r\n\r\n    \r\n    } catch (error) {\r\n      console.error('There was an error saving the sale:', error);\r\n    }\r\n  };\r\n  const toggleGlobalVisibility = () => {\r\n    setGlobalVisibility(prevState => {\r\n      const newState = !prevState;\r\n      // Update all group visibilities based on the new global state\r\n      const newGroupVisibility = Object.keys(groupVisibility).reduce((acc, key) => {\r\n        acc[key] = newState; // Show or hide all based on the new global state\r\n        return acc;\r\n      }, {});\r\n\r\n      setGroupVisibility(newGroupVisibility);\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const toggleMonthlySalesVisibility = () => {\r\n    setShowMonthlySales(prevShow => !prevShow); // Toggle the visibility state\r\n  };\r\n\r\n  const handleDelete = (index) => {\r\n    setShowAlert(true);\r\n    setDeleteIndex(index);\r\n  };\r\n\r\n  const handleAlertConfirm = async (isConfirmed) => {\r\n    if (isConfirmed && deleteIndex != null) {\r\n      const expense = expenses[deleteIndex];\r\n      if (expense && expense.idexpenditure) { // Make sure the ID field matches your data structure\r\n        try {\r\n          const response = await fetch(`http://localhost:3001/expenditure/${expense.idexpenditure}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n\r\n          const result = await response.json();\r\n          console.log(result.message); // Log the message from the backend\r\n\r\n          // Refresh the expenses list after deleting an expense\r\n          await fetchData();\r\n\r\n        } catch (error) {\r\n          console.error('There was an error deleting the sale:', error);\r\n        }\r\n      } else {\r\n        console.error('Attempted to delete an expense without a valid ID');\r\n      }\r\n    }\r\n\r\n    // Reset the state regardless of whether the delete was successful or not\r\n    setDeleteIndex(null);\r\n    setShowAlert(false);\r\n  };\r\n\r\n  const getMonthlyExpenses = () => {\r\n    return expenses.reduce((acc, expense) => {\r\n      const expenseDate = new Date(expense.Date); // Adjust according to your actual data structure\r\n      const monthYear = `${expenseDate.toLocaleString('default', { month: 'long' })} ${expenseDate.getFullYear()}`;\r\n      const expenseAmount = isNaN(parseFloat(expense.amount)) ? 0 : parseFloat(expense.amount);\r\n\r\n      if (!acc[monthYear]) acc[monthYear] = 0;\r\n      acc[monthYear] += expenseAmount;\r\n\r\n      return acc;\r\n    }, {});\r\n  };\r\n\r\n\r\n  const getOverallExpenses = () => {\r\n\r\n    return expenses.reduce((acc, expense) => acc + expense.amount, 0);\r\n  };\r\n\r\n  const handleUpdate = (index) => {\r\n    const expense = expenses[index];\r\n    // Correctly assign values from the expense object\r\n    setDate(expense.Date); // Ensure the property names match your data structure\r\n    setSource(expense.source); // This should be the source, not the total or any other field\r\n    setAmount(expense.amount.toString());\r\n    setEditIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"expenditure-container\">\r\n      <h1 className=\"expenditure-title\">{translations[language].title}</h1>\r\n      <button onClick={() => setLanguage(lang => lang === 'English' ? 'Urdu' : 'English')} className=\"language-toggle\">\r\n        {language === 'English' ? 'اردو' : 'English'}\r\n      </button>\r\n      <form className=\"expenditure-form\" onSubmit={handleSave}>\r\n        <label htmlFor=\"date\" className=\"expenditure-label\">{translations[language].date}</label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          className=\"expenditure-input date-input\"\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"source\" className=\"expenditure-label\">{translations[language].source}</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"source\"\r\n          value={source}\r\n          onChange={(e) => setSource(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].enterSource}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"amount\" className=\"expenditure-label\">{translations[language].amount}</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"amount\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          className=\"expenditure-input\"\r\n          placeholder={translations[language].enterAmount}\r\n          required\r\n        />\r\n\r\n        <button type=\"submit\" className=\"save-button\">{translations[language].save}</button>\r\n      </form>\r\n      {showModal && (\r\n        <CustomModal\r\n          message={modalMessage}\r\n          onClose={() => setShowModal(false)}\r\n        />\r\n      )}\r\n      <div className=\"expenses-report\">\r\n        <h4>{translations[language].monthlyExpenseReport}</h4>\r\n\r\n        <button onClick={toggleMonthlySalesVisibility} className=\"toggle-all-button\">\r\n          {showMonthlySales ? translations[language].hideAll : translations[language].showAll}\r\n        </button>\r\n\r\n        {showMonthlySales && Object.entries(getMonthlyExpenses()).map(([monthYear, total]) => {\r\n          // Split month and year\r\n          const [month, year] = monthYear.split(' ');\r\n\r\n          // Translate the month name if available, otherwise, use the original name\r\n          const translatedMonth = language === 'Urdu' ? monthTranslations[month] || month : month;\r\n\r\n          // Combine translated month and year\r\n          const translatedMonthYear = `${translatedMonth} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear} style={{ color: 'green' }}>\r\n              {translations[language].monthlySales} {translatedMonthYear} : {total}\r\n            </div>\r\n          );\r\n        })}\r\n\r\n\r\n        <h4>{translations[language].overallExpenses}<br /><span style={{ color: 'green' }}>{getOverallExpenses()}</span></h4>\r\n      </div>\r\n      <button onClick={toggleGlobalVisibility} className=\"global-toggle-button\">\r\n        {globalVisibility ? translations[language].hideAll : translations[language].showAll}\r\n      </button>\r\n\r\n      {globalVisibility && Object.entries(groupedExpenses).map(([monthYear, expensesList]) => (\r\n        (() => {\r\n          const monthYearArray = monthYear.split(' ');\r\n          const month = monthYearArray[0];\r\n          const year = monthYearArray[1];\r\n\r\n          // Translate the month name if the current language is Urdu\r\n          const translatedMonthName = language === 'Urdu' ? (monthTranslations[month] || month) : month;\r\n\r\n          // Reconstruct the monthYear string with the possibly translated month name\r\n          const displayMonthYear = `${translatedMonthName} ${year}`;\r\n\r\n          return (\r\n            <div key={monthYear}>\r\n              <h3 style={{ marginTop: 15 }}>\r\n                {displayMonthYear}\r\n                <button\r\n                  onClick={() => toggleGroupVisibility(monthYear)}\r\n                  className=\"toggle-button\"\r\n                >\r\n                  {groupVisibility[monthYear] ? translations[language].hide : translations[language].show}\r\n                </button>\r\n              </h3>\r\n              {groupVisibility[monthYear] && (\r\n                <div className=\"expenses-display\">\r\n                  {expensesList.map((expense, index) => {\r\n                    const actualIndex = expenses.findIndex(e => e === expense);\r\n                    return (\r\n                      <div key={index} className=\"expense-card\">\r\n                        <div>{translations[language].date} : {expense.Date}</div>\r\n                        <div>{translations[language].source} : {expense.source}</div>\r\n                        <div>{translations[language].amount} : {expense.amount}</div>\r\n                        <button onClick={() => handleDelete(actualIndex)} className=\"delete-button1\">{translations[language].delete} </button>\r\n                        <button onClick={() => handleUpdate(actualIndex)} className=\"update-button\">{translations[language].update} </button>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })()\r\n      ))}\r\n      {showAlert && (\r\n        <div className=\"alert-dialog\">\r\n          <p>{translations[language].deletePrompt} :</p>\r\n          <button onClick={() => handleAlertConfirm(true)} className=\"confirm-yes\">{translations[language].yes} </button>\r\n          <button onClick={() => handleAlertConfirm(false)} className=\"confirm-no\" >{translations[language].no} </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenditure;\r\n"]},"metadata":{},"sourceType":"module"}